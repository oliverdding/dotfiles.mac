#!/bin/bash

#
# bash completion for docker
#

__docker_previous_extglob_setting=$(shopt -p extglob)
shopt -s extglob

__docker_q() {
	docker ${host:+--host "$host"} ${config:+--config "$config"} ${context:+--context "$context"} 2>/dev/null "$@"
}

# __docker_configs returns a list of configs. Additional options to
# `docker config ls` may be specified in order to filter the list, e.g.
# `__docker_configs --filter label=stage=production`.
# By default, only names are returned.
# Set DOCKER_COMPLETION_SHOW_CONFIG_IDS=yes to also complete IDs.
# An optional first option `--id|--name` may be used to limit the
# output to the IDs or names of matching items. This setting takes
# precedence over the environment setting.
__docker_configs() {
	local format
	if [ "$1" = "--id" ] ; then
		format='{{.ID}}'
		shift
	elif [ "$1" = "--name" ] ; then
		format='{{.Name}}'
		shift
	elif [ "$DOCKER_COMPLETION_SHOW_CONFIG_IDS" = yes ] ; then
		format='{{.ID}} {{.Name}}'
	else
		format='{{.Name}}'
	fi

	__docker_q config ls --format "$format" "$@"
}

# __docker_complete_configs applies completion of configs based on the current value
# of `$cur` or the value of the optional first option `--cur`, if given.
__docker_complete_configs() {
	local current="$cur"
	if [ "$1" = "--cur" ] ; then
		current="$2"
		shift 2
	fi
	COMPREPLY=( $(compgen -W "$(__docker_configs "$@")" -- "$current") )
}

# __docker_containers returns a list of containers. Additional options to
# `docker ps` may be specified in order to filter the list, e.g.
# `__docker_containers --filter status=running`
# By default, only names are returned.
# Set DOCKER_COMPLETION_SHOW_CONTAINER_IDS=yes to also complete IDs.
# An optional first option `--id|--name` may be used to limit the
# output to the IDs or names of matching items. This setting takes
# precedence over the environment setting.
__docker_containers() {
	local format
	if [ "$1" = "--id" ] ; then
		format='{{.ID}}'
		shift
	elif [ "$1" = "--name" ] ; then
		format='{{.Names}}'
		shift
	elif [ "${DOCKER_COMPLETION_SHOW_CONTAINER_IDS}" = yes ] ; then
		format='{{.ID}} {{.Names}}'
	else
		format='{{.Names}}'
	fi
	__docker_q ps --format "$format" "$@"
}

# __docker_complete_containers applies completion of containers based on the current
# value of `$cur` or the value of the optional first option `--cur`, if given.
# Additional filters may be appended, see `__docker_containers`.
__docker_complete_containers() {
	local current="$cur"
	if [ "$1" = "--cur" ] ; then
		current="$2"
		shift 2
	fi
	COMPREPLY=( $(compgen -W "$(__docker_containers "$@")" -- "$current") )
}

__docker_complete_containers_all() {
	__docker_complete_containers "$@" --all
}

# shellcheck disable=SC2120
__docker_complete_containers_removable() {
	__docker_complete_containers "$@" --filter status=created --filter status=exited
}

__docker_complete_containers_running() {
	__docker_complete_containers "$@" --filter status=running
}

# shellcheck disable=SC2120
__docker_complete_containers_stoppable() {
	__docker_complete_containers "$@" --filter status=running --filter status=paused
}

# shellcheck disable=SC2120
__docker_complete_containers_stopped() {
	__docker_complete_containers "$@" --filter status=exited
}

# shellcheck disable=SC2120
__docker_complete_containers_unpauseable() {
	__docker_complete_containers "$@" --filter status=paused
}

__docker_complete_container_names() {
	local containers=( $(__docker_q ps -aq --no-trunc) )
	local names=( $(__docker_q inspect --format '{{.Name}}' "${containers[@]}") )
	names=( "${names[@]#/}" ) # trim off the leading "/" from the container names
	COMPREPLY=( $(compgen -W "${names[*]}" -- "$cur") )
}

__docker_complete_container_ids() {
	local containers=( $(__docker_q ps -aq) )
	COMPREPLY=( $(compgen -W "${containers[*]}" -- "$cur") )
}

# __docker_contexts returns a list of contexts without the special "default" context.
# Completions may be added with `--add`, e.g. `--add default`.
__docker_contexts() {
	local add=()
	while true ; do
		case "$1" in
			--add)
				add+=("$2")
				shift 2
				;;
			*)
				break
				;;
		esac
	done
	__docker_q context ls -q
	echo "${add[@]}"
}

__docker_complete_contexts() {
	local contexts=( $(__docker_contexts "$@") )
	COMPREPLY=( $(compgen -W "${contexts[*]}" -- "$cur") )
}


# __docker_images returns a list of images. For each image, up to three representations
# can be generated: the repository (e.g. busybox), repository:tag (e.g. busybox:latest)
# and the ID (e.g. sha256:ee22cbbd4ea3dff63c86ba60c7691287c321e93adfc1009604eb1dde7ec88645).
#
# The optional arguments `--repo`, `--tag` and `--id` select the representations that
# may be returned. Whether or not a particular representation is actually returned
# depends on the user's customization through several environment variables:
# - image IDs are only shown if DOCKER_COMPLETION_SHOW_IMAGE_IDS=all|non-intermediate.
# - tags can be excluded by setting DOCKER_COMPLETION_SHOW_TAGS=no.
# - repositories are always shown.
#
# In cases where an exact image specification is needed, `--force-tag` can be used.
# It ignores DOCKER_COMPLETION_SHOW_TAGS and only lists valid repository:tag combinations,
# avoiding repository names that would default to a potentially missing default tag.
#
# Additional arguments to `docker image ls` may be specified in order to filter the list,
# e.g. `__docker_images --filter dangling=true`.
#
__docker_images() {
	local repo_format='{{.Repository}}'
	local tag_format='{{.Repository}}:{{.Tag}}'
	local id_format='{{.ID}}'
	local all
	local format

	if [ "$DOCKER_COMPLETION_SHOW_IMAGE_IDS" = "all" ] ; then
		all='--all'
	fi

	while true ; do
		case "$1" in
			--repo)
				format+="$repo_format\n"
				shift
				;;
			--tag)
				if [ "${DOCKER_COMPLETION_SHOW_TAGS:-yes}" = "yes" ]; then
					format+="$tag_format\n"
				fi
				shift
				;;
			--id)
				if [[ $DOCKER_COMPLETION_SHOW_IMAGE_IDS =~ ^(all|non-intermediate)$ ]] ; then
					format+="$id_format\n"
				fi
				shift
				;;
			--force-tag)
				# like `--tag` but ignores environment setting
				format+="$tag_format\n"
				shift
				;;
			*)
				break
				;;
		esac
	done

	__docker_q image ls --no-trunc --format "${format%\\n}" $all "$@" | grep -v '<none>$'
}

# __docker_complete_images applies completion of images based on the current value of `$cur` or
# the value of the optional first option `--cur`, if given.
# See __docker_images for customization of the returned items.
__docker_complete_images() {
	local current="$cur"
	if [ "$1" = "--cur" ] ; then
		current="$2"
		shift 2
	fi
	COMPREPLY=( $(compgen -W "$(__docker_images "$@")" -- "$current") )
	__ltrim_colon_completions "$current"
}

# __docker_networks returns a list of all networks. Additional options to
# `docker network ls` may be specified in order to filter the list, e.g.
# `__docker_networks --filter type=custom`
# By default, only names are returned.
# Set DOCKER_COMPLETION_SHOW_NETWORK_IDS=yes to also complete IDs.
# An optional first option `--id|--name` may be used to limit the
# output to the IDs or names of matching items. This setting takes
# precedence over the environment setting.
__docker_networks() {
	local format
	if [ "$1" = "--id" ] ; then
		format='{{.ID}}'
		shift
	elif [ "$1" = "--name" ] ; then
		format='{{.Name}}'
		shift
	elif [ "${DOCKER_COMPLETION_SHOW_NETWORK_IDS}" = yes ] ; then
		format='{{.ID}} {{.Name}}'
	else
		format='{{.Name}}'
	fi
	__docker_q network ls --format "$format" "$@"
}

# __docker_complete_networks applies completion of networks based on the current
# value of `$cur` or the value of the optional first option `--cur`, if given.
# Additional filters may be appended, see `__docker_networks`.
__docker_complete_networks() {
	local current="$cur"
	if [ "$1" = "--cur" ] ; then
		current="$2"
		shift 2
	fi
	COMPREPLY=( $(compgen -W "$(__docker_networks "$@")" -- "$current") )
}

__docker_complete_containers_in_network() {
	local containers=($(__docker_q network inspect -f '{{range $i, $c := .Containers}}{{$i}} {{$c.Name}} {{end}}' "$1"))
	COMPREPLY=( $(compgen -W "${containers[*]}" -- "$cur") )
}

# __docker_volumes returns a list of all volumes. Additional options to
# `docker volume ls` may be specified in order to filter the list, e.g.
# `__docker_volumes --filter dangling=true`
# Because volumes do not have IDs, this function does not distinguish between
# IDs and names.
__docker_volumes() {
	__docker_q volume ls -q "$@"
}

# __docker_complete_volumes applies completion of volumes based on the current
# value of `$cur` or the value of the optional first option `--cur`, if given.
# Additional filters may be appended, see `__docker_volumes`.
__docker_complete_volumes() {
	local current="$cur"
	if [ "$1" = "--cur" ] ; then
		current="$2"
		shift 2
	fi
	COMPREPLY=( $(compgen -W "$(__docker_volumes "$@")" -- "$current") )
}

# __docker_plugins_bundled returns a list of all plugins of a given type.
# The type has to be specified with the mandatory option `--type`.
# Valid types are: Network, Volume, Authorization.
# Completions may be added or removed with `--add` and `--remove`
# This function only deals with plugins that come bundled with Docker.
# For plugins managed by `docker plugin`, see `__docker_plugins_installed`.
__docker_plugins_bundled() {
	local type add=() remove=()
	while true ; do
		case "$1" in
			--type)
				type="$2"
				shift 2
				;;
			--add)
				add+=("$2")
				shift 2
				;;
			--remove)
				remove+=("$2")
				shift 2
				;;
			*)
				break
				;;
		esac
	done

	local plugins=($(__docker_q info --format "{{range \$i, \$p := .Plugins.$type}}{{.}} {{end}}"))
	for del in "${remove[@]}" ; do
		plugins=(${plugins[@]/$del/})
	done
	echo "${plugins[@]}" "${add[@]}"
}

# __docker_complete_plugins_bundled applies completion of plugins based on the current
# value of `$cur` or the value of the optional first option `--cur`, if given.
# The plugin type has to be specified with the next option `--type`.
# This function only deals with plugins that come bundled with Docker.
# For completion of plugins managed by `docker plugin`, see
# `__docker_complete_plugins_installed`.
__docker_complete_plugins_bundled() {
	local current="$cur"
	if [ "$1" = "--cur" ] ; then
		current="$2"
		shift 2
	fi
	COMPREPLY=( $(compgen -W "$(__docker_plugins_bundled "$@")" -- "$current") )
}

# __docker_plugins_installed returns a list of all plugins that were installed with
# the Docker plugin API.
# By default, only names are returned.
# Set DOCKER_COMPLETION_SHOW_PLUGIN_IDS=yes to also complete IDs.
# Additional options to `docker plugin ls` may be specified in order to filter the list,
# e.g. `__docker_plugins_installed --filter enabled=true`
# For built-in pugins, see `__docker_plugins_bundled`.
__docker_plugins_installed() {
	local format
	if [ "$DOCKER_COMPLETION_SHOW_PLUGIN_IDS" = yes ] ; then
		format='{{.ID}} {{.Name}}'
	else
		format='{{.Name}}'
	fi
	__docker_q plugin ls --format "$format" "$@"
}

# __docker_complete_plugins_installed applies completion of plugins that were installed
# with the Docker plugin API, based on the current value of `$cur` or the value of
# the optional first option `--cur`, if given.
# Additional filters may be appended, see `__docker_plugins_installed`.
# For completion of built-in pugins, see `__docker_complete_plugins_bundled`.
__docker_complete_plugins_installed() {
	local current="$cur"
	if [ "$1" = "--cur" ] ; then
		current="$2"
		shift 2
	fi
	COMPREPLY=( $(compgen -W "$(__docker_plugins_installed "$@")" -- "$current") )
}

__docker_runtimes() {
	__docker_q info | sed -n 's/^Runtimes: \(.*\)/\1/p'
}

__docker_complete_runtimes() {
	COMPREPLY=( $(compgen -W "$(__docker_runtimes)" -- "$cur") )
}

# __docker_secrets returns a list of secrets. Additional options to
# `docker secret ls` may be specified in order to filter the list, e.g.
# `__docker_secrets --filter label=stage=production`
# By default, only names are returned.
# Set DOCKER_COMPLETION_SHOW_SECRET_IDS=yes to also complete IDs.
# An optional first option `--id|--name` may be used to limit the
# output to the IDs or names of matching items. This setting takes
# precedence over the environment setting.
__docker_secrets() {
	local format
	if [ "$1" = "--id" ] ; then
		format='{{.ID}}'
		shift
	elif [ "$1" = "--name" ] ; then
		format='{{.Name}}'
		shift
	elif [ "$DOCKER_COMPLETION_SHOW_SECRET_IDS" = yes ] ; then
		format='{{.ID}} {{.Name}}'
	else
		format='{{.Name}}'
	fi

	__docker_q secret ls --format "$format" "$@"
}

# __docker_complete_secrets applies completion of secrets based on the current value
# of `$cur` or the value of the optional first option `--cur`, if given.
__docker_complete_secrets() {
	local current="$cur"
	if [ "$1" = "--cur" ] ; then
		current="$2"
		shift 2
	fi
	COMPREPLY=( $(compgen -W "$(__docker_secrets "$@")" -- "$current") )
}

# __docker_stacks returns a list of all stacks.
__docker_stacks() {
	__docker_q stack ls | awk 'NR>1 {print $1}'
}

# __docker_complete_stacks applies completion of stacks based on the current value
# of `$cur` or the value of the optional first option `--cur`, if given.
__docker_complete_stacks() {
	local current="$cur"
	if [ "$1" = "--cur" ] ; then
		current="$2"
		shift 2
	fi
	COMPREPLY=( $(compgen -W "$(__docker_stacks "$@")" -- "$current") )
}

# __docker_nodes returns a list of all nodes. Additional options to
# `docker node ls` may be specified in order to filter the list, e.g.
# `__docker_nodes --filter role=manager`
# By default, only node names are returned.
# Set DOCKER_COMPLETION_SHOW_NODE_IDS=yes to also complete node IDs.
# An optional first option `--id|--name` may be used to limit the
# output to the IDs or names of matching items. This setting takes
# precedence over the environment setting.
# Completions may be added with `--add`, e.g. `--add self`.
__docker_nodes() {
	local format
	if [ "$DOCKER_COMPLETION_SHOW_NODE_IDS" = yes ] ; then
		format='{{.ID}} {{.Hostname}}'
	else
		format='{{.Hostname}}'
	fi

	local add=()

	while true ; do
		case "$1" in
			--id)
				format='{{.ID}}'
				shift
				;;
			--name)
				format='{{.Hostname}}'
				shift
				;;
			--add)
				add+=("$2")
				shift 2
				;;
			*)
				break
				;;
		esac
	done

	echo "$(__docker_q node ls --format "$format" "$@")" "${add[@]}"
}

# __docker_complete_nodes applies completion of nodes based on the current
# value of `$cur` or the value of the optional first option `--cur`, if given.
# Additional filters may be appended, see `__docker_nodes`.
__docker_complete_nodes() {
	local current="$cur"
	if [ "$1" = "--cur" ] ; then
		current="$2"
		shift 2
	fi
	COMPREPLY=( $(compgen -W "$(__docker_nodes "$@")" -- "$current") )
}

# __docker_services returns a list of all services. Additional options to
# `docker service ls` may be specified in order to filter the list, e.g.
# `__docker_services --filter name=xxx`
# By default, only node names are returned.
# Set DOCKER_COMPLETION_SHOW_SERVICE_IDS=yes to also complete IDs.
# An optional first option `--id|--name` may be used to limit the
# output to the IDs or names of matching items. This setting takes
# precedence over the environment setting.
__docker_services() {
	local format='{{.Name}}'  # default: service name only
	[ "${DOCKER_COMPLETION_SHOW_SERVICE_IDS}" = yes ] && format='{{.ID}} {{.Name}}' # ID & name

	if [ "$1" = "--id" ] ; then
		format='{{.ID}}' # IDs only
		shift
	elif [ "$1" = "--name" ] ; then
		format='{{.Name}}' # names only
		shift
	fi

	__docker_q service ls --quiet --format "$format" "$@"
}

# __docker_complete_services applies completion of services based on the current
# value of `$cur` or the value of the optional first option `--cur`, if given.
# Additional filters may be appended, see `__docker_services`.
__docker_complete_services() {
	local current="$cur"
	if [ "$1" = "--cur" ] ; then
		current="$2"
		shift 2
	fi
	COMPREPLY=( $(__docker_services "$@" --filter "name=$current") )
}

# __docker_tasks returns a list of all task IDs.
__docker_tasks() {
	__docker_q service ps --format '{{.ID}}' ""
}

# __docker_complete_services_and_tasks applies completion of services and task IDs.
# shellcheck disable=SC2120
__docker_complete_services_and_tasks() {
	COMPREPLY=( $(compgen -W "$(__docker_services "$@") $(__docker_tasks)" -- "$cur") )
}

# __docker_append_to_completions appends the word passed as an argument to every
# word in `$COMPREPLY`.
# Normally you do this with `compgen -S` while generating the completions.
# This function allows you to append a suffix later. It allows you to use
# the __docker_complete_XXX functions in cases where you need a suffix.
__docker_append_to_completions() {
	COMPREPLY=( ${COMPREPLY[@]/%/"$1"} )
}

# __docker_fetch_info fetches information about the configured Docker server and updates
# several variables with the results.
# The result is cached for the duration of one invocation of bash completion.
__docker_fetch_info() {
	if [ -z "$info_fetched" ] ; then
		read -r server_experimental server_os <<< "$(__docker_q version -f '{{.Server.Experimental}} {{.Server.Os}}')"
		info_fetched=true
	fi
}

# __docker_server_is_experimental tests whether the currently configured Docker
# server runs in experimental mode. If so, the function exits with 0 (true).
# Otherwise, or if the result cannot be determined, the exit value is 1 (false).
__docker_server_is_experimental() {
	__docker_fetch_info
	[ "$server_experimental" = "true" ]
}

# __docker_server_os_is tests whether the currently configured Docker server runs
# on the operating system passed in as the first argument.
# Known operating systems: linux, windows.
__docker_server_os_is() {
	local expected_os="$1"
	__docker_fetch_info
	[ "$server_os" = "$expected_os" ]
}

# __docker_stack_orchestrator_is tests whether the client is configured to use
# the orchestrator that is passed in as the first argument.
__docker_stack_orchestrator_is() {
	case "$1" in
		kubernetes)
			if [ -z "$stack_orchestrator_is_kubernetes" ] ; then
				__docker_q stack ls --help | grep -qe --namespace
				stack_orchestrator_is_kubernetes=$?
			fi
			return $stack_orchestrator_is_kubernetes
			;;
		swarm)
			if [ -z "$stack_orchestrator_is_swarm" ] ; then
				__docker_q stack deploy --help | grep -qe "with-registry-auth"
				stack_orchestrator_is_swarm=$?
			fi
			return $stack_orchestrator_is_swarm
			;;
		*)
			return 1
			;;

	esac
}

# __docker_pos_first_nonflag finds the position of the first word that is neither
# option nor an option's argument. If there are options that require arguments,
# you should pass a glob describing those options, e.g. "--option1|-o|--option2"
# Use this function to restrict completions to exact positions after the argument list.
__docker_pos_first_nonflag() {
	local argument_flags=$1

	local counter=$((${subcommand_pos:-${command_pos}} + 1))
	while [ "$counter" -le "$cword" ]; do
		if [ -n "$argument_flags" ] && eval "case '${words[$counter]}' in $argument_flags) true ;; *) false ;; esac"; then
			(( counter++ ))
			# eat "=" in case of --option=arg syntax
			[ "${words[$counter]}" = "=" ] && (( counter++ ))
		else
			case "${words[$counter]}" in
				-*)
					;;
				*)
					break
					;;
			esac
		fi

		# Bash splits words at "=", retaining "=" as a word, examples:
		# "--debug=false" => 3 words, "--log-opt syslog-facility=daemon" => 4 words
		while [ "${words[$counter + 1]}" = "=" ] ; do
			counter=$(( counter + 2))
		done

		(( counter++ ))
	done

	echo "$counter"
}

# __docker_map_key_of_current_option returns `key` if we are currently completing the
# value of a map option (`key=value`) which matches the extglob given as an argument.
# This function is needed for key-specific completions.
__docker_map_key_of_current_option() {
	local glob="$1"

	local key glob_pos
	if [ "$cur" = "=" ] ; then        # key= case
		key="$prev"
		glob_pos=$((cword - 2))
	elif [[ $cur == *=* ]] ; then     # key=value case (OSX)
		key=${cur%=*}
		glob_pos=$((cword - 1))
	elif [ "$prev" = "=" ] ; then
		key=${words[$cword - 2]}  # key=value case
		glob_pos=$((cword - 3))
	else
		return
	fi

	[ "${words[$glob_pos]}" = "=" ] && ((glob_pos--))  # --option=key=value syntax

	[[ ${words[$glob_pos]} == @($glob) ]] && echo "$key"
}

# __docker_value_of_option returns the value of the first option matching `option_glob`.
# Valid values for `option_glob` are option names like `--log-level` and globs like
# `--log-level|-l`
# Only positions between the command and the current word are considered.
__docker_value_of_option() {
	local option_extglob=$(__docker_to_extglob "$1")

	local counter=$((command_pos + 1))
	while [ "$counter" -lt "$cword" ]; do
		case ${words[$counter]} in
			$option_extglob )
				echo "${words[$counter + 1]}"
				break
				;;
		esac
		(( counter++ ))
	done
}

# __docker_to_alternatives transforms a multiline list of strings into a single line
# string with the words separated by `|`.
# This is used to prepare arguments to __docker_pos_first_nonflag().
__docker_to_alternatives() {
	local parts=( $1 )
	local IFS='|'
	echo "${parts[*]}"
}

# __docker_to_extglob transforms a multiline list of options into an extglob pattern
# suitable for use in case statements.
__docker_to_extglob() {
	local extglob=$( __docker_to_alternatives "$1" )
	echo "@($extglob)"
}

# __docker_subcommands processes subcommands
# Locates the first occurrence of any of the subcommands contained in the
# first argument. In case of a match, calls the corresponding completion
# function and returns 0.
# If no match is found, 1 is returned. The calling function can then
# continue processing its completion.
#
# TODO if the preceding command has options that accept arguments and an
# argument is equal ot one of the subcommands, this is falsely detected as
# a match.
__docker_subcommands() {
	local subcommands="$1"

	local counter=$((command_pos + 1))
	while [ "$counter" -lt "$cword" ]; do
		case "${words[$counter]}" in
			$(__docker_to_extglob "$subcommands") )
				subcommand_pos=$counter
				local subcommand=${words[$counter]}
				local completions_func=_docker_${command}_${subcommand//-/_}
				declare -F "$completions_func" >/dev/null && "$completions_func"
				return 0
				;;
		esac
		(( counter++ ))
	done
	return 1
}

# __docker_nospace suppresses trailing whitespace
__docker_nospace() {
	# compopt is not available in ancient bash versions
	type compopt &>/dev/null && compopt -o nospace
}

__docker_complete_resolved_hostname() {
	command -v host >/dev/null 2>&1 || return
	COMPREPLY=( $(host 2>/dev/null "${cur%:}" | awk '/has address/ {print $4}') )
}

# __docker_local_interfaces returns a list of the names and addresses of all
# local network interfaces.
# If `--ip-only` is passed as a first argument, only addresses are returned.
__docker_local_interfaces() {
	command -v ip >/dev/null 2>&1 || return

	local format
	if [ "$1" = "--ip-only" ] ; then
		format='\1'
		shift
	else
		 format='\1 \2'
	fi

	ip addr show scope global 2>/dev/null | sed -n "s| \+inet \([0-9.]\+\).* \([^ ]\+\)|$format|p"
}

# __docker_complete_local_interfaces applies completion of the names and addresses of all
# local network interfaces based on the current value of `$cur`.
# An additional value can be added to the possible completions with an `--add` argument.
__docker_complete_local_interfaces() {
	local additional_interface
	if [ "$1" = "--add" ] ; then
		additional_interface="$2"
		shift 2
	fi

	COMPREPLY=( $( compgen -W "$(__docker_local_interfaces "$@") $additional_interface" -- "$cur" ) )
}

# __docker_complete_local_ips applies completion of the addresses of all local network
# interfaces based on the current value of `$cur`.
__docker_complete_local_ips() {
	__docker_complete_local_interfaces --ip-only
}

# __docker_complete_capabilities_addable completes Linux capabilities which are
# not granted by default and may be added.
# see https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities
__docker_complete_capabilities_addable() {
  local capabilities=(
		ALL
		CAP_AUDIT_CONTROL
		CAP_AUDIT_READ
		CAP_BLOCK_SUSPEND
		CAP_BPF
		CAP_CHECKPOINT_RESTORE
		CAP_DAC_READ_SEARCH
		CAP_IPC_LOCK
		CAP_IPC_OWNER
		CAP_LEASE
		CAP_LINUX_IMMUTABLE
		CAP_MAC_ADMIN
		CAP_MAC_OVERRIDE
		CAP_NET_ADMIN
		CAP_NET_BROADCAST
		CAP_PERFMON
		CAP_SYS_ADMIN
		CAP_SYS_BOOT
		CAP_SYSLOG
		CAP_SYS_MODULE
		CAP_SYS_NICE
		CAP_SYS_PACCT
		CAP_SYS_PTRACE
		CAP_SYS_RAWIO
		CAP_SYS_RESOURCE
		CAP_SYS_TIME
		CAP_SYS_TTY_CONFIG
		CAP_WAKE_ALARM
		RESET
  )
	COMPREPLY=( $( compgen -W "${capabilities[*]} ${capabilities[*]#CAP_}" -- "$cur" ) )
}

# __docker_complete_capabilities_droppable completes Linux capability options which are
# allowed by default and can be dropped.
# see https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities
__docker_complete_capabilities_droppable() {
	local capabilities=(
		ALL
		CAP_AUDIT_WRITE
		CAP_CHOWN
		CAP_DAC_OVERRIDE
		CAP_FOWNER
		CAP_FSETID
		CAP_KILL
		CAP_MKNOD
		CAP_NET_BIND_SERVICE
		CAP_NET_RAW
		CAP_SETFCAP
		CAP_SETGID
		CAP_SETPCAP
		CAP_SETUID
		CAP_SYS_CHROOT
		RESET
	)
	COMPREPLY=( $( compgen -W "${capabilities[*]} ${capabilities[*]#CAP_}" -- "$cur" ) )
}

__docker_complete_detach_keys() {
	case "$prev" in
		--detach-keys)
			case "$cur" in
				*,)
					COMPREPLY=( $( compgen -W "${cur}ctrl-" -- "$cur" ) )
					;;
				*)
					COMPREPLY=( $( compgen -W "ctrl-" -- "$cur" ) )
					;;
			esac

			__docker_nospace
			return
			;;
	esac
	return 1
}

__docker_complete_isolation() {
	COMPREPLY=( $( compgen -W "default hyperv process" -- "$cur" ) )
}

__docker_complete_log_drivers() {
	COMPREPLY=( $( compgen -W "
		awslogs
		etwlogs
		fluentd
		gcplogs
		gelf
		journald
		json-file
		local
		logentries
		none
		splunk
		syslog
	" -- "$cur" ) )
}

__docker_complete_log_options() {
	# see repository docker/docker.github.io/engine/admin/logging/

	# really global options, defined in https://github.com/moby/moby/blob/master/daemon/logger/factory.go
	local common_options1="max-buffer-size mode"
	# common options defined in https://github.com/moby/moby/blob/master/daemon/logger/loginfo.go
	# but not implemented in all log drivers
	local common_options2="env env-regex labels"

	# awslogs does not implement the $common_options2.
	local awslogs_options="$common_options1 awslogs-create-group awslogs-credentials-endpoint awslogs-datetime-format awslogs-group awslogs-multiline-pattern awslogs-region awslogs-stream tag"

	local fluentd_options="$common_options1 $common_options2 fluentd-address fluentd-async fluentd-buffer-limit fluentd-request-ack fluentd-retry-wait fluentd-max-retries fluentd-sub-second-precision tag"
	local gcplogs_options="$common_options1 $common_options2 gcp-log-cmd gcp-meta-id gcp-meta-name gcp-meta-zone gcp-project"
	local gelf_options="$common_options1 $common_options2 gelf-address gelf-compression-level gelf-compression-type gelf-tcp-max-reconnect gelf-tcp-reconnect-delay tag"
	local journald_options="$common_options1 $common_options2 tag"
	local json_file_options="$common_options1 $common_options2 compress max-file max-size"
	local local_options="$common_options1 compress max-file max-size"
	local logentries_options="$common_options1 $common_options2 line-only logentries-token tag"
	local splunk_options="$common_options1 $common_options2 splunk-caname splunk-capath splunk-format splunk-gzip splunk-gzip-level splunk-index splunk-insecureskipverify splunk-source splunk-sourcetype splunk-token splunk-url splunk-verify-connection tag"
	local syslog_options="$common_options1 $common_options2 syslog-address syslog-facility syslog-format syslog-tls-ca-cert syslog-tls-cert syslog-tls-key syslog-tls-skip-verify tag"

	local all_options="$fluentd_options $gcplogs_options $gelf_options $journald_options $logentries_options $json_file_options $syslog_options $splunk_options"

	case $(__docker_value_of_option --log-driver) in
		'')
			COMPREPLY=( $( compgen -W "$all_options" -S = -- "$cur" ) )
			;;
		awslogs)
			COMPREPLY=( $( compgen -W "$awslogs_options" -S = -- "$cur" ) )
			;;
		fluentd)
			COMPREPLY=( $( compgen -W "$fluentd_options" -S = -- "$cur" ) )
			;;
		gcplogs)
			COMPREPLY=( $( compgen -W "$gcplogs_options" -S = -- "$cur" ) )
			;;
		gelf)
			COMPREPLY=( $( compgen -W "$gelf_options" -S = -- "$cur" ) )
			;;
		journald)
			COMPREPLY=( $( compgen -W "$journald_options" -S = -- "$cur" ) )
			;;
		json-file)
			COMPREPLY=( $( compgen -W "$json_file_options" -S = -- "$cur" ) )
			;;
		local)
			COMPREPLY=( $( compgen -W "$local_options" -S = -- "$cur" ) )
			;;
		logentries)
			COMPREPLY=( $( compgen -W "$logentries_options" -S = -- "$cur" ) )
			;;
		syslog)
			COMPREPLY=( $( compgen -W "$syslog_options" -S = -- "$cur" ) )
			;;
		splunk)
			COMPREPLY=( $( compgen -W "$splunk_options" -S = -- "$cur" ) )
			;;
		*)
			return
			;;
	esac

	__docker_nospace
}

__docker_complete_log_driver_options() {
	local key=$(__docker_map_key_of_current_option '--log-opt')
	case "$key" in
		awslogs-create-group)
			COMPREPLY=( $( compgen -W "false true" -- "${cur##*=}" ) )
			return
			;;
		awslogs-credentials-endpoint)
			COMPREPLY=( $( compgen -W "/" -- "${cur##*=}" ) )
			__docker_nospace
			return
			;;
		compress|fluentd-async-connect)
			COMPREPLY=( $( compgen -W "false true" -- "${cur##*=}" ) )
			return
			;;
		fluentd-sub-second-precision)
			COMPREPLY=( $( compgen -W "false true" -- "${cur##*=}" ) )
			return
			;;
		gelf-address)
			COMPREPLY=( $( compgen -W "tcp udp" -S "://" -- "${cur##*=}" ) )
			__docker_nospace
			return
			;;
		gelf-compression-level)
			COMPREPLY=( $( compgen -W "1 2 3 4 5 6 7 8 9" -- "${cur##*=}" ) )
			return
			;;
		gelf-compression-type)
			COMPREPLY=( $( compgen -W "gzip none zlib" -- "${cur##*=}" ) )
			return
			;;
		line-only)
			COMPREPLY=( $( compgen -W "false true" -- "${cur##*=}" ) )
			return
			;;
		mode)
			COMPREPLY=( $( compgen -W "blocking non-blocking" -- "${cur##*=}" ) )
			return
			;;
		syslog-address)
			COMPREPLY=( $( compgen -W "tcp:// tcp+tls:// udp:// unix://" -- "${cur##*=}" ) )
			__docker_nospace
			__ltrim_colon_completions "${cur}"
			return
			;;
		syslog-facility)
			COMPREPLY=( $( compgen -W "
				auth
				authpriv
				cron
				daemon
				ftp
				kern
				local0
				local1
				local2
				local3
				local4
				local5
				local6
				local7
				lpr
				mail
				news
				syslog
				user
				uucp
			" -- "${cur##*=}" ) )
			return
			;;
		syslog-format)
			COMPREPLY=( $( compgen -W "rfc3164 rfc5424 rfc5424micro" -- "${cur##*=}" ) )
			return
			;;
		syslog-tls-ca-cert|syslog-tls-cert|syslog-tls-key)
			_filedir
			return
			;;
		syslog-tls-skip-verify)
			COMPREPLY=( $( compgen -W "true" -- "${cur##*=}" ) )
			return
			;;
		splunk-url)
			COMPREPLY=( $( compgen -W "http:// https://" -- "${cur##*=}" ) )
			__docker_nospace
			__ltrim_colon_completions "${cur}"
			return
			;;
		splunk-gzip|splunk-insecureskipverify|splunk-verify-connection)
			COMPREPLY=( $( compgen -W "false true" -- "${cur##*=}" ) )
			return
			;;
		splunk-format)
			COMPREPLY=( $( compgen -W "inline json raw" -- "${cur##*=}" ) )
			return
			;;
	esac
	return 1
}

__docker_complete_log_levels() {
	COMPREPLY=( $( compgen -W "debug info warn error fatal" -- "$cur" ) )
}

__docker_complete_restart() {
	case "$prev" in
		--restart)
			case "$cur" in
				on-failure:*)
					;;
				*)
					COMPREPLY=( $( compgen -W "always no on-failure on-failure: unless-stopped" -- "$cur") )
					;;
			esac
			return
			;;
	esac
	return 1
}

# __docker_complete_signals returns a subset of the available signals that is most likely
# relevant in the context of docker containers
__docker_complete_signals() {
	local signals=(
		SIGCONT
		SIGHUP
		SIGINT
		SIGKILL
		SIGQUIT
		SIGSTOP
		SIGTERM
		SIGUSR1
		SIGUSR2
	)
	COMPREPLY=( $( compgen -W "${signals[*]} ${signals[*]#SIG}" -- "$( echo "$cur" | tr '[:lower:]' '[:upper:]')" ) )
}

__docker_complete_stack_orchestrator_options() {
	case "$prev" in
		--kubeconfig)
			_filedir
			return 0
			;;
		--namespace)
			return 0
			;;
		--orchestrator)
			COMPREPLY=( $( compgen -W "all kubernetes swarm" -- "$cur") )
			return 0
			;;
	esac
	return 1
}

__docker_complete_ulimits() {
	local limits="
		as
		chroot
		core
		cpu
		data
		fsize
		locks
		maxlogins
		maxsyslogins
		memlock
		msgqueue
		nice
		nofile
		nproc
		priority
		rss
		rtprio
		sigpending
		stack
	"
	if [ "$1" = "--rm" ] ; then
		COMPREPLY=( $( compgen -W "$limits" -- "$cur" ) )
	else
		COMPREPLY=( $( compgen -W "$limits" -S = -- "$cur" ) )
		__docker_nospace
	fi
}

__docker_complete_user_group() {
	if [[ $cur == *:* ]] ; then
		COMPREPLY=( $(compgen -g -- "${cur#*:}") )
	else
		COMPREPLY=( $(compgen -u -S : -- "$cur") )
		__docker_nospace
	fi
}

_docker_docker() {
	# global options that may appear after the docker command
	local boolean_options="
		$global_boolean_options
		--help
		--version -v
	"

	case "$prev" in
		--config)
			_filedir -d
			return
			;;
		--context|-c)
			__docker_complete_contexts
			return
			;;
		--log-level|-l)
			__docker_complete_log_levels
			return
			;;
		$(__docker_to_extglob "$global_options_with_args") )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$boolean_options $global_options_with_args" -- "$cur" ) )
			;;
		*)
			local counter=$( __docker_pos_first_nonflag "$(__docker_to_extglob "$global_options_with_args")" )
			if [ "$cword" -eq "$counter" ]; then
				__docker_server_is_experimental && commands+=(${experimental_server_commands[*]})
				COMPREPLY=( $( compgen -W "${commands[*]} help" -- "$cur" ) )
			fi
			;;
	esac
}

_docker_attach() {
	_docker_container_attach
}

_docker_build() {
	_docker_image_build
}


_docker_builder() {
	local subcommands="
		build
		prune
	"
	__docker_subcommands "$subcommands" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_builder_build() {
	_docker_image_build
}

_docker_builder_prune() {
	case "$prev" in
		--filter)
			COMPREPLY=( $( compgen -S = -W "description id inuse parent private shared type until unused-for" -- "$cur" ) )
			__docker_nospace
			return
			;;
		--keep-storage)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--all -a --filter --force -f --help --keep-storage" -- "$cur" ) )
			;;
	esac
}

_docker_checkpoint() {
	local subcommands="
		create
		ls
		rm
	"
	local aliases="
		list
		remove
	"
	__docker_subcommands "$subcommands $aliases" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_checkpoint_create() {
	case "$prev" in
		--checkpoint-dir)
			_filedir -d
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--checkpoint-dir --help --leave-running" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--checkpoint-dir')
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_containers_running
			fi
			;;
	esac
}

_docker_checkpoint_ls() {
	case "$prev" in
		--checkpoint-dir)
			_filedir -d
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--checkpoint-dir --help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--checkpoint-dir')
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_containers_all
			fi
			;;
	esac
}

_docker_checkpoint_rm() {
	case "$prev" in
		--checkpoint-dir)
			_filedir -d
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--checkpoint-dir --help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--checkpoint-dir')
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_containers_all
			elif [ "$cword" -eq "$((counter + 1))" ]; then
				COMPREPLY=( $( compgen -W "$(__docker_q checkpoint ls "$prev" | sed 1d)" -- "$cur" ) )
			fi
			;;
	esac
}


_docker_config() {
	local subcommands="
		create
		inspect
		ls
		rm
	"
	local aliases="
		list
		remove
	"
	__docker_subcommands "$subcommands $aliases" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_config_create() {
	case "$prev" in
		--label|-l)
			return
			;;
		--template-driver)
			COMPREPLY=( $( compgen -W "golang" -- "$cur" ) )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --label -l --template-driver" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--label|-l|--template-driver')
			if [ "$cword" -eq "$((counter + 1))" ]; then
				_filedir
			fi
			;;
	esac
}

_docker_config_inspect() {
	case "$prev" in
		--format|-f)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format -f --help --pretty" -- "$cur" ) )
			;;
		*)
			__docker_complete_configs
			;;
	esac
}

_docker_config_list() {
	_docker_config_ls
}

_docker_config_ls() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		id)
			__docker_complete_configs --cur "${cur##*=}" --id
			return
			;;
		name)
			__docker_complete_configs --cur "${cur##*=}" --name
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -S = -W "id label name" -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format --filter -f --help --quiet -q" -- "$cur" ) )
			;;
	esac
}

_docker_config_remove() {
	_docker_config_rm
}

_docker_config_rm() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_complete_configs
			;;
	esac
}


_docker_container() {
	local subcommands="
		attach
		commit
		cp
		create
		diff
		exec
		export
		inspect
		kill
		logs
		ls
		pause
		port
		prune
		rename
		restart
		rm
		run
		start
		stats
		stop
		top
		unpause
		update
		wait
	"
	local aliases="
		list
		ps
	"
	__docker_subcommands "$subcommands $aliases" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_container_attach() {
	__docker_complete_detach_keys && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--detach-keys --help --no-stdin --sig-proxy=false" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--detach-keys')
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_containers_running
			fi
			;;
	esac
}

_docker_container_commit() {
	case "$prev" in
		--author|-a|--change|-c|--message|-m)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--author -a --change -c --help --message -m --pause=false -p=false" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--author|-a|--change|-c|--message|-m')

			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_containers_all
				return
			elif [ "$cword" -eq "$((counter + 1))" ]; then
				__docker_complete_images --repo --tag
				return
			fi
			;;
	esac
}

_docker_container_cp() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--archive -a --follow-link -L --help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				case "$cur" in
					*:)
						return
						;;
					*)
						# combined container and filename completion
						_filedir
						local files=( ${COMPREPLY[@]} )

						__docker_complete_containers_all
						COMPREPLY=( $( compgen -W "${COMPREPLY[*]}" -S ':' ) )
						local containers=( ${COMPREPLY[@]} )

						COMPREPLY=( $( compgen -W "${files[*]} ${containers[*]}" -- "$cur" ) )
						if [[ "${COMPREPLY[*]}" = *: ]]; then
							__docker_nospace
						fi
						return
						;;
				esac
			fi
			(( counter++ ))

			if [ "$cword" -eq "$counter" ]; then
				if [ -e "$prev" ]; then
					__docker_complete_containers_all
					COMPREPLY=( $( compgen -W "${COMPREPLY[*]}" -S ':' ) )
					__docker_nospace
				else
					_filedir
				fi
				return
			fi
			;;
	esac
}

_docker_container_create() {
	_docker_container_run_and_create
}

_docker_container_diff() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_containers_all
			fi
			;;
	esac
}

_docker_container_exec() {
	__docker_complete_detach_keys && return

	case "$prev" in
		--env|-e)
			# we do not append a "=" here because "-e VARNAME" is legal syntax, too
			COMPREPLY=( $( compgen -e -- "$cur" ) )
			__docker_nospace
			return
			;;
		--env-file)
			_filedir
			return
			;;
		--user|-u)
			__docker_complete_user_group
			return
			;;
		--workdir|-w)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--detach -d --detach-keys --env -e --env-file --help --interactive -i --privileged -t --tty -u --user --workdir -w" -- "$cur" ) )
			;;
		*)
			__docker_complete_containers_running
			;;
	esac
}

_docker_container_export() {
	case "$prev" in
		--output|-o)
			_filedir
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --output -o" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_containers_all
			fi
			;;
	esac
}

_docker_container_inspect() {
	_docker_inspect --type container
}

_docker_container_kill() {
	case "$prev" in
		--signal|-s)
			__docker_complete_signals
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --signal -s" -- "$cur" ) )
			;;
		*)
			__docker_complete_containers_running
			;;
	esac
}

_docker_container_logs() {
	case "$prev" in
		--since|--tail|-n|--until)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--details --follow -f --help --since --tail -n --timestamps -t --until" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--since|--tail|-n|--until')
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_containers_all
			fi
			;;
	esac
}

_docker_container_list() {
	_docker_container_ls
}

_docker_container_ls() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		ancestor)
			__docker_complete_images --cur "${cur##*=}" --repo --tag --id
			return
			;;
		before)
			__docker_complete_containers_all --cur "${cur##*=}"
			return
			;;
		expose|publish)
			return
			;;
		id)
			__docker_complete_containers_all --cur "${cur##*=}" --id
			return
			;;
		health)
			COMPREPLY=( $( compgen -W "healthy starting none unhealthy" -- "${cur##*=}" ) )
			return
			;;
		is-task)
			COMPREPLY=( $( compgen -W "true false" -- "${cur##*=}" ) )
			return
			;;
		name)
			__docker_complete_containers_all --cur "${cur##*=}" --name
			return
			;;
		network)
			__docker_complete_networks --cur "${cur##*=}"
			return
			;;
		since)
			__docker_complete_containers_all --cur "${cur##*=}"
			return
			;;
		status)
			COMPREPLY=( $( compgen -W "created dead exited paused restarting running removing" -- "${cur##*=}" ) )
			return
			;;
		volume)
			__docker_complete_volumes --cur "${cur##*=}"
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -S = -W "ancestor before exited expose health id is-task label name network publish since status volume" -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format|--last|-n)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--all -a --filter -f --format --help --last -n --latest -l --no-trunc --quiet -q --size -s" -- "$cur" ) )
			;;
	esac
}

_docker_container_pause() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_complete_containers_running
			;;
	esac
}

_docker_container_port() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_containers_all
			fi
			;;
	esac
}

_docker_container_prune() {
	case "$prev" in
		--filter)
			COMPREPLY=( $( compgen -W "label label! until" -S = -- "$cur" ) )
			__docker_nospace
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--force -f --filter --help" -- "$cur" ) )
			;;
	esac
}

_docker_container_ps() {
	_docker_container_ls
}

_docker_container_rename() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_containers_all
			fi
			;;
	esac
}

_docker_container_restart() {
	case "$prev" in
		--time|-t)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --time -t" -- "$cur" ) )
			;;
		*)
			__docker_complete_containers_all
			;;
	esac
}

_docker_container_rm() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--force -f --help --link -l --volumes -v" -- "$cur" ) )
			;;
		*)
			for arg in "${COMP_WORDS[@]}"; do
				case "$arg" in
					--force|-f)
						__docker_complete_containers_all
						return
						;;
				esac
			done
			__docker_complete_containers_removable
			;;
	esac
}

_docker_container_run() {
	_docker_container_run_and_create
}

# _docker_container_run_and_create is the combined completion for `_docker_container_run`
# and `_docker_container_create`
_docker_container_run_and_create() {
	local options_with_args="
		--add-host
		--attach -a
		--blkio-weight
		--blkio-weight-device
		--cap-add
		--cap-drop
		--cgroupns
		--cgroup-parent
		--cidfile
		--cpu-period
		--cpu-quota
		--cpu-rt-period
		--cpu-rt-runtime
		--cpuset-cpus
		--cpus
		--cpuset-mems
		--cpu-shares -c
		--device
		--device-cgroup-rule
		--device-read-bps
		--device-read-iops
		--device-write-bps
		--device-write-iops
		--dns
		--dns-option
		--dns-search
		--domainname
		--entrypoint
		--env -e
		--env-file
		--expose
		--gpus
		--group-add
		--health-cmd
		--health-interval
		--health-retries
		--health-start-period
		--health-timeout
		--hostname -h
		--ip
		--ip6
		--ipc
		--kernel-memory
		--label-file
		--label -l
		--link
		--link-local-ip
		--log-driver
		--log-opt
		--mac-address
		--memory -m
		--memory-swap
		--memory-swappiness
		--memory-reservation
		--mount
		--name
		--network
		--network-alias
		--oom-score-adj
		--pid
		--pids-limit
		--publish -p
		--pull
		--restart
		--runtime
		--security-opt
		--shm-size
		--stop-signal
		--stop-timeout
		--storage-opt
		--tmpfs
		--sysctl
		--ulimit
		--user -u
		--userns
		--uts
		--volume-driver
		--volumes-from
		--volume -v
		--workdir -w
	"
	__docker_server_os_is windows && options_with_args+="
		--cpu-count
		--cpu-percent
		--io-maxbandwidth
		--io-maxiops
		--isolation
	"
	__docker_server_is_experimental && options_with_args+="
		--platform
	"

	local boolean_options="
		--disable-content-trust=false
		--help
		--init
		--interactive -i
		--no-healthcheck
		--oom-kill-disable
		--privileged
		--publish-all -P
		--read-only
		--tty -t
	"

	if [ "$command" = "run" ] || [ "$subcommand" = "run" ] ; then
		options_with_args="$options_with_args
			--detach-keys
		"
		boolean_options="$boolean_options
			--detach -d
			--rm
			--sig-proxy=false
		"
		__docker_complete_detach_keys && return
	fi

	local all_options="$options_with_args $boolean_options"


	__docker_complete_log_driver_options && return
	__docker_complete_restart && return

	local key=$(__docker_map_key_of_current_option '--security-opt')
	case "$key" in
		label)
			[[ $cur == *: ]] && return
			COMPREPLY=( $( compgen -W "user: role: type: level: disable" -- "${cur##*=}") )
			if [ "${COMPREPLY[*]}" != "disable" ] ; then
				__docker_nospace
			fi
			return
			;;
		seccomp)
			local cur=${cur##*=}
			_filedir
			COMPREPLY+=( $( compgen -W "unconfined" -- "$cur" ) )
			return
			;;
	esac

	case "$prev" in
		--add-host)
			case "$cur" in
				*:)
					__docker_complete_resolved_hostname
					return
					;;
			esac
			;;
		--attach|-a)
			COMPREPLY=( $( compgen -W 'stdin stdout stderr' -- "$cur" ) )
			return
			;;
		--cap-add)
			__docker_complete_capabilities_addable
			return
			;;
		--cap-drop)
			__docker_complete_capabilities_droppable
			return
			;;
		--cidfile|--env-file|--label-file)
			_filedir
			return
			;;
		--cgroupns)
			COMPREPLY=( $( compgen -W "host private" -- "$cur" ) )
			return
			;;
		--device|--tmpfs|--volume|-v)
			case "$cur" in
				*:*)
					# TODO somehow do _filedir for stuff inside the image, if it's already specified (which is also somewhat difficult to determine)
					;;
				'')
					COMPREPLY=( $( compgen -W '/' -- "$cur" ) )
					__docker_nospace
					;;
				/*)
					_filedir
					__docker_nospace
					;;
			esac
			return
			;;
		--env|-e)
			# we do not append a "=" here because "-e VARNAME" is legal syntax, too
			COMPREPLY=( $( compgen -e -- "$cur" ) )
			__docker_nospace
			return
			;;
		--ipc)
			case "$cur" in
				*:*)
					cur="${cur#*:}"
					__docker_complete_containers_running
					;;
				*)
					COMPREPLY=( $( compgen -W 'none host private shareable container:' -- "$cur" ) )
					if [ "${COMPREPLY[*]}" = "container:" ]; then
						__docker_nospace
					fi
					;;
			esac
			return
			;;
		--isolation)
			if __docker_server_os_is windows ; then
				__docker_complete_isolation
				return
			fi
			;;
		--link)
			case "$cur" in
				*:*)
					;;
				*)
					__docker_complete_containers_running
					COMPREPLY=( $( compgen -W "${COMPREPLY[*]}" -S ':' ) )
					__docker_nospace
					;;
			esac
			return
			;;
		--log-driver)
			__docker_complete_log_drivers
			return
			;;
		--log-opt)
			__docker_complete_log_options
			return
			;;
		--network)
			case "$cur" in
				container:*)
					__docker_complete_containers_all --cur "${cur#*:}"
					;;
				*)
					COMPREPLY=( $( compgen -W "$(__docker_plugins_bundled --type Network) $(__docker_networks) container:" -- "$cur") )
					if [ "${COMPREPLY[*]}" = "container:" ] ; then
						__docker_nospace
					fi
					;;
			esac
			return
			;;
		--pid)
			case "$cur" in
				*:*)
					__docker_complete_containers_running --cur "${cur#*:}"
					;;
				*)
					COMPREPLY=( $( compgen -W 'host container:' -- "$cur" ) )
					if [ "${COMPREPLY[*]}" = "container:" ]; then
						__docker_nospace
					fi
					;;
			esac
			return
			;;
		--pull)
		  COMPREPLY=( $( compgen -W 'always missing never' -- "$cur" ) )
		  return
		  ;;
		--runtime)
			__docker_complete_runtimes
			return
			;;
		--security-opt)
			COMPREPLY=( $( compgen -W "apparmor= label= no-new-privileges seccomp= systempaths=unconfined" -- "$cur") )
			if [[ ${COMPREPLY[*]} = *= ]] ; then
				__docker_nospace
			fi
			return
			;;
		--stop-signal)
			__docker_complete_signals
			return
			;;
		--storage-opt)
			COMPREPLY=( $( compgen -W "size" -S = -- "$cur") )
			__docker_nospace
			return
			;;
		--ulimit)
			__docker_complete_ulimits
			return
			;;
		--user|-u)
			__docker_complete_user_group
			return
			;;
		--userns)
			COMPREPLY=( $( compgen -W "host" -- "$cur" ) )
			return
			;;
		--volume-driver)
			__docker_complete_plugins_bundled --type Volume
			return
			;;
		--volumes-from)
			__docker_complete_containers_all
			return
			;;
		$(__docker_to_extglob "$options_with_args") )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$all_options" -- "$cur" ) )
			;;
		*)
			local counter=$( __docker_pos_first_nonflag "$( __docker_to_alternatives "$options_with_args" )" )
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_images --repo --tag --id
			fi
			;;
	esac
}

_docker_container_start() {
	__docker_complete_detach_keys && return
	case "$prev" in
		--checkpoint)
			if __docker_server_is_experimental ; then
				return
			fi
			;;
		--checkpoint-dir)
			if __docker_server_is_experimental ; then
				_filedir -d
				return
			fi
			;;
	esac

	case "$cur" in
		-*)
			local options="--attach -a --detach-keys --help --interactive -i"
			__docker_server_is_experimental && options+=" --checkpoint --checkpoint-dir"
			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;
		*)
			__docker_complete_containers_stopped
			;;
	esac
}

_docker_container_stats() {
	case "$prev" in
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--all -a --format --help --no-stream --no-trunc" -- "$cur" ) )
			;;
		*)
			__docker_complete_containers_running
			;;
	esac
}

_docker_container_stop() {
	case "$prev" in
		--time|-t)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --time -t" -- "$cur" ) )
			;;
		*)
			__docker_complete_containers_stoppable
			;;
	esac
}

_docker_container_top() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_containers_running
			fi
			;;
	esac
}

_docker_container_unpause() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_containers_unpauseable
			fi
			;;
	esac
}

_docker_container_update() {
	local options_with_args="
		--blkio-weight
		--cpu-period
		--cpu-quota
		--cpu-rt-period
		--cpu-rt-runtime
		--cpus
		--cpuset-cpus
		--cpuset-mems
		--cpu-shares -c
		--kernel-memory
		--memory -m
		--memory-reservation
		--memory-swap
		--pids-limit
		--restart
	"

	local boolean_options="
		--help
	"

	local all_options="$options_with_args $boolean_options"

	__docker_complete_restart && return

	case "$prev" in
		$(__docker_to_extglob "$options_with_args") )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$all_options" -- "$cur" ) )
			;;
		*)
			__docker_complete_containers_all
			;;
	esac
}

_docker_container_wait() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_complete_containers_all
			;;
	esac
}


_docker_context() {
	local subcommands="
		create
		export
		import
		inspect
		ls
		rm
		update
		use
	"
	local aliases="
		list
		remove
	"
	__docker_subcommands "$subcommands $aliases" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_context_create() {
	case "$prev" in
		--default-stack-orchestrator)
			COMPREPLY=( $( compgen -W "all kubernetes swarm" -- "$cur" ) )
			return
			;;
		--description|--docker|--kubernetes)
			return
			;;
		--from)
			__docker_complete_contexts
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--default-stack-orchestrator --description --docker --from --help --kubernetes" -- "$cur" ) )
			;;
	esac
}

_docker_context_export() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --kubeconfig" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_contexts
			elif [ "$cword" -eq "$((counter + 1))" ]; then
				_filedir
			fi
			;;
	esac
}

_docker_context_import() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				:
			elif [ "$cword" -eq "$((counter + 1))" ]; then
				_filedir
			fi
			;;
	esac
}

_docker_context_inspect() {
	case "$prev" in
		--format|-f)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format -f --help" -- "$cur" ) )
			;;
		*)
			__docker_complete_contexts
			;;
	esac
}

_docker_context_list() {
	_docker_context_ls
}

_docker_context_ls() {
	case "$prev" in
		--format|-f)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format -f --help --quiet -q" -- "$cur" ) )
			;;
	esac
}

_docker_context_remove() {
	_docker_context_rm
}

_docker_context_rm() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--force -f --help" -- "$cur" ) )
			;;
		*)
			__docker_complete_contexts
			;;
	esac
}

_docker_context_update() {
	case "$prev" in
		--default-stack-orchestrator)
			COMPREPLY=( $( compgen -W "all kubernetes swarm" -- "$cur" ) )
			return
			;;
		--description|--docker|--kubernetes)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--default-stack-orchestrator --description --docker --help --kubernetes" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_contexts
			fi
			;;
	esac
}

_docker_context_use() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_contexts --add default
			fi
			;;
	esac
}


_docker_commit() {
	_docker_container_commit
}

_docker_cp() {
	_docker_container_cp
}

_docker_create() {
	_docker_container_create
}

_docker_daemon() {
	local boolean_options="
		$global_boolean_options
		--experimental
		--help
		--icc=false
		--init
		--ip-forward=false
		--ip-masq=false
		--iptables=false
		--ip6tables
		--ipv6
		--live-restore
		--no-new-privileges
		--raw-logs
		--selinux-enabled
		--userland-proxy=false
		--validate
		--version -v
	"
	local options_with_args="
		$global_options_with_args
		--add-runtime
		--allow-nondistributable-artifacts
		--api-cors-header
		--authorization-plugin
		--bip
		--bridge -b
		--cgroup-parent
		--cluster-advertise
		--cluster-store
		--cluster-store-opt
		--config-file
		--containerd
		--containerd-namespace
		--containerd-plugins-namespace
		--cpu-rt-period
		--cpu-rt-runtime
		--data-root
		--default-address-pool
		--default-gateway
		--default-gateway-v6
		--default-runtime
		--default-shm-size
		--default-ulimit
		--dns
		--dns-search
		--dns-opt
		--exec-opt
		--exec-root
		--fixed-cidr
		--fixed-cidr-v6
		--group -G
		--init-path
		--insecure-registry
		--ip
		--label
		--log-driver
		--log-opt
		--max-concurrent-downloads
		--max-concurrent-uploads
		--max-download-attempts
		--metrics-addr
		--mtu
		--network-control-plane-mtu
		--node-generic-resource
		--oom-score-adjust
		--pidfile -p
		--registry-mirror
		--seccomp-profile
		--shutdown-timeout
		--storage-driver -s
		--storage-opt
		--swarm-default-advertise-addr
		--userland-proxy-path
		--userns-remap
	"

	__docker_complete_log_driver_options && return

 	key=$(__docker_map_key_of_current_option '--cluster-store-opt')
 	case "$key" in
 		kv.*file)
			cur=${cur##*=}
 			_filedir
 			return
 			;;
 	esac

 	local key=$(__docker_map_key_of_current_option '--storage-opt')
 	case "$key" in
 		dm.blkdiscard|dm.override_udev_sync_check|dm.use_deferred_removal|dm.use_deferred_deletion)
 			COMPREPLY=( $( compgen -W "false true" -- "${cur##*=}" ) )
 			return
 			;;
		dm.directlvm_device|dm.thinpooldev)
			cur=${cur##*=}
			_filedir
			return
			;;
		dm.fs)
			COMPREPLY=( $( compgen -W "ext4 xfs" -- "${cur##*=}" ) )
			return
			;;
		dm.libdm_log_level)
			COMPREPLY=( $( compgen -W "2 3 4 5 6 7" -- "${cur##*=}" ) )
			return
			;;
 	esac

	case "$prev" in
		--authorization-plugin)
			__docker_complete_plugins_bundled --type Authorization
			return
			;;
		--cluster-store)
			COMPREPLY=( $( compgen -W "consul etcd zk" -S "://" -- "$cur" ) )
			__docker_nospace
			return
			;;
		--cluster-store-opt)
			COMPREPLY=( $( compgen -W "discovery.heartbeat discovery.ttl kv.cacertfile kv.certfile kv.keyfile kv.path" -S = -- "$cur" ) )
			__docker_nospace
			return
			;;
		--config-file|--containerd|--init-path|--pidfile|-p|--tlscacert|--tlscert|--tlskey|--userland-proxy-path)
			_filedir
			return
			;;
		--default-ulimit)
			__docker_complete_ulimits
			return
			;;
		--exec-root|--data-root)
			_filedir -d
			return
			;;
		--log-driver)
			__docker_complete_log_drivers
			return
			;;
		--storage-driver|-s)
			COMPREPLY=( $( compgen -W "aufs btrfs overlay2 vfs zfs" -- "$(echo "$cur" | tr '[:upper:]' '[:lower:]')" ) )
			return
			;;
		--storage-opt)
			local btrfs_options="btrfs.min_space"
			local overlay2_options="overlay2.size"
			local zfs_options="zfs.fsname"

			local all_options="$btrfs_options $overlay2_options $zfs_options"

			case $(__docker_value_of_option '--storage-driver|-s') in
				'')
					COMPREPLY=( $( compgen -W "$all_options" -S = -- "$cur" ) )
					;;
				btrfs)
					COMPREPLY=( $( compgen -W "$btrfs_options" -S = -- "$cur" ) )
					;;
				overlay2)
					COMPREPLY=( $( compgen -W "$overlay2_options" -S = -- "$cur" ) )
					;;
				zfs)
					COMPREPLY=( $( compgen -W "$zfs_options" -S = -- "$cur" ) )
					;;
				*)
					return
					;;
			esac
			__docker_nospace
			return
			;;
		--log-level|-l)
			__docker_complete_log_levels
			return
			;;
		--log-opt)
			__docker_complete_log_options
			return
			;;
		--metrics-addr)
			__docker_complete_local_ips
			__docker_append_to_completions ":"
			__docker_nospace
			return
			;;
		--seccomp-profile)
			_filedir json
			return
			;;
		--swarm-default-advertise-addr)
			__docker_complete_local_interfaces
			return
			;;
		--userns-remap)
			__docker_complete_user_group
			return
			;;
		$(__docker_to_extglob "$options_with_args") )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$boolean_options $options_with_args" -- "$cur" ) )
			;;
	esac
}

_docker_diff() {
	_docker_container_diff
}


_docker_events() {
	_docker_system_events
}

_docker_exec() {
	_docker_container_exec
}

_docker_export() {
	_docker_container_export
}

_docker_help() {
	local counter=$(__docker_pos_first_nonflag)
	if [ "$cword" -eq "$counter" ]; then
		COMPREPLY=( $( compgen -W "${commands[*]}" -- "$cur" ) )
	fi
}

_docker_history() {
	_docker_image_history
}


_docker_image() {
	local subcommands="
		build
		history
		import
		inspect
		load
		ls
		prune
		pull
		push
		rm
		save
		tag
	"
	local aliases="
		images
		list
		remove
		rmi
	"
	__docker_subcommands "$subcommands $aliases" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_image_build() {
	local options_with_args="
		--add-host
		--build-arg
		--cache-from
		--cgroup-parent
		--cpuset-cpus
		--cpuset-mems
		--cpu-shares -c
		--cpu-period
		--cpu-quota
		--file -f
		--iidfile
		--label
		--memory -m
		--memory-swap
		--network
		--shm-size
		--tag -t
		--target
		--ulimit
	"
	__docker_server_os_is windows && options_with_args+="
		--isolation
	"

	local boolean_options="
		--disable-content-trust=false
		--force-rm
		--help
		--no-cache
		--pull
		--quiet -q
		--rm
	"

	if __docker_server_is_experimental ; then
		options_with_args+="
			--platform
		"
		boolean_options+="
			--squash
		"
	fi

	if [ "$DOCKER_BUILDKIT" = "1" ] ; then
		options_with_args+="
			--output -o
			--platform
			--progress
			--secret
			--ssh
		"
	else
		boolean_options+="
			--compress
		"
	fi

	local all_options="$options_with_args $boolean_options"

	case "$prev" in
		--add-host)
			case "$cur" in
				*:)
					__docker_complete_resolved_hostname
					return
					;;
			esac
			;;
		--build-arg)
			COMPREPLY=( $( compgen -e -- "$cur" ) )
			__docker_nospace
			return
			;;
		--cache-from)
			__docker_complete_images --repo --tag --id
			return
			;;
		--file|-f|--iidfile)
			_filedir
			return
			;;
		--isolation)
			if __docker_server_os_is windows ; then
				__docker_complete_isolation
				return
			fi
			;;
		--network)
			case "$cur" in
				container:*)
					__docker_complete_containers_all --cur "${cur#*:}"
					;;
				*)
					COMPREPLY=( $( compgen -W "$(__docker_plugins_bundled --type Network) $(__docker_networks) container:" -- "$cur") )
					if [ "${COMPREPLY[*]}" = "container:" ] ; then
						__docker_nospace
					fi
					;;
			esac
			return
			;;
		--progress)
			COMPREPLY=( $( compgen -W "auto plain tty" -- "$cur" ) )
			return
			;;
		--tag|-t)
			__docker_complete_images --repo --tag
			return
			;;
		--target)
			local context_pos=$( __docker_pos_first_nonflag "$( __docker_to_alternatives "$options_with_args" )" )
			local context="${words[$context_pos]}"
			context="${context:-.}"

			local file="$( __docker_value_of_option '--file|f' )"
			local default_file="${context%/}/Dockerfile"
			local dockerfile="${file:-$default_file}"

			local targets="$( sed -n 's/^FROM .\+ AS \(.\+\)/\1/p' "$dockerfile" 2>/dev/null )"
			COMPREPLY=( $( compgen -W "$targets" -- "$cur" ) )
			return
			;;
		--ulimit)
			__docker_complete_ulimits
			return
			;;
		$(__docker_to_extglob "$options_with_args") )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$all_options" -- "$cur" ) )
			;;
		*)
			local counter=$( __docker_pos_first_nonflag "$( __docker_to_alternatives "$options_with_args" )" )
			if [ "$cword" -eq "$counter" ]; then
				_filedir -d
			fi
			;;
	esac
}

_docker_image_history() {
	case "$prev" in
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format --help --human=false -H=false --no-trunc --quiet -q" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--format')
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_images --force-tag --id
			fi
			;;
	esac
}

_docker_image_images() {
	_docker_image_ls
}

_docker_image_import() {
	case "$prev" in
		--change|-c|--message|-m|--platform)
			return
			;;
	esac

	case "$cur" in
		-*)
			local options="--change -c --help --message -m"
			__docker_server_is_experimental && options+=" --platform"
			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--change|-c|--message|-m')
			if [ "$cword" -eq "$counter" ]; then
				_filedir
				return
			elif [ "$cword" -eq "$((counter + 1))" ]; then
				__docker_complete_images --repo --tag
				return
			fi
			;;
	esac
}

_docker_image_inspect() {
	_docker_inspect --type image
}

_docker_image_load() {
	case "$prev" in
		--input|-i|"<")
			_filedir
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --input -i --quiet -q" -- "$cur" ) )
			;;
	esac
}

_docker_image_list() {
	_docker_image_ls
}

_docker_image_ls() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		before|since)
			__docker_complete_images --cur "${cur##*=}" --force-tag --id
			return
			;;
		dangling)
			COMPREPLY=( $( compgen -W "false true" -- "${cur##*=}" ) )
			return
			;;
		label)
			return
			;;
		reference)
			__docker_complete_images --cur "${cur##*=}" --repo --tag
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -S = -W "before dangling label reference since" -- "$cur" ) )
			__docker_nospace
			return
			;;
                --format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--all -a --digests --filter -f --format --help --no-trunc --quiet -q" -- "$cur" ) )
			;;
		=)
			return
			;;
		*)
			__docker_complete_images --repo --tag
			;;
	esac
}

_docker_image_prune() {
	case "$prev" in
		--filter)
			COMPREPLY=( $( compgen -W "label label! until" -S = -- "$cur" ) )
			__docker_nospace
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--all -a --force -f --filter --help" -- "$cur" ) )
			;;
	esac
}

_docker_image_pull() {
	case "$prev" in
		--platform)
			return
			;;
	esac

	case "$cur" in
		-*)
			local options="--all-tags -a --disable-content-trust=false --help --quiet -q"
			__docker_server_is_experimental && options+=" --platform"

			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag --platform)
			if [ "$cword" -eq "$counter" ]; then
				for arg in "${COMP_WORDS[@]}"; do
					case "$arg" in
						--all-tags|-a)
							__docker_complete_images --repo
							return
							;;
					esac
				done
				__docker_complete_images --repo --tag
			fi
			;;
	esac
}

_docker_image_push() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--all-tags -a --disable-content-trust=false --help --quiet -q" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_images --repo --tag
			fi
			;;
	esac
}

_docker_image_remove() {
	_docker_image_rm
}

_docker_image_rm() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--force -f --help --no-prune" -- "$cur" ) )
			;;
		*)
			__docker_complete_images --force-tag --id
			;;
	esac
}

_docker_image_rmi() {
	_docker_image_rm
}

_docker_image_save() {
	case "$prev" in
		--output|-o|">")
			_filedir
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --output -o" -- "$cur" ) )
			;;
		*)
			__docker_complete_images --repo --tag --id
			;;
	esac
}

_docker_image_tag() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)

			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_images --force-tag --id
				return
			elif [ "$cword" -eq "$((counter + 1))" ]; then
				__docker_complete_images --repo --tag
				return
			fi
			;;
	esac
}


_docker_images() {
	_docker_image_ls
}

_docker_import() {
	_docker_image_import
}

_docker_info() {
	_docker_system_info
}

_docker_inspect() {
	local preselected_type
	local type

	if [ "$1" = "--type" ] ; then
		preselected_type=yes
		type="$2"
	else
		type=$(__docker_value_of_option --type)
	fi

	case "$prev" in
		--format|-f)
			return
			;;
		--type)
			if [ -z "$preselected_type" ] ; then
				COMPREPLY=( $( compgen -W "container image network node plugin secret service volume" -- "$cur" ) )
				return
			fi
			;;
	esac

	case "$cur" in
		-*)
			local options="--format -f --help --size -s"
			if [ -z "$preselected_type" ] ; then
				options+=" --type"
			fi
			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;
		*)
			case "$type" in
				'')
					COMPREPLY=( $( compgen -W "
						$(__docker_containers --all)
						$(__docker_images --force-tag --id)
						$(__docker_networks)
						$(__docker_nodes)
						$(__docker_plugins_installed)
						$(__docker_secrets)
						$(__docker_services)
						$(__docker_volumes)
					" -- "$cur" ) )
					__ltrim_colon_completions "$cur"
					;;
				container)
					__docker_complete_containers_all
					;;
				image)
					__docker_complete_images --force-tag --id
					;;
				network)
					__docker_complete_networks
					;;
				node)
					__docker_complete_nodes
					;;
				plugin)
					__docker_complete_plugins_installed
					;;
				secret)
					__docker_complete_secrets
					;;
				service)
					__docker_complete_services
					;;
				volume)
					__docker_complete_volumes
					;;
			esac
	esac
}

_docker_kill() {
	_docker_container_kill
}

_docker_load() {
	_docker_image_load
}

_docker_login() {
	case "$prev" in
		--password|-p|--username|-u)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --password -p --password-stdin --username -u" -- "$cur" ) )
			;;
	esac
}

_docker_logout() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
	esac
}

_docker_logs() {
	_docker_container_logs
}

_docker_network_connect() {
	local options_with_args="
		--alias
		--ip
		--ip6
		--link
		--link-local-ip
	"

	local boolean_options="
		--help
	"

	case "$prev" in
		--link)
			case "$cur" in
				*:*)
					;;
				*)
					__docker_complete_containers_running
					COMPREPLY=( $( compgen -W "${COMPREPLY[*]}" -S ':' ) )
					__docker_nospace
					;;
			esac
			return
			;;
		$(__docker_to_extglob "$options_with_args") )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$boolean_options $options_with_args" -- "$cur" ) )
			;;
		*)
			local counter=$( __docker_pos_first_nonflag "$( __docker_to_alternatives "$options_with_args" )" )
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_networks
			elif [ "$cword" -eq "$((counter + 1))" ]; then
				__docker_complete_containers_all
			fi
			;;
	esac
}

_docker_network_create() {
	case "$prev" in
		--aux-address|--gateway|--ip-range|--ipam-opt|--ipv6|--opt|-o|--subnet)
			return
			;;
		--config-from)
			__docker_complete_networks
			return
			;;
		--driver|-d)
			# remove drivers that allow one instance only, add drivers missing in `docker info`
			__docker_complete_plugins_bundled --type Network --remove host --remove null --add macvlan
			return
			;;
		--ipam-driver)
			COMPREPLY=( $( compgen -W "default" -- "$cur" ) )
			return
			;;
		--label)
			return
			;;
		--scope)
			COMPREPLY=( $( compgen -W "local swarm" -- "$cur" ) )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--attachable --aux-address --config-from --config-only --driver -d --gateway --help --ingress --internal --ip-range --ipam-driver --ipam-opt --ipv6 --label --opt -o --scope --subnet" -- "$cur" ) )
			;;
	esac
}

_docker_network_disconnect() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_networks
			elif [ "$cword" -eq "$((counter + 1))" ]; then
				__docker_complete_containers_in_network "$prev"
			fi
			;;
	esac
}

_docker_network_inspect() {
	case "$prev" in
		--format|-f)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format -f --help --verbose" -- "$cur" ) )
			;;
		*)
			__docker_complete_networks
	esac
}

_docker_network_ls() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		dangling)
			COMPREPLY=( $( compgen -W "false true" -- "${cur##*=}" ) )
			return
			;;
		driver)
			__docker_complete_plugins_bundled --cur "${cur##*=}" --type Network --add macvlan
			return
			;;
		id)
			__docker_complete_networks --cur "${cur##*=}" --id
			return
			;;
		name)
			__docker_complete_networks --cur "${cur##*=}" --name
			return
			;;
		scope)
			COMPREPLY=( $( compgen -W "global local swarm" -- "${cur##*=}" ) )
			return
			;;
		type)
			COMPREPLY=( $( compgen -W "builtin custom" -- "${cur##*=}" ) )
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -S = -W "dangling driver id label name scope type" -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--filter -f --format --help --no-trunc --quiet -q" -- "$cur" ) )
			;;
	esac
}

_docker_network_prune() {
	case "$prev" in
		--filter)
			COMPREPLY=( $( compgen -W "label label! until" -S = -- "$cur" ) )
			__docker_nospace
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--force -f --filter --help" -- "$cur" ) )
			;;
	esac
}

_docker_network_rm() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_complete_networks --filter type=custom
	esac
}

_docker_network() {
	local subcommands="
		connect
		create
		disconnect
		inspect
		ls
		prune
		rm
	"
	local aliases="
		list
		remove
	"
	__docker_subcommands "$subcommands $aliases" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_service() {
	local subcommands="
		create
		inspect
		logs
		ls
		rm
		rollback
		scale
		ps
		update
	"

	local aliases="
		list
		remove
	"
	__docker_subcommands "$subcommands $aliases" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_service_create() {
	_docker_service_update_and_create
}

_docker_service_inspect() {
	case "$prev" in
		--format|-f)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format -f --help --pretty" -- "$cur" ) )
			;;
		*)
			__docker_complete_services
	esac
}

_docker_service_logs() {
	case "$prev" in
		--since|--tail|-n)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--details --follow -f --help --no-resolve --no-task-ids --no-trunc --raw --since --tail -n --timestamps -t" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--since|--tail|-n')
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_services_and_tasks
			fi
			;;
	esac
}

_docker_service_list() {
	_docker_service_ls
}

_docker_service_ls() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		id)
			__docker_complete_services --cur "${cur##*=}" --id
			return
			;;
		mode)
			COMPREPLY=( $( compgen -W "global global-job replicated replicated-job" -- "${cur##*=}" ) )
			return
			;;
		name)
			__docker_complete_services --cur "${cur##*=}" --name
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -W "id label mode name" -S = -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--filter -f --format --help --quiet -q" -- "$cur" ) )
			;;
	esac
}

_docker_service_remove() {
	_docker_service_rm
}

_docker_service_rm() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_complete_services
	esac
}

_docker_service_rollback() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--detach -d --help --quit -q" -- "$cur" ) )
			;;
		*)
			local counter=$( __docker_pos_first_nonflag )
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_services
			fi
			;;
	esac
}

_docker_service_scale() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--detach -d --help" -- "$cur" ) )
			;;
		*)
			__docker_complete_services
			__docker_append_to_completions "="
			__docker_nospace
			;;
	esac
}

_docker_service_ps() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		desired-state)
			COMPREPLY=( $( compgen -W "accepted running shutdown" -- "${cur##*=}" ) )
			return
			;;
		name)
			__docker_complete_services --cur "${cur##*=}" --name
			return
			;;
		node)
			__docker_complete_nodes --cur "${cur##*=}" --add self
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -W "desired-state id name node" -S = -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--filter -f --format --help --no-resolve --no-trunc --quiet -q" -- "$cur" ) )
			;;
		*)
			__docker_complete_services
			;;
	esac
}

_docker_service_update() {
	_docker_service_update_and_create
}

# _docker_service_update_and_create is the combined completion for `docker service create`
# and `docker service update`
_docker_service_update_and_create() {
	local options_with_args="
		--cap-add
		--cap-drop
		--endpoint-mode
		--entrypoint
		--health-cmd
		--health-interval
		--health-retries
		--health-start-period
		--health-timeout
		--hostname
		--isolation
		--limit-cpu
		--limit-memory
		--limit-pids
		--log-driver
		--log-opt
		--max-replicas
		--replicas
		--replicas-max-per-node
		--reserve-cpu
		--reserve-memory
		--restart-condition
		--restart-delay
		--restart-max-attempts
		--restart-window
		--rollback-delay
		--rollback-failure-action
		--rollback-max-failure-ratio
		--rollback-monitor
		--rollback-order
		--rollback-parallelism
		--stop-grace-period
		--stop-signal
		--update-delay
		--update-failure-action
		--update-max-failure-ratio
		--update-monitor
		--update-order
		--update-parallelism
		--user -u
		--workdir -w
	"
	__docker_server_os_is windows && options_with_args+="
		--credential-spec
	"

	local boolean_options="
		--detach -d
		--help
		--init
		--no-healthcheck
		--no-resolve-image
		--read-only
		--tty -t
		--with-registry-auth
	"

	__docker_complete_log_driver_options && return

	if [ "$subcommand" = "create" ] ; then
		options_with_args="$options_with_args
			--config
			--constraint
			--container-label
			--dns
			--dns-option
			--dns-search
			--env -e
			--env-file
			--generic-resource
			--group
			--host
			--label -l
			--mode
			--mount
			--name
			--network
			--placement-pref
			--publish -p
			--secret
			--sysctl
			--ulimit
		"

		case "$prev" in
			--env-file)
				_filedir
				return
				;;
			--mode)
				COMPREPLY=( $( compgen -W "global global-job replicated replicated-job" -- "$cur" ) )
				return
				;;
		esac
	fi
	if [ "$subcommand" = "update" ] ; then
		options_with_args="$options_with_args
			--args
			--config-add
			--config-rm
			--constraint-add
			--constraint-rm
			--container-label-add
			--container-label-rm
			--dns-add
			--dns-option-add
			--dns-option-rm
			--dns-rm
			--dns-search-add
			--dns-search-rm
			--env-add
			--env-rm
			--generic-resource-add
			--generic-resource-rm
			--group-add
			--group-rm
			--host-add
			--host-rm
			--image
			--label-add
			--label-rm
			--mount-add
			--mount-rm
			--network-add
			--network-rm
			--placement-pref-add
			--placement-pref-rm
			--publish-add
			--publish-rm
			--rollback
			--secret-add
			--secret-rm
			--sysctl-add
			--sysctl-rm
			--ulimit-add
			--ulimit-rm
		"

		boolean_options="$boolean_options
			--force
		"

		case "$prev" in
			--env-rm)
				COMPREPLY=( $( compgen -e -- "$cur" ) )
				return
				;;
			--image)
				__docker_complete_images --repo --tag --id
				return
				;;
		esac
	fi

	local strategy=$(__docker_map_key_of_current_option '--placement-pref|--placement-pref-add|--placement-pref-rm')
	case "$strategy" in
		spread)
			COMPREPLY=( $( compgen -W "engine.labels node.labels" -S . -- "${cur##*=}" ) )
			__docker_nospace
			return
			;;
	esac

	case "$prev" in
		--cap-add)
			__docker_complete_capabilities_addable
			return
			;;
		--cap-drop)
			__docker_complete_capabilities_droppable
			return
			;;
		--config|--config-add|--config-rm)
			__docker_complete_configs
			return
			;;
		--endpoint-mode)
			COMPREPLY=( $( compgen -W "dnsrr vip" -- "$cur" ) )
			return
			;;
		--env|-e|--env-add)
			# we do not append a "=" here because "-e VARNAME" is legal systax, too
			COMPREPLY=( $( compgen -e -- "$cur" ) )
			__docker_nospace
			return
			;;
		--group|--group-add|--group-rm)
			COMPREPLY=( $(compgen -g -- "$cur") )
			return
			;;
		--host|--host-add|--host-rm)
			case "$cur" in
				*:)
					__docker_complete_resolved_hostname
					return
					;;
			esac
			;;
		--isolation)
			__docker_complete_isolation
			return
			;;
		--log-driver)
			__docker_complete_log_drivers
			return
			;;
		--log-opt)
			__docker_complete_log_options
			return
			;;
		--network|--network-add|--network-rm)
			__docker_complete_networks
			return
			;;
		--placement-pref|--placement-pref-add|--placement-pref-rm)
			COMPREPLY=( $( compgen -W "spread" -S = -- "$cur" ) )
			__docker_nospace
			return
			;;
		--restart-condition)
			COMPREPLY=( $( compgen -W "any none on-failure" -- "$cur" ) )
			return
			;;
		--rollback-failure-action)
			COMPREPLY=( $( compgen -W "continue pause" -- "$cur" ) )
			return
			;;
		--secret|--secret-add|--secret-rm)
			__docker_complete_secrets
			return
			;;
		--stop-signal)
			__docker_complete_signals
			return
			;;
		--update-failure-action)
			COMPREPLY=( $( compgen -W "continue pause rollback" -- "$cur" ) )
			return
			;;
		--ulimit|--ulimit-add)
			__docker_complete_ulimits
			return
			;;
		--ulimit-rm)
			__docker_complete_ulimits --rm
			return
			;;
		--update-order|--rollback-order)
			COMPREPLY=( $( compgen -W "start-first stop-first" -- "$cur" ) )
			return
			;;
		--user|-u)
			__docker_complete_user_group
			return
			;;
		$(__docker_to_extglob "$options_with_args") )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$boolean_options $options_with_args" -- "$cur" ) )
			;;
		*)
			local counter=$( __docker_pos_first_nonflag "$( __docker_to_alternatives "$options_with_args" )" )
			if [ "$subcommand" = "update" ] ; then
				if [ "$cword" -eq "$counter" ]; then
					__docker_complete_services
				fi
			else
				if [ "$cword" -eq "$counter" ]; then
					__docker_complete_images --repo --tag --id
				fi
			fi
			;;
	esac
}

_docker_swarm() {
	local subcommands="
		ca
		init
		join
		join-token
		leave
		unlock
		unlock-key
		update
	"
	__docker_subcommands "$subcommands" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_swarm_ca() {
	case "$prev" in
		--ca-cert|--ca-key)
			_filedir
			return
			;;
		--cert-expiry|--external-ca)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--ca-cert --ca-key --cert-expiry --detach -d --external-ca --help --quiet -q --rotate" -- "$cur" ) )
			;;
	esac
}

_docker_swarm_init() {
	case "$prev" in
		--advertise-addr)
			if [[ $cur == *: ]] ; then
				COMPREPLY=( $( compgen -W "2377" -- "${cur##*:}" ) )
			else
				__docker_complete_local_interfaces
				__docker_nospace
			fi
			return
			;;
		--availability)
			COMPREPLY=( $( compgen -W "active drain pause" -- "$cur" ) )
			return
			;;
		--cert-expiry|--data-path-port|--default-addr-pool|--default-addr-pool-mask-length|--dispatcher-heartbeat|--external-ca|--max-snapshots|--snapshot-interval|--task-history-limit )
			return
			;;
		--data-path-addr)
			__docker_complete_local_interfaces
			return
			;;
		--listen-addr)
			if [[ $cur == *: ]] ; then
				COMPREPLY=( $( compgen -W "2377" -- "${cur##*:}" ) )
			else
				__docker_complete_local_interfaces --add 0.0.0.0
				__docker_nospace
			fi
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--advertise-addr --autolock --availability --cert-expiry --data-path-addr --data-path-port --default-addr-pool --default-addr-pool-mask-length --dispatcher-heartbeat --external-ca --force-new-cluster --help --listen-addr --max-snapshots --snapshot-interval --task-history-limit " -- "$cur" ) )
			;;
	esac
}

_docker_swarm_join() {
	case "$prev" in
		--advertise-addr)
			if [[ $cur == *: ]] ; then
				COMPREPLY=( $( compgen -W "2377" -- "${cur##*:}" ) )
			else
				__docker_complete_local_interfaces
				__docker_nospace
			fi
			return
			;;
		--availability)
			COMPREPLY=( $( compgen -W "active drain pause" -- "$cur" ) )
			return
			;;
		--data-path-addr)
			__docker_complete_local_interfaces
			return
			;;
		--listen-addr)
			if [[ $cur == *: ]] ; then
				COMPREPLY=( $( compgen -W "2377" -- "${cur##*:}" ) )
			else
				__docker_complete_local_interfaces --add 0.0.0.0
				__docker_nospace
			fi
			return
			;;
		--token)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--advertise-addr --availability --data-path-addr --help --listen-addr --token" -- "$cur" ) )
			;;
		*:)
			COMPREPLY=( $( compgen -W "2377" -- "${cur##*:}" ) )
			;;
	esac
}

_docker_swarm_join_token() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --quiet -q --rotate" -- "$cur" ) )
			;;
		*)
			local counter=$( __docker_pos_first_nonflag )
			if [ "$cword" -eq "$counter" ]; then
				COMPREPLY=( $( compgen -W "manager worker" -- "$cur" ) )
			fi
			;;
	esac
}

_docker_swarm_leave() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--force -f --help" -- "$cur" ) )
			;;
	esac
}

_docker_swarm_unlock() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
	esac
}

_docker_swarm_unlock_key() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --quiet -q --rotate" -- "$cur" ) )
			;;
	esac
}

_docker_swarm_update() {
	case "$prev" in
		--cert-expiry|--dispatcher-heartbeat|--external-ca|--max-snapshots|--snapshot-interval|--task-history-limit)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--autolock --cert-expiry --dispatcher-heartbeat --external-ca --help --max-snapshots --snapshot-interval --task-history-limit" -- "$cur" ) )
			;;
	esac
}

_docker_manifest() {
	local subcommands="
		annotate
		create
		inspect
		push
		rm
	"
	__docker_subcommands "$subcommands" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_manifest_annotate() {
	case "$prev" in
		--arch)
			COMPREPLY=( $( compgen -W "
				386
				amd64
				arm
				arm64
				mips64
				mips64le
				ppc64le
				riscv64
				s390x" -- "$cur" ) )
			return
			;;
		--os)
			COMPREPLY=( $( compgen -W "
				darwin
				dragonfly
				freebsd
				linux
				netbsd
				openbsd
				plan9
				solaris
				windows" -- "$cur" ) )
			return
			;;
		--os-features|--variant)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--arch --help --os --os-features --variant" -- "$cur" ) )
			;;
		*)
			local counter=$( __docker_pos_first_nonflag "--arch|--os|--os-features|--variant" )
			if [ "$cword" -eq "$counter" ] || [ "$cword" -eq "$((counter + 1))" ]; then
				__docker_complete_images --force-tag --id
			fi
			;;
	esac
}

_docker_manifest_create() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--amend -a --help --insecure" -- "$cur" ) )
			;;
		*)
			__docker_complete_images --force-tag --id
			;;
	esac
}

_docker_manifest_inspect() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --insecure --verbose -v" -- "$cur" ) )
			;;
		*)
			local counter=$( __docker_pos_first_nonflag )
			if [ "$cword" -eq "$counter" ] || [ "$cword" -eq "$((counter + 1))" ]; then
				__docker_complete_images --force-tag --id
			fi
			;;
	esac
}

_docker_manifest_push() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --insecure --purge -p" -- "$cur" ) )
			;;
		*)
			local counter=$( __docker_pos_first_nonflag )
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_images --force-tag --id
			fi
			;;
	esac
}

_docker_manifest_rm() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_complete_images --force-tag --id
			;;
	esac
}

_docker_node() {
	local subcommands="
		demote
		inspect
		ls
		promote
		rm
		ps
		update
	"
	local aliases="
		list
		remove
	"
	__docker_subcommands "$subcommands $aliases" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_node_demote() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_complete_nodes --filter role=manager
	esac
}

_docker_node_inspect() {
	case "$prev" in
		--format|-f)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format -f --help --pretty" -- "$cur" ) )
			;;
		*)
			__docker_complete_nodes --add self
	esac
}

_docker_node_list() {
	_docker_node_ls
}

_docker_node_ls() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		id)
			__docker_complete_nodes --cur "${cur##*=}" --id
			return
			;;
		label|node.label)
			return
			;;
		membership)
			COMPREPLY=( $( compgen -W "accepted pending" -- "${cur##*=}" ) )
			return
			;;
		name)
			__docker_complete_nodes --cur "${cur##*=}" --name
			return
			;;
		role)
			COMPREPLY=( $( compgen -W "manager worker" -- "${cur##*=}" ) )
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -W "id label membership name node.label role" -S = -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--filter -f --format --help --quiet -q" -- "$cur" ) )
			;;
	esac
}

_docker_node_promote() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_complete_nodes --filter role=worker
	esac
}

_docker_node_remove() {
	_docker_node_rm
}

_docker_node_rm() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--force -f --help" -- "$cur" ) )
			;;
		*)
			__docker_complete_nodes
	esac
}

_docker_node_ps() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		desired-state)
			COMPREPLY=( $( compgen -W "accepted running shutdown" -- "${cur##*=}" ) )
			return
			;;
		name)
			__docker_complete_services --cur "${cur##*=}" --name
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -W "desired-state id label name" -S = -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--filter -f --format --help --no-resolve --no-trunc --quiet -q" -- "$cur" ) )
			;;
		*)
			__docker_complete_nodes --add self
			;;
	esac
}

_docker_node_update() {
	case "$prev" in
		--availability)
			COMPREPLY=( $( compgen -W "active drain pause" -- "$cur" ) )
			return
			;;
		--role)
			COMPREPLY=( $( compgen -W "manager worker" -- "$cur" ) )
			return
			;;
		--label-add|--label-rm)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--availability --help --label-add --label-rm --role" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--availability|--label-add|--label-rm|--role')
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_nodes
			fi
			;;
	esac
}

_docker_pause() {
	_docker_container_pause
}

_docker_plugin() {
	local subcommands="
		create
		disable
		enable
		inspect
		install
		ls
		push
		rm
		set
		upgrade
	"
	local aliases="
		list
		remove
	"
	__docker_subcommands "$subcommands $aliases" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_plugin_create() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--compress --help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				# reponame
				return
			elif [ "$cword" -eq  "$((counter + 1))" ]; then
				_filedir -d
			fi
			;;
	esac
}

_docker_plugin_disable() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--force -f --help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_plugins_installed --filter enabled=true
			fi
			;;
	esac
}

_docker_plugin_enable() {
	case "$prev" in
		--timeout)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --timeout" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--timeout')
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_plugins_installed --filter enabled=false
			fi
			;;
	esac
}

_docker_plugin_inspect() {
	case "$prev" in
		--format|f)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format -f --help" -- "$cur" ) )
			;;
		*)
			__docker_complete_plugins_installed
			;;
	esac
}

_docker_plugin_install() {
	case "$prev" in
		--alias)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--alias --disable --disable-content-trust=false --grant-all-permissions --help" -- "$cur" ) )
			;;
	esac
}

_docker_plugin_list() {
	_docker_plugin_ls
}

_docker_plugin_ls() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		capability)
			COMPREPLY=( $( compgen -W "authz ipamdriver logdriver metricscollector networkdriver volumedriver" -- "${cur##*=}" ) )
			return
			;;
		enabled)
			COMPREPLY=( $( compgen -W "false true" -- "${cur##*=}" ) )
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -S = -W "capability enabled" -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--filter -f --format --help --no-trunc --quiet -q" -- "$cur" ) )
			;;
	esac
}

_docker_plugin_push() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_plugins_installed
			fi
			;;
	esac
}

_docker_plugin_remove() {
	_docker_plugin_rm
}

_docker_plugin_rm() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--force -f --help" -- "$cur" ) )
			;;
		*)
			__docker_complete_plugins_installed
			;;
	esac
}

_docker_plugin_set() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_plugins_installed
			fi
			;;
	esac
}

_docker_plugin_upgrade() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--disable-content-trust --grant-all-permissions --help --skip-remote-check" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_plugins_installed
				__ltrim_colon_completions "$cur"
			elif [ "$cword" -eq  "$((counter + 1))" ]; then
				local plugin_images="$(__docker_plugins_installed)"
				COMPREPLY=( $(compgen -S : -W "${plugin_images%:*}" -- "$cur") )
				__docker_nospace
			fi
			;;
	esac
}


_docker_port() {
	_docker_container_port
}

_docker_ps() {
	_docker_container_ls
}

_docker_pull() {
	_docker_image_pull
}

_docker_push() {
	_docker_image_push
}

_docker_rename() {
	_docker_container_rename
}

_docker_restart() {
	_docker_container_restart
}

_docker_rm() {
	_docker_container_rm
}

_docker_rmi() {
	_docker_image_rm
}

_docker_run() {
	_docker_container_run
}

_docker_save() {
	_docker_image_save
}


_docker_secret() {
	local subcommands="
		create
		inspect
		ls
		rm
	"
	local aliases="
		list
		remove
	"
	__docker_subcommands "$subcommands $aliases" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_secret_create() {
	case "$prev" in
		--driver|-d|--label|-l)
			return
			;;
		--template-driver)
			COMPREPLY=( $( compgen -W "golang" -- "$cur" ) )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--driver -d --help --label -l --template-driver" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--driver|-d|--label|-l|--template-driver')
			if [ "$cword" -eq "$((counter + 1))" ]; then
				_filedir
			fi
			;;
	esac
}

_docker_secret_inspect() {
	case "$prev" in
		--format|-f)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format -f --help --pretty" -- "$cur" ) )
			;;
		*)
			__docker_complete_secrets
			;;
	esac
}

_docker_secret_list() {
	_docker_secret_ls
}

_docker_secret_ls() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		id)
			__docker_complete_secrets --cur "${cur##*=}" --id
			return
			;;
		name)
			__docker_complete_secrets --cur "${cur##*=}" --name
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -S = -W "id label name" -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format --filter -f --help --quiet -q" -- "$cur" ) )
			;;
	esac
}

_docker_secret_remove() {
	_docker_secret_rm
}

_docker_secret_rm() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_complete_secrets
			;;
	esac
}



_docker_search() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		is-automated)
			COMPREPLY=( $( compgen -W "false true" -- "${cur##*=}" ) )
			return
			;;
		is-official)
			COMPREPLY=( $( compgen -W "false true" -- "${cur##*=}" ) )
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -S = -W "is-automated is-official stars" -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format|--limit)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--filter -f --format --help --limit --no-trunc" -- "$cur" ) )
			;;
	esac
}


_docker_stack() {
	local subcommands="
		deploy
		ls
		ps
		rm
		services
	"
	local aliases="
		down
		list
		remove
		up
	"

	__docker_complete_stack_orchestrator_options && return
	__docker_subcommands "$subcommands $aliases" && return

	case "$cur" in
		-*)
			local options="--help --orchestrator"
			__docker_stack_orchestrator_is kubernetes && options+=" --kubeconfig"
			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_stack_deploy() {
	__docker_complete_stack_orchestrator_options && return

	case "$prev" in
		--compose-file|-c)
			_filedir yml
			return
			;;
		--resolve-image)
			COMPREPLY=( $( compgen -W "always changed never" -- "$cur" ) )
			return
			;;
	esac

	case "$cur" in
		-*)
			local options="--compose-file -c --help --orchestrator"
			__docker_stack_orchestrator_is kubernetes && options+=" --kubeconfig --namespace"
			__docker_stack_orchestrator_is swarm && options+=" --prune --resolve-image --with-registry-auth"
			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--compose-file|-c|--kubeconfig|--namespace|--orchestrator|--resolve-image')
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_stacks
			fi
			;;
	esac
}

_docker_stack_down() {
	_docker_stack_rm
}

_docker_stack_list() {
	_docker_stack_ls
}

_docker_stack_ls() {
	__docker_complete_stack_orchestrator_options && return

	case "$prev" in
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			local options="--format --help --orchestrator"
			__docker_stack_orchestrator_is kubernetes && options+=" --all-namespaces --kubeconfig --namespace"
			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;
	esac
}

_docker_stack_ps() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		desired-state)
			COMPREPLY=( $( compgen -W "accepted running shutdown" -- "${cur##*=}" ) )
			return
			;;
		id)
			__docker_complete_stacks --cur "${cur##*=}" --id
			return
			;;
		name)
			__docker_complete_stacks --cur "${cur##*=}" --name
			return
			;;
	esac

	__docker_complete_stack_orchestrator_options && return

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -S = -W "id name desired-state" -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			local options="--filter -f --format --help --no-resolve --no-trunc --orchestrator --quiet -q"
			__docker_stack_orchestrator_is kubernetes && options+=" --all-namespaces --kubeconfig --namespace"
			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--all-namespaces|--filter|-f|--format|--kubeconfig|--namespace')
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_stacks
			fi
			;;
	esac
}

_docker_stack_remove() {
	_docker_stack_rm
}

_docker_stack_rm() {
	__docker_complete_stack_orchestrator_options && return

	case "$cur" in
		-*)
			local options="--help --orchestrator"
			__docker_stack_orchestrator_is kubernetes && options+=" --kubeconfig --namespace"
			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;
		*)
			__docker_complete_stacks
			;;
	esac
}

_docker_stack_services() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		id)
			__docker_complete_services --cur "${cur##*=}" --id
			return
			;;
		label)
			return
			;;
		name)
			__docker_complete_services --cur "${cur##*=}" --name
			return
			;;
	esac

	__docker_complete_stack_orchestrator_options && return

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -S = -W "id label name" -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			local options="--filter -f --format --help --orchestrator --quiet -q"
			__docker_stack_orchestrator_is kubernetes && options+=" --kubeconfig --namespace"
			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag '--filter|-f|--format|--kubeconfig|--namespace|--orchestrator')
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_stacks
			fi
			;;
	esac
}

_docker_stack_up() {
	_docker_stack_deploy
}


_docker_start() {
	_docker_container_start
}

_docker_stats() {
	_docker_container_stats
}

_docker_stop() {
	_docker_container_stop
}


_docker_system() {
	local subcommands="
		df
		events
		info
		prune
	"
	__docker_subcommands "$subcommands" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_system_df() {
	case "$prev" in
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format --help --verbose -v" -- "$cur" ) )
			;;
	esac
}

_docker_system_events() {
	local key=$(__docker_map_key_of_current_option '-f|--filter')
	case "$key" in
		container)
			__docker_complete_containers_all --cur "${cur##*=}"
			return
			;;
		daemon)
			local name=$(__docker_q info | sed -n 's/^\(ID\|Name\): //p')
			COMPREPLY=( $( compgen -W "$name" -- "${cur##*=}" ) )
			return
			;;
		event)
			COMPREPLY=( $( compgen -W "
				attach
				commit
				connect
				copy
				create
				delete
				destroy
				detach
				die
				disable
				disconnect
				enable
				exec_create
				exec_detach
				exec_die
				exec_start
				export
				health_status
				import
				install
				kill
				load
				mount
				oom
				pause
				pull
				push
				reload
				remove
				rename
				resize
				restart
				save
				start
				stop
				tag
				top
				unmount
				unpause
				untag
				update
			" -- "${cur##*=}" ) )
			return
			;;
		image)
			__docker_complete_images --cur "${cur##*=}" --repo --tag
			return
			;;
		network)
			__docker_complete_networks --cur "${cur##*=}"
			return
			;;
		node)
			__docker_complete_nodes --cur "${cur##*=}"
			return
			;;
		scope)
			COMPREPLY=( $( compgen -W "local swarm" -- "${cur##*=}" ) )
			return
			;;
		type)
			COMPREPLY=( $( compgen -W "config container daemon image network node plugin secret service volume" -- "${cur##*=}" ) )
			return
			;;
		volume)
			__docker_complete_volumes --cur "${cur##*=}"
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -S = -W "container daemon event image label network node scope type volume" -- "$cur" ) )
			__docker_nospace
			return
			;;
		--since|--until)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--filter -f --help --since --until --format" -- "$cur" ) )
			;;
	esac
}

_docker_system_info() {
	case "$prev" in
		--format|-f)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format -f --help" -- "$cur" ) )
			;;
	esac
}

_docker_system_prune() {
	case "$prev" in
		--filter)
			COMPREPLY=( $( compgen -W "label label! until" -S = -- "$cur" ) )
			__docker_nospace
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--all -a --force -f --filter --help --volumes" -- "$cur" ) )
			;;
	esac
}


_docker_tag() {
	_docker_image_tag
}


_docker_trust() {
	local subcommands="
		inspect
		revoke
		sign
	"
	__docker_subcommands "$subcommands" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_trust_inspect() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --pretty" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_images --repo --tag
			fi
			;;
	esac
}

_docker_trust_revoke() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --yes -y" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_images --repo --tag
			fi
			;;
	esac
}

_docker_trust_sign() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --local" -- "$cur" ) )
			;;
		*)
			local counter=$(__docker_pos_first_nonflag)
			if [ "$cword" -eq "$counter" ]; then
				__docker_complete_images --force-tag --id
			fi
			;;
	esac
}


_docker_unpause() {
	_docker_container_unpause
}

_docker_update() {
	_docker_container_update
}

_docker_top() {
	_docker_container_top
}

_docker_version() {
	__docker_complete_stack_orchestrator_options && return

	case "$prev" in
		--format|-f)
			return
			;;
	esac

	case "$cur" in
		-*)
			local options="--format -f --help"
			__docker_stack_orchestrator_is kubernetes && options+=" --kubeconfig"
			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;
	esac
}

_docker_volume_create() {
	case "$prev" in
		--driver|-d)
			__docker_complete_plugins_bundled --type Volume
			return
			;;
		--label|--opt|-o)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--driver -d --help --label --opt -o" -- "$cur" ) )
			;;
	esac
}

_docker_volume_inspect() {
	case "$prev" in
		--format|-f)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--format -f --help" -- "$cur" ) )
			;;
		*)
			__docker_complete_volumes
			;;
	esac
}

_docker_volume_list() {
	_docker_volume_ls
}

_docker_volume_ls() {
	local key=$(__docker_map_key_of_current_option '--filter|-f')
	case "$key" in
		dangling)
			COMPREPLY=( $( compgen -W "true false" -- "${cur##*=}" ) )
			return
			;;
		driver)
			__docker_complete_plugins_bundled --cur "${cur##*=}" --type Volume
			return
			;;
		name)
			__docker_complete_volumes --cur "${cur##*=}"
			return
			;;
	esac

	case "$prev" in
		--filter|-f)
			COMPREPLY=( $( compgen -S = -W "dangling driver label name" -- "$cur" ) )
			__docker_nospace
			return
			;;
		--format)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--filter -f --format --help --quiet -q" -- "$cur" ) )
			;;
	esac
}

_docker_volume_prune() {
	case "$prev" in
		--filter)
			COMPREPLY=( $( compgen -W "label label!" -S = -- "$cur" ) )
			__docker_nospace
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--filter --force -f --help" -- "$cur" ) )
			;;
	esac
}

_docker_volume_remove() {
	_docker_volume_rm
}

_docker_volume_rm() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--force -f --help" -- "$cur" ) )
			;;
		*)
			__docker_complete_volumes
			;;
	esac
}

_docker_volume() {
	local subcommands="
		create
		inspect
		ls
		prune
		rm
	"
	local aliases="
		list
		remove
	"
	__docker_subcommands "$subcommands $aliases" && return

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_docker_wait() {
	_docker_container_wait
}

COMPOSE_PLUGIN_PATH=$(docker info --format '{{json .ClientInfo.Plugins}}' | sed -n 's/.*"Path":"\([^"]\+docker-compose\)".*/\1/p')

_docker_compose() {
	local completionCommand="__completeNoDesc"
	local resultArray=($COMPOSE_PLUGIN_PATH $completionCommand compose)
	for value in "${words[@]:2}"; do
		if [ -z "$value" ]; then
			resultArray+=( "''" )
		else
			resultArray+=( "$value" )
		fi
	done
	local result=$(eval "${resultArray[*]}" 2> /dev/null | grep -v '^:[0-9]*$')

	COMPREPLY=( $(compgen -W "${result}" -- "$current") )
}

_docker() {
	local previous_extglob_setting=$(shopt -p extglob)
	shopt -s extglob

	local management_commands=(
		builder
		config
		container
		context
		image
		manifest
		network
		node
		plugin
		secret
		service
		stack
		swarm
		system
		trust
		volume
	)

	local top_level_commands=(
		build
		login
		logout
		run
		search
		version
	)

	local legacy_commands=(
		attach
		commit
		cp
		create
		diff
		events
		exec
		export
		history
		images
		import
		info
		inspect
		kill
		load
		logs
		pause
		port
		ps
		pull
		push
		rename
		restart
		rm
		rmi
		save
		start
		stats
		stop
		tag
		top
		unpause
		update
		wait
	)

	local known_plugin_commands=()

	if [ -f "$COMPOSE_PLUGIN_PATH" ] ; then
		known_plugin_commands+=("compose")
	fi

	local experimental_server_commands=(
		checkpoint
	)

	local commands=(${management_commands[*]} ${top_level_commands[*]} ${known_plugin_commands[*]})
	[ -z "$DOCKER_HIDE_LEGACY_COMMANDS" ] && commands+=(${legacy_commands[*]})

	# These options are valid as global options for all client commands
	# and valid as command options for `docker daemon`
	local global_boolean_options="
		--debug -D
		--tls
		--tlsverify
	"
	local global_options_with_args="
		--config
		--context -c
		--host -H
		--log-level -l
		--tlscacert
		--tlscert
		--tlskey
	"

	# variables to cache server info, populated on demand for performance reasons
	local info_fetched server_experimental server_os
	# variables to cache client info, populated on demand for performance reasons
	local stack_orchestrator_is_kubernetes stack_orchestrator_is_swarm

	local host config context

	COMPREPLY=()
	local cur prev words cword
	_get_comp_words_by_ref -n : cur prev words cword

	local command='docker' command_pos=0 subcommand_pos
	local counter=1
	while [ "$counter" -lt "$cword" ]; do
		case "${words[$counter]}" in
			docker)
				return 0
				;;
			# save host so that completion can use custom daemon
			--host|-H)
				(( counter++ ))
				host="${words[$counter]}"
				;;
			# save config so that completion can use custom configuration directories
			--config)
				(( counter++ ))
				config="${words[$counter]}"
				;;
			# save context so that completion can use custom daemon
			--context|-c)
				(( counter++ ))
				context="${words[$counter]}"
				;;
			$(__docker_to_extglob "$global_options_with_args") )
				(( counter++ ))
				;;
			-*)
				;;
			=)
				(( counter++ ))
				;;
			*)
				command="${words[$counter]}"
				command_pos=$counter
				break
				;;
		esac
		(( counter++ ))
	done

	local binary="${words[0]}"
	if [[ $binary == ?(*/)dockerd ]] ; then
		# for the dockerd binary, we reuse completion of `docker daemon`.
		# dockerd does not have subcommands and global options.
		command=daemon
		command_pos=0
	fi

	local completions_func=_docker_${command//-/_}
	declare -F $completions_func >/dev/null && $completions_func

	eval "$previous_extglob_setting"
	return 0
}

eval "$__docker_previous_extglob_setting"
unset __docker_previous_extglob_setting

complete -F _docker docker docker.exe dockerd dockerd.exe

#
# bash completion for docker-compose
#

__docker_compose_previous_extglob_setting=$(shopt -p extglob)
shopt -s extglob

__docker_compose_q() {
	docker-compose 2>/dev/null "${top_level_options[@]}" "$@"
}

# Transforms a multiline list of strings into a single line string
# with the words separated by "|".
__docker_compose_to_alternatives() {
	local parts=( $1 )
	local IFS='|'
	echo "${parts[*]}"
}

# Transforms a multiline list of options into an extglob pattern
# suitable for use in case statements.
__docker_compose_to_extglob() {
	local extglob=$( __docker_compose_to_alternatives "$1" )
	echo "@($extglob)"
}

# Determines whether the option passed as the first argument exist on
# the commandline. The option may be a pattern, e.g. `--force|-f`.
__docker_compose_has_option() {
	local pattern="$1"
	for (( i=2; i < $cword; ++i)); do
		if [[ ${words[$i]} =~ ^($pattern)$ ]] ; then
			return 0
		fi
	done
	return 1
}

# Returns `key` if we are currently completing the value of a map option (`key=value`)
# which matches the extglob passed in as an argument.
# This function is needed for key-specific completions.
__docker_compose_map_key_of_current_option() {
        local glob="$1"

        local key glob_pos
        if [ "$cur" = "=" ] ; then        # key= case
                key="$prev"
                glob_pos=$((cword - 2))
        elif [[ $cur == *=* ]] ; then     # key=value case (OSX)
                key=${cur%=*}
                glob_pos=$((cword - 1))
        elif [ "$prev" = "=" ] ; then
                key=${words[$cword - 2]}  # key=value case
                glob_pos=$((cword - 3))
        else
                return
        fi

        [ "${words[$glob_pos]}" = "=" ] && ((glob_pos--))  # --option=key=value syntax

        [[ ${words[$glob_pos]} == @($glob) ]] && echo "$key"
}

# suppress trailing whitespace
__docker_compose_nospace() {
	# compopt is not available in ancient bash versions
	type compopt &>/dev/null && compopt -o nospace
}


# Outputs a list of all defined services, regardless of their running state.
# Arguments for `docker-compose ps` may be passed in order to filter the service list,
# e.g. `status=running`.
__docker_compose_services() {
	__docker_compose_q ps --services "$@"
}

# Applies completion of services based on the current value of `$cur`.
# Arguments for `docker-compose ps` may be passed in order to filter the service list,
# see `__docker_compose_services`.
__docker_compose_complete_services() {
	COMPREPLY=( $(compgen -W "$(__docker_compose_services "$@")" -- "$cur") )
}

# The services for which at least one running container exists
__docker_compose_complete_running_services() {
	local names=$(__docker_compose_services --filter status=running)
	COMPREPLY=( $(compgen -W "$names" -- "$cur") )
}


_docker_compose_build() {
	case "$prev" in
		--build-arg)
			COMPREPLY=( $( compgen -e -- "$cur" ) )
			__docker_compose_nospace
			return
			;;
		--memory|-m)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--build-arg --compress --force-rm --help --memory -m --no-cache --no-rm --pull --parallel -q --quiet" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services --filter source=build
			;;
	esac
}


_docker_compose_config() {
	case "$prev" in
		--hash)
			if [[ $cur == \\* ]] ; then
				COMPREPLY=( '\*' )
			else
				COMPREPLY=( $(compgen -W "$(__docker_compose_services) \\\* " -- "$cur") )
			fi
			return
			;;
	esac

	COMPREPLY=( $( compgen -W "--hash --help --no-interpolate --profiles --quiet -q --resolve-image-digests --services --volumes" -- "$cur" ) )
}


_docker_compose_create() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--build --force-recreate --help --no-build --no-recreate" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services
			;;
	esac
}


_docker_compose_docker_compose() {
	case "$prev" in
		--tlscacert|--tlscert|--tlskey)
			_filedir
			return
			;;
		--file|-f)
			_filedir "y?(a)ml"
			return
			;;
		--ansi)
			COMPREPLY=( $( compgen -W "never always auto" -- "$cur" ) )
			return
			;;
		--log-level)
			COMPREPLY=( $( compgen -W "debug info warning error critical" -- "$cur" ) )
			return
			;;
		--profile)
			COMPREPLY=( $( compgen -W "$(__docker_compose_q config --profiles)" -- "$cur" ) )
			return
			;;
		--project-directory)
			_filedir -d
			return
			;;
		--env-file)
			_filedir
			return
			;;
		$(__docker_compose_to_extglob "$daemon_options_with_args") )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$daemon_boolean_options $daemon_options_with_args $top_level_options_with_args --help -h --no-ansi --verbose --version -v" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "${commands[*]}" -- "$cur" ) )
			;;
	esac
}


_docker_compose_down() {
	case "$prev" in
		--rmi)
			COMPREPLY=( $( compgen -W "all local" -- "$cur" ) )
			return
			;;
		--timeout|-t)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --rmi --timeout -t --volumes -v --remove-orphans" -- "$cur" ) )
			;;
	esac
}


_docker_compose_events() {
	case "$prev" in
		--json)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --json" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services
			;;
	esac
}


_docker_compose_exec() {
	case "$prev" in
		--index|--user|-u|--workdir|-w)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "-d --detach --help --index --privileged -T --user -u --workdir -w" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_running_services
			;;
	esac
}


_docker_compose_help() {
	COMPREPLY=( $( compgen -W "${commands[*]}" -- "$cur" ) )
}

_docker_compose_images() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --quiet -q" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services
			;;
	esac
}

_docker_compose_kill() {
	case "$prev" in
		-s)
			COMPREPLY=( $( compgen -W "SIGHUP SIGINT SIGKILL SIGUSR1 SIGUSR2" -- "$(echo $cur | tr '[:lower:]' '[:upper:]')" ) )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help -s" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_running_services
			;;
	esac
}


_docker_compose_logs() {
	case "$prev" in
		--tail)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--follow -f --help --no-color --no-log-prefix --tail --timestamps -t" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services
			;;
	esac
}


_docker_compose_pause() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_running_services
			;;
	esac
}


_docker_compose_port() {
	case "$prev" in
		--protocol)
			COMPREPLY=( $( compgen -W "tcp udp" -- "$cur" ) )
			return;
			;;
		--index)
			return;
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --index --protocol" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services
			;;
	esac
}


_docker_compose_ps() {
	local key=$(__docker_compose_map_key_of_current_option '--filter')
	case "$key" in
		source)
			COMPREPLY=( $( compgen -W "build image" -- "${cur##*=}" ) )
			return
			;;
		status)
			COMPREPLY=( $( compgen -W "paused restarting running stopped" -- "${cur##*=}" ) )
			return
			;;
	esac

	case "$prev" in
		--filter)
			COMPREPLY=( $( compgen -W "source status" -S "=" -- "$cur" ) )
			__docker_compose_nospace
			return;
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--all -a --filter --help --quiet -q --services" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services
			;;
	esac
}


_docker_compose_pull() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --ignore-pull-failures --include-deps --no-parallel --quiet -q" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services --filter source=image
			;;
	esac
}


_docker_compose_push() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --ignore-push-failures" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services
			;;
	esac
}


_docker_compose_restart() {
	case "$prev" in
		--timeout|-t)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --timeout -t" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_running_services
			;;
	esac
}


_docker_compose_rm() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--force -f --help --stop -s -v" -- "$cur" ) )
			;;
		*)
			if __docker_compose_has_option "--stop|-s" ; then
				__docker_compose_complete_services
			else
				__docker_compose_complete_services --filter status=stopped
			fi
			;;
	esac
}


_docker_compose_run() {
	case "$prev" in
		-e)
			COMPREPLY=( $( compgen -e -- "$cur" ) )
			__docker_compose_nospace
			return
			;;
		--entrypoint|--label|-l|--name|--user|-u|--volume|-v|--workdir|-w)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--detach -d --entrypoint -e --help --label -l --name --no-deps --publish -p --rm --service-ports -T --use-aliases --user -u --volume -v --workdir -w" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services
			;;
	esac
}


_docker_compose_scale() {
	case "$prev" in
		=)
			COMPREPLY=("$cur")
			return
			;;
		--timeout|-t)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --timeout -t" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $(compgen -S "=" -W "$(__docker_compose_services)" -- "$cur") )
			__docker_compose_nospace
			;;
	esac
}


_docker_compose_start() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services --filter status=stopped
			;;
	esac
}


_docker_compose_stop() {
	case "$prev" in
		--timeout|-t)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help --timeout -t" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_running_services
			;;
	esac
}


_docker_compose_top() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_running_services
			;;
	esac
}


_docker_compose_unpause() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services --filter status=paused
			;;
	esac
}


_docker_compose_up() {
	case "$prev" in
		=)
			COMPREPLY=("$cur")
			return
			;;
		--exit-code-from)
			__docker_compose_complete_services
			return
			;;
		--scale)
			COMPREPLY=( $(compgen -S "=" -W "$(__docker_compose_services)" -- "$cur") )
			__docker_compose_nospace
			return
			;;
		--timeout|-t)
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--abort-on-container-exit --always-recreate-deps --attach-dependencies --build -d --detach --exit-code-from --force-recreate --help --no-build --no-color --no-deps --no-log-prefix --no-recreate --no-start --renew-anon-volumes -V --remove-orphans --scale --timeout -t" -- "$cur" ) )
			;;
		*)
			__docker_compose_complete_services
			;;
	esac
}


_docker_compose_version() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--short" -- "$cur" ) )
			;;
	esac
}


_docker_compose() {
	local previous_extglob_setting=$(shopt -p extglob)
	shopt -s extglob

	local commands=(
		build
		config
		create
		down
		events
		exec
		help
		images
		kill
		logs
		pause
		port
		ps
		pull
		push
		restart
		rm
		run
		scale
		start
		stop
		top
		unpause
		up
		version
	)

	# Options for the docker daemon that have to be passed to secondary calls to
	# docker-compose executed by this script.
	local daemon_boolean_options="
		--skip-hostname-check
		--tls
		--tlsverify
	"
	local daemon_options_with_args="
		--context -c
		--env-file
		--file -f
		--host -H
		--project-directory
		--project-name -p
		--tlscacert
		--tlscert
		--tlskey
	"

	# These options require special treatment when searching the command.
	local top_level_options_with_args="
		--ansi
		--log-level
		--profile
	"

	COMPREPLY=()
	local cur prev words cword
	_get_comp_words_by_ref -n : cur prev words cword

	# search subcommand and invoke its handler.
	# special treatment of some top-level options
	local command='docker_compose'
	local top_level_options=()
	local counter=1

	while [ $counter -lt $cword ]; do
		case "${words[$counter]}" in
			$(__docker_compose_to_extglob "$daemon_boolean_options") )
				local opt=${words[counter]}
				top_level_options+=($opt)
				;;
			$(__docker_compose_to_extglob "$daemon_options_with_args") )
				local opt=${words[counter]}
				local arg=${words[++counter]}
				top_level_options+=($opt $arg)
				;;
			$(__docker_compose_to_extglob "$top_level_options_with_args") )
				(( counter++ ))
				;;
			-*)
				;;
			*)
				command="${words[$counter]}"
				break
				;;
		esac
		(( counter++ ))
	done

	local completions_func=_docker_compose_${command//-/_}
	declare -F $completions_func >/dev/null && $completions_func

	eval "$previous_extglob_setting"
	return 0
}

eval "$__docker_compose_previous_extglob_setting"
unset __docker_compose_previous_extglob_setting

complete -F _docker_compose docker-compose docker-compose.exe

#
# bash completion for kaf
#

__kaf_debug()
{
    if [[ -n ${BASH_COMP_DEBUG_FILE} ]]; then
        echo "$*" >> "${BASH_COMP_DEBUG_FILE}"
    fi
}

# Homebrew on Macs have version 1.3 of bash-completion which doesn't include
# _init_completion. This is a very minimal version of that function.
__kaf_init_completion()
{
    COMPREPLY=()
    _get_comp_words_by_ref "$@" cur prev words cword
}

__kaf_index_of_word()
{
    local w word=$1
    shift
    index=0
    for w in "$@"; do
        [[ $w = "$word" ]] && return
        index=$((index+1))
    done
    index=-1
}

__kaf_contains_word()
{
    local w word=$1; shift
    for w in "$@"; do
        [[ $w = "$word" ]] && return
    done
    return 1
}

__kaf_handle_reply()
{
    __kaf_debug "${FUNCNAME[0]}"
    local comp
    case $cur in
        -*)
            if [[ $(type -t compopt) = "builtin" ]]; then
                compopt -o nospace
            fi
            local allflags
            if [ ${#must_have_one_flag[@]} -ne 0 ]; then
                allflags=("${must_have_one_flag[@]}")
            else
                allflags=("${flags[*]} ${two_word_flags[*]}")
            fi
            while IFS='' read -r comp; do
                COMPREPLY+=("$comp")
            done < <(compgen -W "${allflags[*]}" -- "$cur")
            if [[ $(type -t compopt) = "builtin" ]]; then
                [[ "${COMPREPLY[0]}" == *= ]] || compopt +o nospace
            fi

            # complete after --flag=abc
            if [[ $cur == *=* ]]; then
                if [[ $(type -t compopt) = "builtin" ]]; then
                    compopt +o nospace
                fi

                local index flag
                flag="${cur%=*}"
                __kaf_index_of_word "${flag}" "${flags_with_completion[@]}"
                COMPREPLY=()
                if [[ ${index} -ge 0 ]]; then
                    PREFIX=""
                    cur="${cur#*=}"
                    ${flags_completion[${index}]}
                    if [ -n "${ZSH_VERSION}" ]; then
                        # zsh completion needs --flag= prefix
                        eval "COMPREPLY=( \"\${COMPREPLY[@]/#/${flag}=}\" )"
                    fi
                fi
            fi
            return 0;
            ;;
    esac

    # check if we are handling a flag with special work handling
    local index
    __kaf_index_of_word "${prev}" "${flags_with_completion[@]}"
    if [[ ${index} -ge 0 ]]; then
        ${flags_completion[${index}]}
        return
    fi

    # we are parsing a flag and don't have a special handler, no completion
    if [[ ${cur} != "${words[cword]}" ]]; then
        return
    fi

    local completions
    completions=("${commands[@]}")
    if [[ ${#must_have_one_noun[@]} -ne 0 ]]; then
        completions=("${must_have_one_noun[@]}")
    fi
    if [[ ${#must_have_one_flag[@]} -ne 0 ]]; then
        completions+=("${must_have_one_flag[@]}")
    fi
    while IFS='' read -r comp; do
        COMPREPLY+=("$comp")
    done < <(compgen -W "${completions[*]}" -- "$cur")

    if [[ ${#COMPREPLY[@]} -eq 0 && ${#noun_aliases[@]} -gt 0 && ${#must_have_one_noun[@]} -ne 0 ]]; then
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${noun_aliases[*]}" -- "$cur")
    fi

    if [[ ${#COMPREPLY[@]} -eq 0 ]]; then
		if declare -F __kaf_custom_func >/dev/null; then
			# try command name qualified custom func
			__kaf_custom_func
		else
			# otherwise fall back to unqualified for compatibility
			declare -F __custom_func >/dev/null && __custom_func
		fi
    fi

    # available in bash-completion >= 2, not always present on macOS
    if declare -F __ltrim_colon_completions >/dev/null; then
        __ltrim_colon_completions "$cur"
    fi

    # If there is only 1 completion and it is a flag with an = it will be completed
    # but we don't want a space after the =
    if [[ "${#COMPREPLY[@]}" -eq "1" ]] && [[ $(type -t compopt) = "builtin" ]] && [[ "${COMPREPLY[0]}" == --*= ]]; then
       compopt -o nospace
    fi
}

# The arguments should be in the form "ext1|ext2|extn"
__kaf_handle_filename_extension_flag()
{
    local ext="$1"
    _filedir "@(${ext})"
}

__kaf_handle_subdirs_in_dir_flag()
{
    local dir="$1"
    pushd "${dir}" >/dev/null 2>&1 && _filedir -d && popd >/dev/null 2>&1 || return
}

__kaf_handle_flag()
{
    __kaf_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    # if a command required a flag, and we found it, unset must_have_one_flag()
    local flagname=${words[c]}
    local flagvalue
    # if the word contained an =
    if [[ ${words[c]} == *"="* ]]; then
        flagvalue=${flagname#*=} # take in as flagvalue after the =
        flagname=${flagname%=*} # strip everything after the =
        flagname="${flagname}=" # but put the = back
    fi
    __kaf_debug "${FUNCNAME[0]}: looking for ${flagname}"
    if __kaf_contains_word "${flagname}" "${must_have_one_flag[@]}"; then
        must_have_one_flag=()
    fi

    # if you set a flag which only applies to this command, don't show subcommands
    if __kaf_contains_word "${flagname}" "${local_nonpersistent_flags[@]}"; then
      commands=()
    fi

    # keep flag value with flagname as flaghash
    # flaghash variable is an associative array which is only supported in bash > 3.
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        if [ -n "${flagvalue}" ] ; then
            flaghash[${flagname}]=${flagvalue}
        elif [ -n "${words[ $((c+1)) ]}" ] ; then
            flaghash[${flagname}]=${words[ $((c+1)) ]}
        else
            flaghash[${flagname}]="true" # pad "true" for bool flag
        fi
    fi

    # skip the argument to a two word flag
    if [[ ${words[c]} != *"="* ]] && __kaf_contains_word "${words[c]}" "${two_word_flags[@]}"; then
			  __kaf_debug "${FUNCNAME[0]}: found a flag ${words[c]}, skip the next argument"
        c=$((c+1))
        # if we are looking for a flags value, don't show commands
        if [[ $c -eq $cword ]]; then
            commands=()
        fi
    fi

    c=$((c+1))

}

__kaf_handle_noun()
{
    __kaf_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    if __kaf_contains_word "${words[c]}" "${must_have_one_noun[@]}"; then
        must_have_one_noun=()
    elif __kaf_contains_word "${words[c]}" "${noun_aliases[@]}"; then
        must_have_one_noun=()
    fi

    nouns+=("${words[c]}")
    c=$((c+1))
}

__kaf_handle_command()
{
    __kaf_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    local next_command
    if [[ -n ${last_command} ]]; then
        next_command="_${last_command}_${words[c]//:/__}"
    else
        if [[ $c -eq 0 ]]; then
            next_command="_kaf_root_command"
        else
            next_command="_${words[c]//:/__}"
        fi
    fi
    c=$((c+1))
    __kaf_debug "${FUNCNAME[0]}: looking for ${next_command}"
    declare -F "$next_command" >/dev/null && $next_command
}

__kaf_handle_word()
{
    if [[ $c -ge $cword ]]; then
        __kaf_handle_reply
        return
    fi
    __kaf_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
    if [[ "${words[c]}" == -* ]]; then
        __kaf_handle_flag
    elif __kaf_contains_word "${words[c]}" "${commands[@]}"; then
        __kaf_handle_command
    elif [[ $c -eq 0 ]]; then
        __kaf_handle_command
    elif __kaf_contains_word "${words[c]}" "${command_aliases[@]}"; then
        # aliashash variable is an associative array which is only supported in bash > 3.
        if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
            words[c]=${aliashash[${words[c]}]}
            __kaf_handle_command
        else
            __kaf_handle_noun
        fi
    else
        __kaf_handle_noun
    fi
    __kaf_handle_word
}


__kaf_config_use_cluster() {
    if out=$( ./kaf config get-clusters --no-headers ); then
        COMPREPLY=( $( compgen -W "${out[*]}" -- "$cur" ) )
    fi
}

__kaf_topics() {
    if out=$( ./kaf topics --no-headers 2>/dev/null | awk '{print $1}' ); then
        COMPREPLY=( $( compgen -W "${out[*]}" -- "$cur" ) )
    fi
}

__kaf_groups() {
    if out=$( ./kaf groups --no-headers 2>/dev/null | awk '{print $1}' ); then
        COMPREPLY=( $( compgen -W "${out[*]}" -- "$cur" ) )
    fi
}

__kaf_custom_func() {
    case ${last_command} in
        kaf_config_use-cluster)
            __kaf_config_use_cluster
        ;;
        kaf_consume | kaf_produce | kaf_topic_add-config | kaf_topic_delete | kaf_topic_describe)
            __kaf_topics
        ;;
        kaf_group_commit | kaf_group_delete | kaf_group_describe)
            __kaf_groups
        ;;
        *)
        ;;
    esac
}

_kaf_completion()
{
    last_command="kaf_completion"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--help")
    flags+=("-h")
    local_nonpersistent_flags+=("--help")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    must_have_one_noun+=("bash")
    must_have_one_noun+=("powershell")
    must_have_one_noun+=("zsh")
    noun_aliases=()
}

_kaf_config_add-cluster()
{
    last_command="kaf_config_add-cluster"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--broker-version=")
    two_word_flags+=("--broker-version")
    local_nonpersistent_flags+=("--broker-version=")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_config_add-eventhub()
{
    last_command="kaf_config_add-eventhub"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--eh-connstring=")
    two_word_flags+=("--eh-connstring")
    local_nonpersistent_flags+=("--eh-connstring=")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_config_current-context()
{
    last_command="kaf_config_current-context"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_config_get-clusters()
{
    last_command="kaf_config_get-clusters"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--no-headers")
    local_nonpersistent_flags+=("--no-headers")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_config_import()
{
    last_command="kaf_config_import"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    must_have_one_noun+=("ccloud")
    noun_aliases=()
}

_kaf_config_remove-cluster()
{
    last_command="kaf_config_remove-cluster"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_config_select-cluster()
{
    last_command="kaf_config_select-cluster"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_config_use-cluster()
{
    last_command="kaf_config_use-cluster"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_config()
{
    last_command="kaf_config"

    command_aliases=()

    commands=()
    commands+=("add-cluster")
    commands+=("add-eventhub")
    commands+=("current-context")
    commands+=("get-clusters")
    commands+=("import")
    commands+=("remove-cluster")
    commands+=("select-cluster")
    commands+=("use-cluster")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_consume()
{
    last_command="kaf_consume"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--commit")
    local_nonpersistent_flags+=("--commit")
    flags+=("--follow")
    flags+=("-f")
    local_nonpersistent_flags+=("--follow")
    flags+=("--group=")
    two_word_flags+=("--group")
    two_word_flags+=("-g")
    local_nonpersistent_flags+=("--group=")
    flags+=("--key-proto-type=")
    two_word_flags+=("--key-proto-type")
    local_nonpersistent_flags+=("--key-proto-type=")
    flags+=("--offset=")
    two_word_flags+=("--offset")
    local_nonpersistent_flags+=("--offset=")
    flags+=("--partitions=")
    two_word_flags+=("--partitions")
    two_word_flags+=("-p")
    local_nonpersistent_flags+=("--partitions=")
    flags+=("--proto-exclude=")
    two_word_flags+=("--proto-exclude")
    local_nonpersistent_flags+=("--proto-exclude=")
    flags+=("--proto-include=")
    two_word_flags+=("--proto-include")
    local_nonpersistent_flags+=("--proto-include=")
    flags+=("--proto-type=")
    two_word_flags+=("--proto-type")
    local_nonpersistent_flags+=("--proto-type=")
    flags+=("--raw")
    local_nonpersistent_flags+=("--raw")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_group_commit()
{
    last_command="kaf_group_commit"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-partitions")
    local_nonpersistent_flags+=("--all-partitions")
    flags+=("--noconfirm")
    local_nonpersistent_flags+=("--noconfirm")
    flags+=("--offset=")
    two_word_flags+=("--offset")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--offset=")
    flags+=("--partition=")
    two_word_flags+=("--partition")
    two_word_flags+=("-p")
    local_nonpersistent_flags+=("--partition=")
    flags+=("--topic=")
    two_word_flags+=("--topic")
    two_word_flags+=("-t")
    local_nonpersistent_flags+=("--topic=")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_group_delete()
{
    last_command="kaf_group_delete"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_group_describe()
{
    last_command="kaf_group_describe"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_group_ls()
{
    last_command="kaf_group_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--no-headers")
    local_nonpersistent_flags+=("--no-headers")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_group()
{
    last_command="kaf_group"

    command_aliases=()

    commands=()
    commands+=("commit")
    commands+=("delete")
    commands+=("describe")
    commands+=("ls")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_groups()
{
    last_command="kaf_groups"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--no-headers")
    local_nonpersistent_flags+=("--no-headers")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_node_ls()
{
    last_command="kaf_node_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--no-headers")
    local_nonpersistent_flags+=("--no-headers")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_node()
{
    last_command="kaf_node"

    command_aliases=()

    commands=()
    commands+=("ls")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_nodes()
{
    last_command="kaf_nodes"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_produce()
{
    last_command="kaf_produce"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--header=")
    two_word_flags+=("--header")
    two_word_flags+=("-H")
    local_nonpersistent_flags+=("--header=")
    flags+=("--key=")
    two_word_flags+=("--key")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--key=")
    flags+=("--key-proto-type=")
    two_word_flags+=("--key-proto-type")
    local_nonpersistent_flags+=("--key-proto-type=")
    flags+=("--num=")
    two_word_flags+=("--num")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--num=")
    flags+=("--partition=")
    two_word_flags+=("--partition")
    two_word_flags+=("-p")
    local_nonpersistent_flags+=("--partition=")
    flags+=("--partitioner=")
    two_word_flags+=("--partitioner")
    local_nonpersistent_flags+=("--partitioner=")
    flags+=("--proto-exclude=")
    two_word_flags+=("--proto-exclude")
    local_nonpersistent_flags+=("--proto-exclude=")
    flags+=("--proto-include=")
    two_word_flags+=("--proto-include")
    local_nonpersistent_flags+=("--proto-include=")
    flags+=("--proto-type=")
    two_word_flags+=("--proto-type")
    local_nonpersistent_flags+=("--proto-type=")
    flags+=("--timestamp=")
    two_word_flags+=("--timestamp")
    local_nonpersistent_flags+=("--timestamp=")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_query()
{
    last_command="kaf_query"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--grep=")
    two_word_flags+=("--grep")
    local_nonpersistent_flags+=("--grep=")
    flags+=("--key=")
    two_word_flags+=("--key")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--key=")
    flags+=("--key-proto-type=")
    two_word_flags+=("--key-proto-type")
    local_nonpersistent_flags+=("--key-proto-type=")
    flags+=("--proto-exclude=")
    two_word_flags+=("--proto-exclude")
    local_nonpersistent_flags+=("--proto-exclude=")
    flags+=("--proto-include=")
    two_word_flags+=("--proto-include")
    local_nonpersistent_flags+=("--proto-include=")
    flags+=("--proto-type=")
    two_word_flags+=("--proto-type")
    local_nonpersistent_flags+=("--proto-type=")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_topic_add-config()
{
    last_command="kaf_topic_add-config"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_topic_create()
{
    last_command="kaf_topic_create"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--compact")
    local_nonpersistent_flags+=("--compact")
    flags+=("--partitions=")
    two_word_flags+=("--partitions")
    two_word_flags+=("-p")
    local_nonpersistent_flags+=("--partitions=")
    flags+=("--replicas=")
    two_word_flags+=("--replicas")
    two_word_flags+=("-r")
    local_nonpersistent_flags+=("--replicas=")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_topic_delete()
{
    last_command="kaf_topic_delete"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_topic_describe()
{
    last_command="kaf_topic_describe"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_topic_ls()
{
    last_command="kaf_topic_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--no-headers")
    local_nonpersistent_flags+=("--no-headers")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_topic_set-config()
{
    last_command="kaf_topic_set-config"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_topic_update()
{
    last_command="kaf_topic_update"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--partition-assignments=")
    two_word_flags+=("--partition-assignments")
    local_nonpersistent_flags+=("--partition-assignments=")
    flags+=("--partitions=")
    two_word_flags+=("--partitions")
    two_word_flags+=("-p")
    local_nonpersistent_flags+=("--partitions=")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_topic()
{
    last_command="kaf_topic"

    command_aliases=()

    commands=()
    commands+=("add-config")
    commands+=("create")
    commands+=("delete")
    commands+=("describe")
    commands+=("ls")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("list")
        aliashash["list"]="ls"
    fi
    commands+=("set-config")
    commands+=("update")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_topics()
{
    last_command="kaf_topics"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--no-headers")
    local_nonpersistent_flags+=("--no-headers")
    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kaf_root_command()
{
    last_command="kaf"

    command_aliases=()

    commands=()
    commands+=("completion")
    commands+=("config")
    commands+=("consume")
    commands+=("group")
    commands+=("groups")
    commands+=("node")
    commands+=("nodes")
    commands+=("produce")
    commands+=("query")
    commands+=("topic")
    commands+=("topics")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--brokers=")
    two_word_flags+=("--brokers")
    two_word_flags+=("-b")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    two_word_flags+=("-c")
    flags+=("--config=")
    two_word_flags+=("--config")
    flags+=("--schema-registry=")
    two_word_flags+=("--schema-registry")
    flags+=("--verbose")
    flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

__start_kaf()
{
    local cur prev words cword
    declare -A flaghash 2>/dev/null || :
    declare -A aliashash 2>/dev/null || :
    if declare -F _init_completion >/dev/null 2>&1; then
        _init_completion -s || return
    else
        __kaf_init_completion -n "=" || return
    fi

    local c=0
    local flags=()
    local two_word_flags=()
    local local_nonpersistent_flags=()
    local flags_with_completion=()
    local flags_completion=()
    local commands=("kaf")
    local must_have_one_flag=()
    local must_have_one_noun=()
    local last_command
    local nouns=()

    __kaf_handle_word
}

if [[ $(type -t compopt) = "builtin" ]]; then
    complete -o default -F __start_kaf kaf
else
    complete -o default -o nospace -F __start_kaf kaf
fi

# ex: ts=4 sw=4 et filetype=sh

#
# bash completion for kubectl
#


# Copyright 2016 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# bash completion for kubectl                              -*- shell-script -*-

__kubectl_debug()
{
    if [[ -n ${BASH_COMP_DEBUG_FILE} ]]; then
        echo "$*" >> "${BASH_COMP_DEBUG_FILE}"
    fi
}

# Homebrew on Macs have version 1.3 of bash-completion which doesn't include
# _init_completion. This is a very minimal version of that function.
__kubectl_init_completion()
{
    COMPREPLY=()
    _get_comp_words_by_ref "$@" cur prev words cword
}

__kubectl_index_of_word()
{
    local w word=$1
    shift
    index=0
    for w in "$@"; do
        [[ $w = "$word" ]] && return
        index=$((index+1))
    done
    index=-1
}

__kubectl_contains_word()
{
    local w word=$1; shift
    for w in "$@"; do
        [[ $w = "$word" ]] && return
    done
    return 1
}

__kubectl_handle_go_custom_completion()
{
    __kubectl_debug "${FUNCNAME[0]}: cur is ${cur}, words[*] is ${words[*]}, #words[@] is ${#words[@]}"

    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16

    local out requestComp lastParam lastChar comp directive args

    # Prepare the command to request completions for the program.
    # Calling ${words[0]} instead of directly kubectl allows to handle aliases
    args=("${words[@]:1}")
    requestComp="${words[0]} __completeNoDesc ${args[*]}"

    lastParam=${words[$((${#words[@]}-1))]}
    lastChar=${lastParam:$((${#lastParam}-1)):1}
    __kubectl_debug "${FUNCNAME[0]}: lastParam ${lastParam}, lastChar ${lastChar}"

    if [ -z "${cur}" ] && [ "${lastChar}" != "=" ]; then
        # If the last parameter is complete (there is a space following it)
        # We add an extra empty parameter so we can indicate this to the go method.
        __kubectl_debug "${FUNCNAME[0]}: Adding extra empty parameter"
        requestComp="${requestComp} \"\""
    fi

    __kubectl_debug "${FUNCNAME[0]}: calling ${requestComp}"
    # Use eval to handle any environment variables and such
    out=$(eval "${requestComp}" 2>/dev/null)

    # Extract the directive integer at the very end of the output following a colon (:)
    directive=${out##*:}
    # Remove the directive
    out=${out%:*}
    if [ "${directive}" = "${out}" ]; then
        # There is not directive specified
        directive=0
    fi
    __kubectl_debug "${FUNCNAME[0]}: the completion directive is: ${directive}"
    __kubectl_debug "${FUNCNAME[0]}: the completions are: ${out[*]}"

    if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
        # Error code.  No completion.
        __kubectl_debug "${FUNCNAME[0]}: received error from custom completion go code"
        return
    else
        if [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __kubectl_debug "${FUNCNAME[0]}: activating no space"
                compopt -o nospace
            fi
        fi
        if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __kubectl_debug "${FUNCNAME[0]}: activating no file completion"
                compopt +o default
            fi
        fi
    fi

    if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
        # File extension filtering
        local fullFilter filter filteringCmd
        # Do not use quotes around the $out variable or else newline
        # characters will be kept.
        for filter in ${out[*]}; do
            fullFilter+="$filter|"
        done

        filteringCmd="_filedir $fullFilter"
        __kubectl_debug "File filtering command: $filteringCmd"
        $filteringCmd
    elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
        # File completion for directories only
        local subDir
        # Use printf to strip any trailing newline
        subdir=$(printf "%s" "${out[0]}")
        if [ -n "$subdir" ]; then
            __kubectl_debug "Listing directories in $subdir"
            __kubectl_handle_subdirs_in_dir_flag "$subdir"
        else
            __kubectl_debug "Listing directories in ."
            _filedir -d
        fi
    else
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${out[*]}" -- "$cur")
    fi
}

__kubectl_handle_reply()
{
    __kubectl_debug "${FUNCNAME[0]}"
    local comp
    case $cur in
        -*)
            if [[ $(type -t compopt) = "builtin" ]]; then
                compopt -o nospace
            fi
            local allflags
            if [ ${#must_have_one_flag[@]} -ne 0 ]; then
                allflags=("${must_have_one_flag[@]}")
            else
                allflags=("${flags[*]} ${two_word_flags[*]}")
            fi
            while IFS='' read -r comp; do
                COMPREPLY+=("$comp")
            done < <(compgen -W "${allflags[*]}" -- "$cur")
            if [[ $(type -t compopt) = "builtin" ]]; then
                [[ "${COMPREPLY[0]}" == *= ]] || compopt +o nospace
            fi

            # complete after --flag=abc
            if [[ $cur == *=* ]]; then
                if [[ $(type -t compopt) = "builtin" ]]; then
                    compopt +o nospace
                fi

                local index flag
                flag="${cur%=*}"
                __kubectl_index_of_word "${flag}" "${flags_with_completion[@]}"
                COMPREPLY=()
                if [[ ${index} -ge 0 ]]; then
                    PREFIX=""
                    cur="${cur#*=}"
                    ${flags_completion[${index}]}
                    if [ -n "${ZSH_VERSION}" ]; then
                        # zsh completion needs --flag= prefix
                        eval "COMPREPLY=( \"\${COMPREPLY[@]/#/${flag}=}\" )"
                    fi
                fi
            fi
            return 0;
            ;;
    esac

    # check if we are handling a flag with special work handling
    local index
    __kubectl_index_of_word "${prev}" "${flags_with_completion[@]}"
    if [[ ${index} -ge 0 ]]; then
        ${flags_completion[${index}]}
        return
    fi

    # we are parsing a flag and don't have a special handler, no completion
    if [[ ${cur} != "${words[cword]}" ]]; then
        return
    fi

    local completions
    completions=("${commands[@]}")
    if [[ ${#must_have_one_noun[@]} -ne 0 ]]; then
        completions+=("${must_have_one_noun[@]}")
    elif [[ -n "${has_completion_function}" ]]; then
        # if a go completion function is provided, defer to that function
        __kubectl_handle_go_custom_completion
    fi
    if [[ ${#must_have_one_flag[@]} -ne 0 ]]; then
        completions+=("${must_have_one_flag[@]}")
    fi
    while IFS='' read -r comp; do
        COMPREPLY+=("$comp")
    done < <(compgen -W "${completions[*]}" -- "$cur")

    if [[ ${#COMPREPLY[@]} -eq 0 && ${#noun_aliases[@]} -gt 0 && ${#must_have_one_noun[@]} -ne 0 ]]; then
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${noun_aliases[*]}" -- "$cur")
    fi

    if [[ ${#COMPREPLY[@]} -eq 0 ]]; then
		if declare -F __kubectl_custom_func >/dev/null; then
			# try command name qualified custom func
			__kubectl_custom_func
		else
			# otherwise fall back to unqualified for compatibility
			declare -F __custom_func >/dev/null && __custom_func
		fi
    fi

    # available in bash-completion >= 2, not always present on macOS
    if declare -F __ltrim_colon_completions >/dev/null; then
        __ltrim_colon_completions "$cur"
    fi

    # If there is only 1 completion and it is a flag with an = it will be completed
    # but we don't want a space after the =
    if [[ "${#COMPREPLY[@]}" -eq "1" ]] && [[ $(type -t compopt) = "builtin" ]] && [[ "${COMPREPLY[0]}" == --*= ]]; then
       compopt -o nospace
    fi
}

# The arguments should be in the form "ext1|ext2|extn"
__kubectl_handle_filename_extension_flag()
{
    local ext="$1"
    _filedir "@(${ext})"
}

__kubectl_handle_subdirs_in_dir_flag()
{
    local dir="$1"
    pushd "${dir}" >/dev/null 2>&1 && _filedir -d && popd >/dev/null 2>&1 || return
}

__kubectl_handle_flag()
{
    __kubectl_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    # if a command required a flag, and we found it, unset must_have_one_flag()
    local flagname=${words[c]}
    local flagvalue
    # if the word contained an =
    if [[ ${words[c]} == *"="* ]]; then
        flagvalue=${flagname#*=} # take in as flagvalue after the =
        flagname=${flagname%=*} # strip everything after the =
        flagname="${flagname}=" # but put the = back
    fi
    __kubectl_debug "${FUNCNAME[0]}: looking for ${flagname}"
    if __kubectl_contains_word "${flagname}" "${must_have_one_flag[@]}"; then
        must_have_one_flag=()
    fi

    # if you set a flag which only applies to this command, don't show subcommands
    if __kubectl_contains_word "${flagname}" "${local_nonpersistent_flags[@]}"; then
      commands=()
    fi

    # keep flag value with flagname as flaghash
    # flaghash variable is an associative array which is only supported in bash > 3.
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        if [ -n "${flagvalue}" ] ; then
            flaghash[${flagname}]=${flagvalue}
        elif [ -n "${words[ $((c+1)) ]}" ] ; then
            flaghash[${flagname}]=${words[ $((c+1)) ]}
        else
            flaghash[${flagname}]="true" # pad "true" for bool flag
        fi
    fi

    # skip the argument to a two word flag
    if [[ ${words[c]} != *"="* ]] && __kubectl_contains_word "${words[c]}" "${two_word_flags[@]}"; then
			  __kubectl_debug "${FUNCNAME[0]}: found a flag ${words[c]}, skip the next argument"
        c=$((c+1))
        # if we are looking for a flags value, don't show commands
        if [[ $c -eq $cword ]]; then
            commands=()
        fi
    fi

    c=$((c+1))

}

__kubectl_handle_noun()
{
    __kubectl_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    if __kubectl_contains_word "${words[c]}" "${must_have_one_noun[@]}"; then
        must_have_one_noun=()
    elif __kubectl_contains_word "${words[c]}" "${noun_aliases[@]}"; then
        must_have_one_noun=()
    fi

    nouns+=("${words[c]}")
    c=$((c+1))
}

__kubectl_handle_command()
{
    __kubectl_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    local next_command
    if [[ -n ${last_command} ]]; then
        next_command="_${last_command}_${words[c]//:/__}"
    else
        if [[ $c -eq 0 ]]; then
            next_command="_kubectl_root_command"
        else
            next_command="_${words[c]//:/__}"
        fi
    fi
    c=$((c+1))
    __kubectl_debug "${FUNCNAME[0]}: looking for ${next_command}"
    declare -F "$next_command" >/dev/null && $next_command
}

__kubectl_handle_word()
{
    if [[ $c -ge $cword ]]; then
        __kubectl_handle_reply
        return
    fi
    __kubectl_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
    if [[ "${words[c]}" == -* ]]; then
        __kubectl_handle_flag
    elif __kubectl_contains_word "${words[c]}" "${commands[@]}"; then
        __kubectl_handle_command
    elif [[ $c -eq 0 ]]; then
        __kubectl_handle_command
    elif __kubectl_contains_word "${words[c]}" "${command_aliases[@]}"; then
        # aliashash variable is an associative array which is only supported in bash > 3.
        if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
            words[c]=${aliashash[${words[c]}]}
            __kubectl_handle_command
        else
            __kubectl_handle_noun
        fi
    else
        __kubectl_handle_noun
    fi
    __kubectl_handle_word
}

_kubectl_annotate()
{
    last_command="kubectl_annotate"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--all-namespaces")
    flags+=("-A")
    local_nonpersistent_flags+=("--all-namespaces")
    local_nonpersistent_flags+=("-A")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--field-selector=")
    two_word_flags+=("--field-selector")
    local_nonpersistent_flags+=("--field-selector")
    local_nonpersistent_flags+=("--field-selector=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--list")
    local_nonpersistent_flags+=("--list")
    flags+=("--local")
    local_nonpersistent_flags+=("--local")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--overwrite")
    local_nonpersistent_flags+=("--overwrite")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--resource-version=")
    two_word_flags+=("--resource-version")
    local_nonpersistent_flags+=("--resource-version")
    local_nonpersistent_flags+=("--resource-version=")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_api-resources()
{
    last_command="kubectl_api-resources"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-group=")
    two_word_flags+=("--api-group")
    local_nonpersistent_flags+=("--api-group")
    local_nonpersistent_flags+=("--api-group=")
    flags+=("--cached")
    local_nonpersistent_flags+=("--cached")
    flags+=("--namespaced")
    local_nonpersistent_flags+=("--namespaced")
    flags+=("--no-headers")
    local_nonpersistent_flags+=("--no-headers")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--sort-by=")
    two_word_flags+=("--sort-by")
    local_nonpersistent_flags+=("--sort-by")
    local_nonpersistent_flags+=("--sort-by=")
    flags+=("--verbs=")
    two_word_flags+=("--verbs")
    local_nonpersistent_flags+=("--verbs")
    local_nonpersistent_flags+=("--verbs=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_api-versions()
{
    last_command="kubectl_api-versions"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_apply_edit-last-applied()
{
    last_command="kubectl_apply_edit-last-applied"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--windows-line-endings")
    local_nonpersistent_flags+=("--windows-line-endings")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_apply_set-last-applied()
{
    last_command="kubectl_apply_set-last-applied"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--create-annotation")
    local_nonpersistent_flags+=("--create-annotation")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_apply_view-last-applied()
{
    last_command="kubectl_apply_view-last-applied"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_apply()
{
    last_command="kubectl_apply"

    command_aliases=()

    commands=()
    commands+=("edit-last-applied")
    commands+=("set-last-applied")
    commands+=("view-last-applied")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--cascade")
    local_nonpersistent_flags+=("--cascade")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--force")
    local_nonpersistent_flags+=("--force")
    flags+=("--force-conflicts")
    local_nonpersistent_flags+=("--force-conflicts")
    flags+=("--grace-period=")
    two_word_flags+=("--grace-period")
    local_nonpersistent_flags+=("--grace-period")
    local_nonpersistent_flags+=("--grace-period=")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--openapi-patch")
    local_nonpersistent_flags+=("--openapi-patch")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--overwrite")
    local_nonpersistent_flags+=("--overwrite")
    flags+=("--prune")
    local_nonpersistent_flags+=("--prune")
    flags+=("--prune-whitelist=")
    two_word_flags+=("--prune-whitelist")
    local_nonpersistent_flags+=("--prune-whitelist")
    local_nonpersistent_flags+=("--prune-whitelist=")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--server-side")
    local_nonpersistent_flags+=("--server-side")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_attach()
{
    last_command="kubectl_attach"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--container=")
    two_word_flags+=("--container")
    two_word_flags+=("-c")
    local_nonpersistent_flags+=("--container")
    local_nonpersistent_flags+=("--container=")
    local_nonpersistent_flags+=("-c")
    flags+=("--pod-running-timeout=")
    two_word_flags+=("--pod-running-timeout")
    local_nonpersistent_flags+=("--pod-running-timeout")
    local_nonpersistent_flags+=("--pod-running-timeout=")
    flags+=("--quiet")
    flags+=("-q")
    local_nonpersistent_flags+=("--quiet")
    local_nonpersistent_flags+=("-q")
    flags+=("--stdin")
    flags+=("-i")
    local_nonpersistent_flags+=("--stdin")
    local_nonpersistent_flags+=("-i")
    flags+=("--tty")
    flags+=("-t")
    local_nonpersistent_flags+=("--tty")
    local_nonpersistent_flags+=("-t")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_auth_can-i()
{
    last_command="kubectl_auth_can-i"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    flags+=("-A")
    local_nonpersistent_flags+=("--all-namespaces")
    local_nonpersistent_flags+=("-A")
    flags+=("--list")
    local_nonpersistent_flags+=("--list")
    flags+=("--no-headers")
    local_nonpersistent_flags+=("--no-headers")
    flags+=("--quiet")
    flags+=("-q")
    local_nonpersistent_flags+=("--quiet")
    local_nonpersistent_flags+=("-q")
    flags+=("--subresource=")
    two_word_flags+=("--subresource")
    local_nonpersistent_flags+=("--subresource")
    local_nonpersistent_flags+=("--subresource=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_auth_reconcile()
{
    last_command="kubectl_auth_reconcile"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--remove-extra-permissions")
    local_nonpersistent_flags+=("--remove-extra-permissions")
    flags+=("--remove-extra-subjects")
    local_nonpersistent_flags+=("--remove-extra-subjects")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_auth()
{
    last_command="kubectl_auth"

    command_aliases=()

    commands=()
    commands+=("can-i")
    commands+=("reconcile")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_autoscale()
{
    last_command="kubectl_autoscale"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--cpu-percent=")
    two_word_flags+=("--cpu-percent")
    local_nonpersistent_flags+=("--cpu-percent")
    local_nonpersistent_flags+=("--cpu-percent=")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--max=")
    two_word_flags+=("--max")
    local_nonpersistent_flags+=("--max")
    local_nonpersistent_flags+=("--max=")
    flags+=("--min=")
    two_word_flags+=("--min")
    local_nonpersistent_flags+=("--min")
    local_nonpersistent_flags+=("--min=")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_flag+=("--max=")
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_certificate_approve()
{
    last_command="kubectl_certificate_approve"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--force")
    local_nonpersistent_flags+=("--force")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_certificate_deny()
{
    last_command="kubectl_certificate_deny"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--force")
    local_nonpersistent_flags+=("--force")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_certificate()
{
    last_command="kubectl_certificate"

    command_aliases=()

    commands=()
    commands+=("approve")
    commands+=("deny")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_cluster-info_dump()
{
    last_command="kubectl_cluster-info_dump"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    flags+=("-A")
    local_nonpersistent_flags+=("--all-namespaces")
    local_nonpersistent_flags+=("-A")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--namespaces=")
    two_word_flags+=("--namespaces")
    local_nonpersistent_flags+=("--namespaces")
    local_nonpersistent_flags+=("--namespaces=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--output-directory=")
    two_word_flags+=("--output-directory")
    local_nonpersistent_flags+=("--output-directory")
    local_nonpersistent_flags+=("--output-directory=")
    flags+=("--pod-running-timeout=")
    two_word_flags+=("--pod-running-timeout")
    local_nonpersistent_flags+=("--pod-running-timeout")
    local_nonpersistent_flags+=("--pod-running-timeout=")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_cluster-info()
{
    last_command="kubectl_cluster-info"

    command_aliases=()

    commands=()
    commands+=("dump")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_completion()
{
    last_command="kubectl_completion"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--help")
    flags+=("-h")
    local_nonpersistent_flags+=("--help")
    local_nonpersistent_flags+=("-h")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    must_have_one_noun+=("bash")
    must_have_one_noun+=("zsh")
    noun_aliases=()
}

_kubectl_config_current-context()
{
    last_command="kubectl_config_current-context"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_config_delete-cluster()
{
    last_command="kubectl_config_delete-cluster"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_config_delete-context()
{
    last_command="kubectl_config_delete-context"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_config_delete-user()
{
    last_command="kubectl_config_delete-user"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_config_get-clusters()
{
    last_command="kubectl_config_get-clusters"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_config_get-contexts()
{
    last_command="kubectl_config_get-contexts"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--no-headers")
    local_nonpersistent_flags+=("--no-headers")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_config_get-users()
{
    last_command="kubectl_config_get-users"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_config_rename-context()
{
    last_command="kubectl_config_rename-context"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_config_set()
{
    last_command="kubectl_config_set"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--set-raw-bytes")
    local_nonpersistent_flags+=("--set-raw-bytes")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_config_set-cluster()
{
    last_command="kubectl_config_set-cluster"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--embed-certs")
    local_nonpersistent_flags+=("--embed-certs")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_config_set-context()
{
    last_command="kubectl_config_set-context"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--current")
    local_nonpersistent_flags+=("--current")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_config_set-credentials()
{
    last_command="kubectl_config_set-credentials"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--auth-provider=")
    two_word_flags+=("--auth-provider")
    local_nonpersistent_flags+=("--auth-provider")
    local_nonpersistent_flags+=("--auth-provider=")
    flags+=("--auth-provider-arg=")
    two_word_flags+=("--auth-provider-arg")
    local_nonpersistent_flags+=("--auth-provider-arg")
    local_nonpersistent_flags+=("--auth-provider-arg=")
    flags+=("--embed-certs")
    local_nonpersistent_flags+=("--embed-certs")
    flags+=("--exec-api-version=")
    two_word_flags+=("--exec-api-version")
    local_nonpersistent_flags+=("--exec-api-version")
    local_nonpersistent_flags+=("--exec-api-version=")
    flags+=("--exec-arg=")
    two_word_flags+=("--exec-arg")
    local_nonpersistent_flags+=("--exec-arg")
    local_nonpersistent_flags+=("--exec-arg=")
    flags+=("--exec-command=")
    two_word_flags+=("--exec-command")
    local_nonpersistent_flags+=("--exec-command")
    local_nonpersistent_flags+=("--exec-command=")
    flags+=("--exec-env=")
    two_word_flags+=("--exec-env")
    local_nonpersistent_flags+=("--exec-env")
    local_nonpersistent_flags+=("--exec-env=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_config_unset()
{
    last_command="kubectl_config_unset"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_config_use-context()
{
    last_command="kubectl_config_use-context"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_config_view()
{
    last_command="kubectl_config_view"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--flatten")
    local_nonpersistent_flags+=("--flatten")
    flags+=("--merge")
    local_nonpersistent_flags+=("--merge")
    flags+=("--minify")
    local_nonpersistent_flags+=("--minify")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--raw")
    local_nonpersistent_flags+=("--raw")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_config()
{
    last_command="kubectl_config"

    command_aliases=()

    commands=()
    commands+=("current-context")
    commands+=("delete-cluster")
    commands+=("delete-context")
    commands+=("delete-user")
    commands+=("get-clusters")
    commands+=("get-contexts")
    commands+=("get-users")
    commands+=("rename-context")
    commands+=("set")
    commands+=("set-cluster")
    commands+=("set-context")
    commands+=("set-credentials")
    commands+=("unset")
    commands+=("use-context")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("use")
        aliashash["use"]="use-context"
    fi
    commands+=("view")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_cordon()
{
    last_command="kubectl_cordon"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_cp()
{
    last_command="kubectl_cp"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--container=")
    two_word_flags+=("--container")
    two_word_flags+=("-c")
    local_nonpersistent_flags+=("--container")
    local_nonpersistent_flags+=("--container=")
    local_nonpersistent_flags+=("-c")
    flags+=("--no-preserve")
    local_nonpersistent_flags+=("--no-preserve")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_create_clusterrole()
{
    last_command="kubectl_create_clusterrole"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--aggregation-rule=")
    two_word_flags+=("--aggregation-rule")
    local_nonpersistent_flags+=("--aggregation-rule")
    local_nonpersistent_flags+=("--aggregation-rule=")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--non-resource-url=")
    two_word_flags+=("--non-resource-url")
    local_nonpersistent_flags+=("--non-resource-url")
    local_nonpersistent_flags+=("--non-resource-url=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--resource=")
    two_word_flags+=("--resource")
    local_nonpersistent_flags+=("--resource")
    local_nonpersistent_flags+=("--resource=")
    flags+=("--resource-name=")
    two_word_flags+=("--resource-name")
    local_nonpersistent_flags+=("--resource-name")
    local_nonpersistent_flags+=("--resource-name=")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--verb=")
    two_word_flags+=("--verb")
    local_nonpersistent_flags+=("--verb")
    local_nonpersistent_flags+=("--verb=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_clusterrolebinding()
{
    last_command="kubectl_create_clusterrolebinding"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--clusterrole=")
    two_word_flags+=("--clusterrole")
    flags_with_completion+=("--clusterrole")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    local_nonpersistent_flags+=("--clusterrole")
    local_nonpersistent_flags+=("--clusterrole=")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--group=")
    two_word_flags+=("--group")
    local_nonpersistent_flags+=("--group")
    local_nonpersistent_flags+=("--group=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--serviceaccount=")
    two_word_flags+=("--serviceaccount")
    local_nonpersistent_flags+=("--serviceaccount")
    local_nonpersistent_flags+=("--serviceaccount=")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_flag+=("--clusterrole=")
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_configmap()
{
    last_command="kubectl_create_configmap"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--append-hash")
    local_nonpersistent_flags+=("--append-hash")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--from-env-file=")
    two_word_flags+=("--from-env-file")
    local_nonpersistent_flags+=("--from-env-file")
    local_nonpersistent_flags+=("--from-env-file=")
    flags+=("--from-file=")
    two_word_flags+=("--from-file")
    local_nonpersistent_flags+=("--from-file")
    local_nonpersistent_flags+=("--from-file=")
    flags+=("--from-literal=")
    two_word_flags+=("--from-literal")
    local_nonpersistent_flags+=("--from-literal")
    local_nonpersistent_flags+=("--from-literal=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_cronjob()
{
    last_command="kubectl_create_cronjob"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--image=")
    two_word_flags+=("--image")
    local_nonpersistent_flags+=("--image")
    local_nonpersistent_flags+=("--image=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--restart=")
    two_word_flags+=("--restart")
    local_nonpersistent_flags+=("--restart")
    local_nonpersistent_flags+=("--restart=")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--schedule=")
    two_word_flags+=("--schedule")
    local_nonpersistent_flags+=("--schedule")
    local_nonpersistent_flags+=("--schedule=")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_flag+=("--image=")
    must_have_one_flag+=("--schedule=")
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_deployment()
{
    last_command="kubectl_create_deployment"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--image=")
    two_word_flags+=("--image")
    local_nonpersistent_flags+=("--image")
    local_nonpersistent_flags+=("--image=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--port=")
    two_word_flags+=("--port")
    local_nonpersistent_flags+=("--port")
    local_nonpersistent_flags+=("--port=")
    flags+=("--replicas=")
    two_word_flags+=("--replicas")
    two_word_flags+=("-r")
    local_nonpersistent_flags+=("--replicas")
    local_nonpersistent_flags+=("--replicas=")
    local_nonpersistent_flags+=("-r")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_flag+=("--image=")
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_ingress()
{
    last_command="kubectl_create_ingress"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--annotation=")
    two_word_flags+=("--annotation")
    local_nonpersistent_flags+=("--annotation")
    local_nonpersistent_flags+=("--annotation=")
    flags+=("--class=")
    two_word_flags+=("--class")
    local_nonpersistent_flags+=("--class")
    local_nonpersistent_flags+=("--class=")
    flags+=("--default-backend=")
    two_word_flags+=("--default-backend")
    local_nonpersistent_flags+=("--default-backend")
    local_nonpersistent_flags+=("--default-backend=")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--rule=")
    two_word_flags+=("--rule")
    local_nonpersistent_flags+=("--rule")
    local_nonpersistent_flags+=("--rule=")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_job()
{
    last_command="kubectl_create_job"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--from=")
    two_word_flags+=("--from")
    local_nonpersistent_flags+=("--from")
    local_nonpersistent_flags+=("--from=")
    flags+=("--image=")
    two_word_flags+=("--image")
    local_nonpersistent_flags+=("--image")
    local_nonpersistent_flags+=("--image=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_namespace()
{
    last_command="kubectl_create_namespace"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_poddisruptionbudget()
{
    last_command="kubectl_create_poddisruptionbudget"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--max-unavailable=")
    two_word_flags+=("--max-unavailable")
    local_nonpersistent_flags+=("--max-unavailable")
    local_nonpersistent_flags+=("--max-unavailable=")
    flags+=("--min-available=")
    two_word_flags+=("--min-available")
    local_nonpersistent_flags+=("--min-available")
    local_nonpersistent_flags+=("--min-available=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_priorityclass()
{
    last_command="kubectl_create_priorityclass"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--description=")
    two_word_flags+=("--description")
    local_nonpersistent_flags+=("--description")
    local_nonpersistent_flags+=("--description=")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--global-default")
    local_nonpersistent_flags+=("--global-default")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--preemption-policy=")
    two_word_flags+=("--preemption-policy")
    local_nonpersistent_flags+=("--preemption-policy")
    local_nonpersistent_flags+=("--preemption-policy=")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--value=")
    two_word_flags+=("--value")
    local_nonpersistent_flags+=("--value")
    local_nonpersistent_flags+=("--value=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_quota()
{
    last_command="kubectl_create_quota"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--hard=")
    two_word_flags+=("--hard")
    local_nonpersistent_flags+=("--hard")
    local_nonpersistent_flags+=("--hard=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--scopes=")
    two_word_flags+=("--scopes")
    local_nonpersistent_flags+=("--scopes")
    local_nonpersistent_flags+=("--scopes=")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_role()
{
    last_command="kubectl_create_role"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--resource=")
    two_word_flags+=("--resource")
    local_nonpersistent_flags+=("--resource")
    local_nonpersistent_flags+=("--resource=")
    flags+=("--resource-name=")
    two_word_flags+=("--resource-name")
    local_nonpersistent_flags+=("--resource-name")
    local_nonpersistent_flags+=("--resource-name=")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--verb=")
    two_word_flags+=("--verb")
    local_nonpersistent_flags+=("--verb")
    local_nonpersistent_flags+=("--verb=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_rolebinding()
{
    last_command="kubectl_create_rolebinding"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--clusterrole=")
    two_word_flags+=("--clusterrole")
    local_nonpersistent_flags+=("--clusterrole")
    local_nonpersistent_flags+=("--clusterrole=")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--group=")
    two_word_flags+=("--group")
    local_nonpersistent_flags+=("--group")
    local_nonpersistent_flags+=("--group=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--role=")
    two_word_flags+=("--role")
    local_nonpersistent_flags+=("--role")
    local_nonpersistent_flags+=("--role=")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--serviceaccount=")
    two_word_flags+=("--serviceaccount")
    local_nonpersistent_flags+=("--serviceaccount")
    local_nonpersistent_flags+=("--serviceaccount=")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_secret_docker-registry()
{
    last_command="kubectl_create_secret_docker-registry"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--append-hash")
    local_nonpersistent_flags+=("--append-hash")
    flags+=("--docker-email=")
    two_word_flags+=("--docker-email")
    local_nonpersistent_flags+=("--docker-email")
    local_nonpersistent_flags+=("--docker-email=")
    flags+=("--docker-password=")
    two_word_flags+=("--docker-password")
    local_nonpersistent_flags+=("--docker-password")
    local_nonpersistent_flags+=("--docker-password=")
    flags+=("--docker-server=")
    two_word_flags+=("--docker-server")
    local_nonpersistent_flags+=("--docker-server")
    local_nonpersistent_flags+=("--docker-server=")
    flags+=("--docker-username=")
    two_word_flags+=("--docker-username")
    local_nonpersistent_flags+=("--docker-username")
    local_nonpersistent_flags+=("--docker-username=")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--from-file=")
    two_word_flags+=("--from-file")
    local_nonpersistent_flags+=("--from-file")
    local_nonpersistent_flags+=("--from-file=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_secret_generic()
{
    last_command="kubectl_create_secret_generic"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--append-hash")
    local_nonpersistent_flags+=("--append-hash")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--from-env-file=")
    two_word_flags+=("--from-env-file")
    local_nonpersistent_flags+=("--from-env-file")
    local_nonpersistent_flags+=("--from-env-file=")
    flags+=("--from-file=")
    two_word_flags+=("--from-file")
    local_nonpersistent_flags+=("--from-file")
    local_nonpersistent_flags+=("--from-file=")
    flags+=("--from-literal=")
    two_word_flags+=("--from-literal")
    local_nonpersistent_flags+=("--from-literal")
    local_nonpersistent_flags+=("--from-literal=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--type=")
    two_word_flags+=("--type")
    local_nonpersistent_flags+=("--type")
    local_nonpersistent_flags+=("--type=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_secret_tls()
{
    last_command="kubectl_create_secret_tls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--append-hash")
    local_nonpersistent_flags+=("--append-hash")
    flags+=("--cert=")
    two_word_flags+=("--cert")
    local_nonpersistent_flags+=("--cert")
    local_nonpersistent_flags+=("--cert=")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--key=")
    two_word_flags+=("--key")
    local_nonpersistent_flags+=("--key")
    local_nonpersistent_flags+=("--key=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_secret()
{
    last_command="kubectl_create_secret"

    command_aliases=()

    commands=()
    commands+=("docker-registry")
    commands+=("generic")
    commands+=("tls")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_service_clusterip()
{
    last_command="kubectl_create_service_clusterip"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--clusterip=")
    two_word_flags+=("--clusterip")
    local_nonpersistent_flags+=("--clusterip")
    local_nonpersistent_flags+=("--clusterip=")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--tcp=")
    two_word_flags+=("--tcp")
    local_nonpersistent_flags+=("--tcp")
    local_nonpersistent_flags+=("--tcp=")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_service_externalname()
{
    last_command="kubectl_create_service_externalname"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--external-name=")
    two_word_flags+=("--external-name")
    local_nonpersistent_flags+=("--external-name")
    local_nonpersistent_flags+=("--external-name=")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--tcp=")
    two_word_flags+=("--tcp")
    local_nonpersistent_flags+=("--tcp")
    local_nonpersistent_flags+=("--tcp=")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_flag+=("--external-name=")
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_service_loadbalancer()
{
    last_command="kubectl_create_service_loadbalancer"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--tcp=")
    two_word_flags+=("--tcp")
    local_nonpersistent_flags+=("--tcp")
    local_nonpersistent_flags+=("--tcp=")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_service_nodeport()
{
    last_command="kubectl_create_service_nodeport"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--node-port=")
    two_word_flags+=("--node-port")
    local_nonpersistent_flags+=("--node-port")
    local_nonpersistent_flags+=("--node-port=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--tcp=")
    two_word_flags+=("--tcp")
    local_nonpersistent_flags+=("--tcp")
    local_nonpersistent_flags+=("--tcp=")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_service()
{
    last_command="kubectl_create_service"

    command_aliases=()

    commands=()
    commands+=("clusterip")
    commands+=("externalname")
    commands+=("loadbalancer")
    commands+=("nodeport")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create_serviceaccount()
{
    last_command="kubectl_create_serviceaccount"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_create()
{
    last_command="kubectl_create"

    command_aliases=()

    commands=()
    commands+=("clusterrole")
    commands+=("clusterrolebinding")
    commands+=("configmap")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("cm")
        aliashash["cm"]="configmap"
    fi
    commands+=("cronjob")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("cj")
        aliashash["cj"]="cronjob"
    fi
    commands+=("deployment")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("deploy")
        aliashash["deploy"]="deployment"
    fi
    commands+=("ingress")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("ing")
        aliashash["ing"]="ingress"
    fi
    commands+=("job")
    commands+=("namespace")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("ns")
        aliashash["ns"]="namespace"
    fi
    commands+=("poddisruptionbudget")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("pdb")
        aliashash["pdb"]="poddisruptionbudget"
    fi
    commands+=("priorityclass")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("pc")
        aliashash["pc"]="priorityclass"
    fi
    commands+=("quota")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("resourcequota")
        aliashash["resourcequota"]="quota"
    fi
    commands+=("role")
    commands+=("rolebinding")
    commands+=("secret")
    commands+=("service")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("svc")
        aliashash["svc"]="service"
    fi
    commands+=("serviceaccount")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("sa")
        aliashash["sa"]="serviceaccount"
    fi

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--edit")
    local_nonpersistent_flags+=("--edit")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--raw=")
    two_word_flags+=("--raw")
    local_nonpersistent_flags+=("--raw")
    local_nonpersistent_flags+=("--raw=")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--windows-line-endings")
    local_nonpersistent_flags+=("--windows-line-endings")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_debug()
{
    last_command="kubectl_debug"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--arguments-only")
    local_nonpersistent_flags+=("--arguments-only")
    flags+=("--attach")
    local_nonpersistent_flags+=("--attach")
    flags+=("--container=")
    two_word_flags+=("--container")
    two_word_flags+=("-c")
    local_nonpersistent_flags+=("--container")
    local_nonpersistent_flags+=("--container=")
    local_nonpersistent_flags+=("-c")
    flags+=("--copy-to=")
    two_word_flags+=("--copy-to")
    local_nonpersistent_flags+=("--copy-to")
    local_nonpersistent_flags+=("--copy-to=")
    flags+=("--env=")
    two_word_flags+=("--env")
    local_nonpersistent_flags+=("--env")
    local_nonpersistent_flags+=("--env=")
    flags+=("--image=")
    two_word_flags+=("--image")
    local_nonpersistent_flags+=("--image")
    local_nonpersistent_flags+=("--image=")
    flags+=("--image-pull-policy=")
    two_word_flags+=("--image-pull-policy")
    local_nonpersistent_flags+=("--image-pull-policy")
    local_nonpersistent_flags+=("--image-pull-policy=")
    flags+=("--quiet")
    flags+=("-q")
    local_nonpersistent_flags+=("--quiet")
    local_nonpersistent_flags+=("-q")
    flags+=("--replace")
    local_nonpersistent_flags+=("--replace")
    flags+=("--same-node")
    local_nonpersistent_flags+=("--same-node")
    flags+=("--set-image=")
    two_word_flags+=("--set-image")
    local_nonpersistent_flags+=("--set-image")
    local_nonpersistent_flags+=("--set-image=")
    flags+=("--share-processes")
    local_nonpersistent_flags+=("--share-processes")
    flags+=("--stdin")
    flags+=("-i")
    local_nonpersistent_flags+=("--stdin")
    local_nonpersistent_flags+=("-i")
    flags+=("--target=")
    two_word_flags+=("--target")
    local_nonpersistent_flags+=("--target")
    local_nonpersistent_flags+=("--target=")
    flags+=("--tty")
    flags+=("-t")
    local_nonpersistent_flags+=("--tty")
    local_nonpersistent_flags+=("-t")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_delete()
{
    last_command="kubectl_delete"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--all-namespaces")
    flags+=("-A")
    local_nonpersistent_flags+=("--all-namespaces")
    local_nonpersistent_flags+=("-A")
    flags+=("--cascade")
    local_nonpersistent_flags+=("--cascade")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-selector=")
    two_word_flags+=("--field-selector")
    local_nonpersistent_flags+=("--field-selector")
    local_nonpersistent_flags+=("--field-selector=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--force")
    local_nonpersistent_flags+=("--force")
    flags+=("--grace-period=")
    two_word_flags+=("--grace-period")
    local_nonpersistent_flags+=("--grace-period")
    local_nonpersistent_flags+=("--grace-period=")
    flags+=("--ignore-not-found")
    local_nonpersistent_flags+=("--ignore-not-found")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--now")
    local_nonpersistent_flags+=("--now")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--raw=")
    two_word_flags+=("--raw")
    local_nonpersistent_flags+=("--raw")
    local_nonpersistent_flags+=("--raw=")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_describe()
{
    last_command="kubectl_describe"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    flags+=("-A")
    local_nonpersistent_flags+=("--all-namespaces")
    local_nonpersistent_flags+=("-A")
    flags+=("--chunk-size=")
    two_word_flags+=("--chunk-size")
    local_nonpersistent_flags+=("--chunk-size")
    local_nonpersistent_flags+=("--chunk-size=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--show-events")
    local_nonpersistent_flags+=("--show-events")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_diff()
{
    last_command="kubectl_diff"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--force-conflicts")
    local_nonpersistent_flags+=("--force-conflicts")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--server-side")
    local_nonpersistent_flags+=("--server-side")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_drain()
{
    last_command="kubectl_drain"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--chunk-size=")
    two_word_flags+=("--chunk-size")
    local_nonpersistent_flags+=("--chunk-size")
    local_nonpersistent_flags+=("--chunk-size=")
    flags+=("--delete-emptydir-data")
    local_nonpersistent_flags+=("--delete-emptydir-data")
    flags+=("--disable-eviction")
    local_nonpersistent_flags+=("--disable-eviction")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--force")
    local_nonpersistent_flags+=("--force")
    flags+=("--grace-period=")
    two_word_flags+=("--grace-period")
    local_nonpersistent_flags+=("--grace-period")
    local_nonpersistent_flags+=("--grace-period=")
    flags+=("--ignore-daemonsets")
    local_nonpersistent_flags+=("--ignore-daemonsets")
    flags+=("--ignore-errors")
    local_nonpersistent_flags+=("--ignore-errors")
    flags+=("--pod-selector=")
    two_word_flags+=("--pod-selector")
    local_nonpersistent_flags+=("--pod-selector")
    local_nonpersistent_flags+=("--pod-selector=")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--skip-wait-for-delete-timeout=")
    two_word_flags+=("--skip-wait-for-delete-timeout")
    local_nonpersistent_flags+=("--skip-wait-for-delete-timeout")
    local_nonpersistent_flags+=("--skip-wait-for-delete-timeout=")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_edit()
{
    last_command="kubectl_edit"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--output-patch")
    local_nonpersistent_flags+=("--output-patch")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--windows-line-endings")
    local_nonpersistent_flags+=("--windows-line-endings")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_exec()
{
    last_command="kubectl_exec"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--container=")
    two_word_flags+=("--container")
    two_word_flags+=("-c")
    local_nonpersistent_flags+=("--container")
    local_nonpersistent_flags+=("--container=")
    local_nonpersistent_flags+=("-c")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--pod-running-timeout=")
    two_word_flags+=("--pod-running-timeout")
    local_nonpersistent_flags+=("--pod-running-timeout")
    local_nonpersistent_flags+=("--pod-running-timeout=")
    flags+=("--quiet")
    flags+=("-q")
    local_nonpersistent_flags+=("--quiet")
    local_nonpersistent_flags+=("-q")
    flags+=("--stdin")
    flags+=("-i")
    local_nonpersistent_flags+=("--stdin")
    local_nonpersistent_flags+=("-i")
    flags+=("--tty")
    flags+=("-t")
    local_nonpersistent_flags+=("--tty")
    local_nonpersistent_flags+=("-t")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_explain()
{
    last_command="kubectl_explain"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-version=")
    two_word_flags+=("--api-version")
    local_nonpersistent_flags+=("--api-version")
    local_nonpersistent_flags+=("--api-version=")
    flags+=("--recursive")
    local_nonpersistent_flags+=("--recursive")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_expose()
{
    last_command="kubectl_expose"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--cluster-ip=")
    two_word_flags+=("--cluster-ip")
    local_nonpersistent_flags+=("--cluster-ip")
    local_nonpersistent_flags+=("--cluster-ip=")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--external-ip=")
    two_word_flags+=("--external-ip")
    local_nonpersistent_flags+=("--external-ip")
    local_nonpersistent_flags+=("--external-ip=")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--generator=")
    two_word_flags+=("--generator")
    local_nonpersistent_flags+=("--generator")
    local_nonpersistent_flags+=("--generator=")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--labels=")
    two_word_flags+=("--labels")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--labels")
    local_nonpersistent_flags+=("--labels=")
    local_nonpersistent_flags+=("-l")
    flags+=("--load-balancer-ip=")
    two_word_flags+=("--load-balancer-ip")
    local_nonpersistent_flags+=("--load-balancer-ip")
    local_nonpersistent_flags+=("--load-balancer-ip=")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--overrides=")
    two_word_flags+=("--overrides")
    local_nonpersistent_flags+=("--overrides")
    local_nonpersistent_flags+=("--overrides=")
    flags+=("--port=")
    two_word_flags+=("--port")
    local_nonpersistent_flags+=("--port")
    local_nonpersistent_flags+=("--port=")
    flags+=("--protocol=")
    two_word_flags+=("--protocol")
    local_nonpersistent_flags+=("--protocol")
    local_nonpersistent_flags+=("--protocol=")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    flags+=("--session-affinity=")
    two_word_flags+=("--session-affinity")
    local_nonpersistent_flags+=("--session-affinity")
    local_nonpersistent_flags+=("--session-affinity=")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--target-port=")
    two_word_flags+=("--target-port")
    local_nonpersistent_flags+=("--target-port")
    local_nonpersistent_flags+=("--target-port=")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--type=")
    two_word_flags+=("--type")
    local_nonpersistent_flags+=("--type")
    local_nonpersistent_flags+=("--type=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_get()
{
    last_command="kubectl_get"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    flags+=("-A")
    local_nonpersistent_flags+=("--all-namespaces")
    local_nonpersistent_flags+=("-A")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--chunk-size=")
    two_word_flags+=("--chunk-size")
    local_nonpersistent_flags+=("--chunk-size")
    local_nonpersistent_flags+=("--chunk-size=")
    flags+=("--field-selector=")
    two_word_flags+=("--field-selector")
    local_nonpersistent_flags+=("--field-selector")
    local_nonpersistent_flags+=("--field-selector=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--ignore-not-found")
    local_nonpersistent_flags+=("--ignore-not-found")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--label-columns=")
    two_word_flags+=("--label-columns")
    two_word_flags+=("-L")
    local_nonpersistent_flags+=("--label-columns")
    local_nonpersistent_flags+=("--label-columns=")
    local_nonpersistent_flags+=("-L")
    flags+=("--no-headers")
    local_nonpersistent_flags+=("--no-headers")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--output-watch-events")
    local_nonpersistent_flags+=("--output-watch-events")
    flags+=("--raw=")
    two_word_flags+=("--raw")
    local_nonpersistent_flags+=("--raw")
    local_nonpersistent_flags+=("--raw=")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--server-print")
    local_nonpersistent_flags+=("--server-print")
    flags+=("--show-kind")
    local_nonpersistent_flags+=("--show-kind")
    flags+=("--show-labels")
    local_nonpersistent_flags+=("--show-labels")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--sort-by=")
    two_word_flags+=("--sort-by")
    local_nonpersistent_flags+=("--sort-by")
    local_nonpersistent_flags+=("--sort-by=")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--watch")
    flags+=("-w")
    local_nonpersistent_flags+=("--watch")
    local_nonpersistent_flags+=("-w")
    flags+=("--watch-only")
    local_nonpersistent_flags+=("--watch-only")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_help()
{
    last_command="kubectl_help"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_kustomize()
{
    last_command="kubectl_kustomize"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--as-current-user")
    local_nonpersistent_flags+=("--as-current-user")
    flags+=("--enable-alpha-plugins")
    local_nonpersistent_flags+=("--enable-alpha-plugins")
    flags+=("--enable-helm")
    local_nonpersistent_flags+=("--enable-helm")
    flags+=("--enable-managedby-label")
    local_nonpersistent_flags+=("--enable-managedby-label")
    flags+=("--env=")
    two_word_flags+=("--env")
    two_word_flags+=("-e")
    local_nonpersistent_flags+=("--env")
    local_nonpersistent_flags+=("--env=")
    local_nonpersistent_flags+=("-e")
    flags+=("--helm-command=")
    two_word_flags+=("--helm-command")
    local_nonpersistent_flags+=("--helm-command")
    local_nonpersistent_flags+=("--helm-command=")
    flags+=("--load-restrictor=")
    two_word_flags+=("--load-restrictor")
    local_nonpersistent_flags+=("--load-restrictor")
    local_nonpersistent_flags+=("--load-restrictor=")
    flags+=("--mount=")
    two_word_flags+=("--mount")
    local_nonpersistent_flags+=("--mount")
    local_nonpersistent_flags+=("--mount=")
    flags+=("--network")
    local_nonpersistent_flags+=("--network")
    flags+=("--network-name=")
    two_word_flags+=("--network-name")
    local_nonpersistent_flags+=("--network-name")
    local_nonpersistent_flags+=("--network-name=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--reorder=")
    two_word_flags+=("--reorder")
    local_nonpersistent_flags+=("--reorder")
    local_nonpersistent_flags+=("--reorder=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_label()
{
    last_command="kubectl_label"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--all-namespaces")
    flags+=("-A")
    local_nonpersistent_flags+=("--all-namespaces")
    local_nonpersistent_flags+=("-A")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--field-selector=")
    two_word_flags+=("--field-selector")
    local_nonpersistent_flags+=("--field-selector")
    local_nonpersistent_flags+=("--field-selector=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--list")
    local_nonpersistent_flags+=("--list")
    flags+=("--local")
    local_nonpersistent_flags+=("--local")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--overwrite")
    local_nonpersistent_flags+=("--overwrite")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--resource-version=")
    two_word_flags+=("--resource-version")
    local_nonpersistent_flags+=("--resource-version")
    local_nonpersistent_flags+=("--resource-version=")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_logs()
{
    last_command="kubectl_logs"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-containers")
    local_nonpersistent_flags+=("--all-containers")
    flags+=("--container=")
    two_word_flags+=("--container")
    two_word_flags+=("-c")
    local_nonpersistent_flags+=("--container")
    local_nonpersistent_flags+=("--container=")
    local_nonpersistent_flags+=("-c")
    flags+=("--follow")
    flags+=("-f")
    local_nonpersistent_flags+=("--follow")
    local_nonpersistent_flags+=("-f")
    flags+=("--ignore-errors")
    local_nonpersistent_flags+=("--ignore-errors")
    flags+=("--insecure-skip-tls-verify-backend")
    local_nonpersistent_flags+=("--insecure-skip-tls-verify-backend")
    flags+=("--limit-bytes=")
    two_word_flags+=("--limit-bytes")
    local_nonpersistent_flags+=("--limit-bytes")
    local_nonpersistent_flags+=("--limit-bytes=")
    flags+=("--max-log-requests=")
    two_word_flags+=("--max-log-requests")
    local_nonpersistent_flags+=("--max-log-requests")
    local_nonpersistent_flags+=("--max-log-requests=")
    flags+=("--pod-running-timeout=")
    two_word_flags+=("--pod-running-timeout")
    local_nonpersistent_flags+=("--pod-running-timeout")
    local_nonpersistent_flags+=("--pod-running-timeout=")
    flags+=("--prefix")
    local_nonpersistent_flags+=("--prefix")
    flags+=("--previous")
    flags+=("-p")
    local_nonpersistent_flags+=("--previous")
    local_nonpersistent_flags+=("-p")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--since=")
    two_word_flags+=("--since")
    local_nonpersistent_flags+=("--since")
    local_nonpersistent_flags+=("--since=")
    flags+=("--since-time=")
    two_word_flags+=("--since-time")
    local_nonpersistent_flags+=("--since-time")
    local_nonpersistent_flags+=("--since-time=")
    flags+=("--tail=")
    two_word_flags+=("--tail")
    local_nonpersistent_flags+=("--tail")
    local_nonpersistent_flags+=("--tail=")
    flags+=("--timestamps")
    local_nonpersistent_flags+=("--timestamps")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_options()
{
    last_command="kubectl_options"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_patch()
{
    last_command="kubectl_patch"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--local")
    local_nonpersistent_flags+=("--local")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--patch=")
    two_word_flags+=("--patch")
    two_word_flags+=("-p")
    local_nonpersistent_flags+=("--patch")
    local_nonpersistent_flags+=("--patch=")
    local_nonpersistent_flags+=("-p")
    flags+=("--patch-file=")
    two_word_flags+=("--patch-file")
    local_nonpersistent_flags+=("--patch-file")
    local_nonpersistent_flags+=("--patch-file=")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--type=")
    two_word_flags+=("--type")
    local_nonpersistent_flags+=("--type")
    local_nonpersistent_flags+=("--type=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_plugin_list()
{
    last_command="kubectl_plugin_list"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--name-only")
    local_nonpersistent_flags+=("--name-only")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_plugin()
{
    last_command="kubectl_plugin"

    command_aliases=()

    commands=()
    commands+=("list")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_port-forward()
{
    last_command="kubectl_port-forward"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--address=")
    two_word_flags+=("--address")
    local_nonpersistent_flags+=("--address")
    local_nonpersistent_flags+=("--address=")
    flags+=("--pod-running-timeout=")
    two_word_flags+=("--pod-running-timeout")
    local_nonpersistent_flags+=("--pod-running-timeout")
    local_nonpersistent_flags+=("--pod-running-timeout=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_proxy()
{
    last_command="kubectl_proxy"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--accept-hosts=")
    two_word_flags+=("--accept-hosts")
    local_nonpersistent_flags+=("--accept-hosts")
    local_nonpersistent_flags+=("--accept-hosts=")
    flags+=("--accept-paths=")
    two_word_flags+=("--accept-paths")
    local_nonpersistent_flags+=("--accept-paths")
    local_nonpersistent_flags+=("--accept-paths=")
    flags+=("--address=")
    two_word_flags+=("--address")
    local_nonpersistent_flags+=("--address")
    local_nonpersistent_flags+=("--address=")
    flags+=("--api-prefix=")
    two_word_flags+=("--api-prefix")
    local_nonpersistent_flags+=("--api-prefix")
    local_nonpersistent_flags+=("--api-prefix=")
    flags+=("--disable-filter")
    local_nonpersistent_flags+=("--disable-filter")
    flags+=("--keepalive=")
    two_word_flags+=("--keepalive")
    local_nonpersistent_flags+=("--keepalive")
    local_nonpersistent_flags+=("--keepalive=")
    flags+=("--port=")
    two_word_flags+=("--port")
    two_word_flags+=("-p")
    local_nonpersistent_flags+=("--port")
    local_nonpersistent_flags+=("--port=")
    local_nonpersistent_flags+=("-p")
    flags+=("--reject-methods=")
    two_word_flags+=("--reject-methods")
    local_nonpersistent_flags+=("--reject-methods")
    local_nonpersistent_flags+=("--reject-methods=")
    flags+=("--reject-paths=")
    two_word_flags+=("--reject-paths")
    local_nonpersistent_flags+=("--reject-paths")
    local_nonpersistent_flags+=("--reject-paths=")
    flags+=("--unix-socket=")
    two_word_flags+=("--unix-socket")
    two_word_flags+=("-u")
    local_nonpersistent_flags+=("--unix-socket")
    local_nonpersistent_flags+=("--unix-socket=")
    local_nonpersistent_flags+=("-u")
    flags+=("--www=")
    two_word_flags+=("--www")
    two_word_flags+=("-w")
    local_nonpersistent_flags+=("--www")
    local_nonpersistent_flags+=("--www=")
    local_nonpersistent_flags+=("-w")
    flags+=("--www-prefix=")
    two_word_flags+=("--www-prefix")
    two_word_flags+=("-P")
    local_nonpersistent_flags+=("--www-prefix")
    local_nonpersistent_flags+=("--www-prefix=")
    local_nonpersistent_flags+=("-P")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_replace()
{
    last_command="kubectl_replace"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--cascade")
    local_nonpersistent_flags+=("--cascade")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--force")
    local_nonpersistent_flags+=("--force")
    flags+=("--grace-period=")
    two_word_flags+=("--grace-period")
    local_nonpersistent_flags+=("--grace-period")
    local_nonpersistent_flags+=("--grace-period=")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--raw=")
    two_word_flags+=("--raw")
    local_nonpersistent_flags+=("--raw")
    local_nonpersistent_flags+=("--raw=")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_rollout_history()
{
    last_command="kubectl_rollout_history"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--revision=")
    two_word_flags+=("--revision")
    local_nonpersistent_flags+=("--revision")
    local_nonpersistent_flags+=("--revision=")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_rollout_pause()
{
    last_command="kubectl_rollout_pause"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_rollout_restart()
{
    last_command="kubectl_rollout_restart"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_rollout_resume()
{
    last_command="kubectl_rollout_resume"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_rollout_status()
{
    last_command="kubectl_rollout_status"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--revision=")
    two_word_flags+=("--revision")
    local_nonpersistent_flags+=("--revision")
    local_nonpersistent_flags+=("--revision=")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--watch")
    flags+=("-w")
    local_nonpersistent_flags+=("--watch")
    local_nonpersistent_flags+=("-w")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_rollout_undo()
{
    last_command="kubectl_rollout_undo"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--to-revision=")
    two_word_flags+=("--to-revision")
    local_nonpersistent_flags+=("--to-revision")
    local_nonpersistent_flags+=("--to-revision=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_rollout()
{
    last_command="kubectl_rollout"

    command_aliases=()

    commands=()
    commands+=("history")
    commands+=("pause")
    commands+=("restart")
    commands+=("resume")
    commands+=("status")
    commands+=("undo")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_run()
{
    last_command="kubectl_run"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--annotations=")
    two_word_flags+=("--annotations")
    local_nonpersistent_flags+=("--annotations")
    local_nonpersistent_flags+=("--annotations=")
    flags+=("--attach")
    local_nonpersistent_flags+=("--attach")
    flags+=("--cascade")
    local_nonpersistent_flags+=("--cascade")
    flags+=("--command")
    local_nonpersistent_flags+=("--command")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--env=")
    two_word_flags+=("--env")
    local_nonpersistent_flags+=("--env")
    local_nonpersistent_flags+=("--env=")
    flags+=("--expose")
    local_nonpersistent_flags+=("--expose")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--force")
    local_nonpersistent_flags+=("--force")
    flags+=("--grace-period=")
    two_word_flags+=("--grace-period")
    local_nonpersistent_flags+=("--grace-period")
    local_nonpersistent_flags+=("--grace-period=")
    flags+=("--image=")
    two_word_flags+=("--image")
    local_nonpersistent_flags+=("--image")
    local_nonpersistent_flags+=("--image=")
    flags+=("--image-pull-policy=")
    two_word_flags+=("--image-pull-policy")
    local_nonpersistent_flags+=("--image-pull-policy")
    local_nonpersistent_flags+=("--image-pull-policy=")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--labels=")
    two_word_flags+=("--labels")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--labels")
    local_nonpersistent_flags+=("--labels=")
    local_nonpersistent_flags+=("-l")
    flags+=("--leave-stdin-open")
    local_nonpersistent_flags+=("--leave-stdin-open")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--overrides=")
    two_word_flags+=("--overrides")
    local_nonpersistent_flags+=("--overrides")
    local_nonpersistent_flags+=("--overrides=")
    flags+=("--pod-running-timeout=")
    two_word_flags+=("--pod-running-timeout")
    local_nonpersistent_flags+=("--pod-running-timeout")
    local_nonpersistent_flags+=("--pod-running-timeout=")
    flags+=("--port=")
    two_word_flags+=("--port")
    local_nonpersistent_flags+=("--port")
    local_nonpersistent_flags+=("--port=")
    flags+=("--privileged")
    local_nonpersistent_flags+=("--privileged")
    flags+=("--quiet")
    flags+=("-q")
    local_nonpersistent_flags+=("--quiet")
    local_nonpersistent_flags+=("-q")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--restart=")
    two_word_flags+=("--restart")
    local_nonpersistent_flags+=("--restart")
    local_nonpersistent_flags+=("--restart=")
    flags+=("--rm")
    local_nonpersistent_flags+=("--rm")
    flags+=("--save-config")
    local_nonpersistent_flags+=("--save-config")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--stdin")
    flags+=("-i")
    local_nonpersistent_flags+=("--stdin")
    local_nonpersistent_flags+=("-i")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--tty")
    flags+=("-t")
    local_nonpersistent_flags+=("--tty")
    local_nonpersistent_flags+=("-t")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_flag+=("--image=")
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_scale()
{
    last_command="kubectl_scale"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--current-replicas=")
    two_word_flags+=("--current-replicas")
    local_nonpersistent_flags+=("--current-replicas")
    local_nonpersistent_flags+=("--current-replicas=")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--replicas=")
    two_word_flags+=("--replicas")
    local_nonpersistent_flags+=("--replicas")
    local_nonpersistent_flags+=("--replicas=")
    flags+=("--resource-version=")
    two_word_flags+=("--resource-version")
    local_nonpersistent_flags+=("--resource-version")
    local_nonpersistent_flags+=("--resource-version=")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_flag+=("--replicas=")
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_set_env()
{
    last_command="kubectl_set_env"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--containers=")
    two_word_flags+=("--containers")
    two_word_flags+=("-c")
    local_nonpersistent_flags+=("--containers")
    local_nonpersistent_flags+=("--containers=")
    local_nonpersistent_flags+=("-c")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--env=")
    two_word_flags+=("--env")
    two_word_flags+=("-e")
    local_nonpersistent_flags+=("--env")
    local_nonpersistent_flags+=("--env=")
    local_nonpersistent_flags+=("-e")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--from=")
    two_word_flags+=("--from")
    local_nonpersistent_flags+=("--from")
    local_nonpersistent_flags+=("--from=")
    flags+=("--keys=")
    two_word_flags+=("--keys")
    local_nonpersistent_flags+=("--keys")
    local_nonpersistent_flags+=("--keys=")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--list")
    local_nonpersistent_flags+=("--list")
    flags+=("--local")
    local_nonpersistent_flags+=("--local")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--overwrite")
    local_nonpersistent_flags+=("--overwrite")
    flags+=("--prefix=")
    two_word_flags+=("--prefix")
    local_nonpersistent_flags+=("--prefix")
    local_nonpersistent_flags+=("--prefix=")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--resolve")
    local_nonpersistent_flags+=("--resolve")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_set_image()
{
    last_command="kubectl_set_image"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--local")
    local_nonpersistent_flags+=("--local")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_set_resources()
{
    last_command="kubectl_set_resources"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--containers=")
    two_word_flags+=("--containers")
    two_word_flags+=("-c")
    local_nonpersistent_flags+=("--containers")
    local_nonpersistent_flags+=("--containers=")
    local_nonpersistent_flags+=("-c")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--limits=")
    two_word_flags+=("--limits")
    local_nonpersistent_flags+=("--limits")
    local_nonpersistent_flags+=("--limits=")
    flags+=("--local")
    local_nonpersistent_flags+=("--local")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--requests=")
    two_word_flags+=("--requests")
    local_nonpersistent_flags+=("--requests")
    local_nonpersistent_flags+=("--requests=")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_set_selector()
{
    last_command="kubectl_set_selector"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--local")
    local_nonpersistent_flags+=("--local")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--resource-version=")
    two_word_flags+=("--resource-version")
    local_nonpersistent_flags+=("--resource-version")
    local_nonpersistent_flags+=("--resource-version=")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_set_serviceaccount()
{
    last_command="kubectl_set_serviceaccount"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--local")
    local_nonpersistent_flags+=("--local")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_set_subject()
{
    last_command="kubectl_set_subject"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--group=")
    two_word_flags+=("--group")
    local_nonpersistent_flags+=("--group")
    local_nonpersistent_flags+=("--group=")
    flags+=("--kustomize=")
    two_word_flags+=("--kustomize")
    two_word_flags+=("-k")
    local_nonpersistent_flags+=("--kustomize")
    local_nonpersistent_flags+=("--kustomize=")
    local_nonpersistent_flags+=("-k")
    flags+=("--local")
    local_nonpersistent_flags+=("--local")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--serviceaccount=")
    two_word_flags+=("--serviceaccount")
    local_nonpersistent_flags+=("--serviceaccount")
    local_nonpersistent_flags+=("--serviceaccount=")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_set()
{
    last_command="kubectl_set"

    command_aliases=()

    commands=()
    commands+=("env")
    commands+=("image")
    commands+=("resources")
    commands+=("selector")
    commands+=("serviceaccount")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("sa")
        aliashash["sa"]="serviceaccount"
    fi
    commands+=("subject")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_taint()
{
    last_command="kubectl_taint"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--field-manager=")
    two_word_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager")
    local_nonpersistent_flags+=("--field-manager=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--overwrite")
    local_nonpersistent_flags+=("--overwrite")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_top_node()
{
    last_command="kubectl_top_node"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--no-headers")
    local_nonpersistent_flags+=("--no-headers")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--sort-by=")
    two_word_flags+=("--sort-by")
    local_nonpersistent_flags+=("--sort-by")
    local_nonpersistent_flags+=("--sort-by=")
    flags+=("--use-protocol-buffers")
    local_nonpersistent_flags+=("--use-protocol-buffers")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_top_pod()
{
    last_command="kubectl_top_pod"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    flags+=("-A")
    local_nonpersistent_flags+=("--all-namespaces")
    local_nonpersistent_flags+=("-A")
    flags+=("--containers")
    local_nonpersistent_flags+=("--containers")
    flags+=("--field-selector=")
    two_word_flags+=("--field-selector")
    local_nonpersistent_flags+=("--field-selector")
    local_nonpersistent_flags+=("--field-selector=")
    flags+=("--no-headers")
    local_nonpersistent_flags+=("--no-headers")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--sort-by=")
    two_word_flags+=("--sort-by")
    local_nonpersistent_flags+=("--sort-by")
    local_nonpersistent_flags+=("--sort-by=")
    flags+=("--use-protocol-buffers")
    local_nonpersistent_flags+=("--use-protocol-buffers")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_top()
{
    last_command="kubectl_top"

    command_aliases=()

    commands=()
    commands+=("node")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("no")
        aliashash["no"]="node"
        command_aliases+=("nodes")
        aliashash["nodes"]="node"
    fi
    commands+=("pod")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("po")
        aliashash["po"]="pod"
        command_aliases+=("pods")
        aliashash["pods"]="pod"
    fi

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_uncordon()
{
    last_command="kubectl_uncordon"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_kubectl_version()
{
    last_command="kubectl_version"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--client")
    local_nonpersistent_flags+=("--client")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--short")
    local_nonpersistent_flags+=("--short")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_wait()
{
    last_command="kubectl_wait"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--all-namespaces")
    flags+=("-A")
    local_nonpersistent_flags+=("--all-namespaces")
    local_nonpersistent_flags+=("-A")
    flags+=("--allow-missing-template-keys")
    local_nonpersistent_flags+=("--allow-missing-template-keys")
    flags+=("--field-selector=")
    two_word_flags+=("--field-selector")
    local_nonpersistent_flags+=("--field-selector")
    local_nonpersistent_flags+=("--field-selector=")
    flags+=("--filename=")
    two_word_flags+=("--filename")
    flags_with_completion+=("--filename")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    two_word_flags+=("-f")
    flags_with_completion+=("-f")
    flags_completion+=("__kubectl_handle_filename_extension_flag json|yaml|yml")
    local_nonpersistent_flags+=("--filename")
    local_nonpersistent_flags+=("--filename=")
    local_nonpersistent_flags+=("-f")
    flags+=("--for=")
    two_word_flags+=("--for")
    local_nonpersistent_flags+=("--for")
    local_nonpersistent_flags+=("--for=")
    flags+=("--local")
    local_nonpersistent_flags+=("--local")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--recursive")
    flags+=("-R")
    local_nonpersistent_flags+=("--recursive")
    local_nonpersistent_flags+=("-R")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--show-managed-fields")
    local_nonpersistent_flags+=("--show-managed-fields")
    flags+=("--template=")
    two_word_flags+=("--template")
    flags_with_completion+=("--template")
    flags_completion+=("_filedir")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_kubectl_root_command()
{
    last_command="kubectl"

    command_aliases=()

    commands=()
    commands+=("annotate")
    commands+=("api-resources")
    commands+=("api-versions")
    commands+=("apply")
    commands+=("attach")
    commands+=("auth")
    commands+=("autoscale")
    commands+=("certificate")
    commands+=("cluster-info")
    commands+=("completion")
    commands+=("config")
    commands+=("cordon")
    commands+=("cp")
    commands+=("create")
    commands+=("debug")
    commands+=("delete")
    commands+=("describe")
    commands+=("diff")
    commands+=("drain")
    commands+=("edit")
    commands+=("exec")
    commands+=("explain")
    commands+=("expose")
    commands+=("get")
    commands+=("help")
    commands+=("kustomize")
    commands+=("label")
    commands+=("logs")
    commands+=("options")
    commands+=("patch")
    commands+=("plugin")
    commands+=("port-forward")
    commands+=("proxy")
    commands+=("replace")
    commands+=("rollout")
    commands+=("run")
    commands+=("scale")
    commands+=("set")
    commands+=("taint")
    commands+=("top")
    commands+=("uncordon")
    commands+=("version")
    commands+=("wait")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--one-output")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__kubectl_handle_go_custom_completion")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

__start_kubectl()
{
    local cur prev words cword
    declare -A flaghash 2>/dev/null || :
    declare -A aliashash 2>/dev/null || :
    if declare -F _init_completion >/dev/null 2>&1; then
        _init_completion -s || return
    else
        __kubectl_init_completion -n "=" || return
    fi

    local c=0
    local flags=()
    local two_word_flags=()
    local local_nonpersistent_flags=()
    local flags_with_completion=()
    local flags_completion=()
    local commands=("kubectl")
    local must_have_one_flag=()
    local must_have_one_noun=()
    local has_completion_function
    local last_command
    local nouns=()

    __kubectl_handle_word
}

if [[ $(type -t compopt) = "builtin" ]]; then
    complete -o default -F __start_kubectl kubectl
else
    complete -o default -o nospace -F __start_kubectl kubectl
fi

# ex: ts=4 sw=4 et filetype=sh

#
# bash completion for helm
#

# bash completion for helm                                 -*- shell-script -*-

__helm_debug()
{
    if [[ -n ${BASH_COMP_DEBUG_FILE} ]]; then
        echo "$*" >> "${BASH_COMP_DEBUG_FILE}"
    fi
}

# Homebrew on Macs have version 1.3 of bash-completion which doesn't include
# _init_completion. This is a very minimal version of that function.
__helm_init_completion()
{
    COMPREPLY=()
    _get_comp_words_by_ref "$@" cur prev words cword
}

__helm_index_of_word()
{
    local w word=$1
    shift
    index=0
    for w in "$@"; do
        [[ $w = "$word" ]] && return
        index=$((index+1))
    done
    index=-1
}

__helm_contains_word()
{
    local w word=$1; shift
    for w in "$@"; do
        [[ $w = "$word" ]] && return
    done
    return 1
}

__helm_handle_go_custom_completion()
{
    __helm_debug "${FUNCNAME[0]}: cur is ${cur}, words[*] is ${words[*]}, #words[@] is ${#words[@]}"

    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16

    local out requestComp lastParam lastChar comp directive args

    # Prepare the command to request completions for the program.
    # Calling ${words[0]} instead of directly helm allows to handle aliases
    args=("${words[@]:1}")
    requestComp="${words[0]} __completeNoDesc ${args[*]}"

    lastParam=${words[$((${#words[@]}-1))]}
    lastChar=${lastParam:$((${#lastParam}-1)):1}
    __helm_debug "${FUNCNAME[0]}: lastParam ${lastParam}, lastChar ${lastChar}"

    if [ -z "${cur}" ] && [ "${lastChar}" != "=" ]; then
        # If the last parameter is complete (there is a space following it)
        # We add an extra empty parameter so we can indicate this to the go method.
        __helm_debug "${FUNCNAME[0]}: Adding extra empty parameter"
        requestComp="${requestComp} \"\""
    fi

    __helm_debug "${FUNCNAME[0]}: calling ${requestComp}"
    # Use eval to handle any environment variables and such
    out=$(eval "${requestComp}" 2>/dev/null)

    # Extract the directive integer at the very end of the output following a colon (:)
    directive=${out##*:}
    # Remove the directive
    out=${out%:*}
    if [ "${directive}" = "${out}" ]; then
        # There is not directive specified
        directive=0
    fi
    __helm_debug "${FUNCNAME[0]}: the completion directive is: ${directive}"
    __helm_debug "${FUNCNAME[0]}: the completions are: ${out[*]}"

    if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
        # Error code.  No completion.
        __helm_debug "${FUNCNAME[0]}: received error from custom completion go code"
        return
    else
        if [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __helm_debug "${FUNCNAME[0]}: activating no space"
                compopt -o nospace
            fi
        fi
        if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __helm_debug "${FUNCNAME[0]}: activating no file completion"
                compopt +o default
            fi
        fi
    fi

    if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
        # File extension filtering
        local fullFilter filter filteringCmd
        # Do not use quotes around the $out variable or else newline
        # characters will be kept.
        for filter in ${out[*]}; do
            fullFilter+="$filter|"
        done

        filteringCmd="_filedir $fullFilter"
        __helm_debug "File filtering command: $filteringCmd"
        $filteringCmd
    elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
        # File completion for directories only
        local subDir
        # Use printf to strip any trailing newline
        subdir=$(printf "%s" "${out[0]}")
        if [ -n "$subdir" ]; then
            __helm_debug "Listing directories in $subdir"
            __helm_handle_subdirs_in_dir_flag "$subdir"
        else
            __helm_debug "Listing directories in ."
            _filedir -d
        fi
    else
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${out[*]}" -- "$cur")
    fi
}

__helm_handle_reply()
{
    __helm_debug "${FUNCNAME[0]}"
    local comp
    case $cur in
        -*)
            if [[ $(type -t compopt) = "builtin" ]]; then
                compopt -o nospace
            fi
            local allflags
            if [ ${#must_have_one_flag[@]} -ne 0 ]; then
                allflags=("${must_have_one_flag[@]}")
            else
                allflags=("${flags[*]} ${two_word_flags[*]}")
            fi
            while IFS='' read -r comp; do
                COMPREPLY+=("$comp")
            done < <(compgen -W "${allflags[*]}" -- "$cur")
            if [[ $(type -t compopt) = "builtin" ]]; then
                [[ "${COMPREPLY[0]}" == *= ]] || compopt +o nospace
            fi

            # complete after --flag=abc
            if [[ $cur == *=* ]]; then
                if [[ $(type -t compopt) = "builtin" ]]; then
                    compopt +o nospace
                fi

                local index flag
                flag="${cur%=*}"
                __helm_index_of_word "${flag}" "${flags_with_completion[@]}"
                COMPREPLY=()
                if [[ ${index} -ge 0 ]]; then
                    PREFIX=""
                    cur="${cur#*=}"
                    ${flags_completion[${index}]}
                    if [ -n "${ZSH_VERSION}" ]; then
                        # zsh completion needs --flag= prefix
                        eval "COMPREPLY=( \"\${COMPREPLY[@]/#/${flag}=}\" )"
                    fi
                fi
            fi
            return 0;
            ;;
    esac

    # check if we are handling a flag with special work handling
    local index
    __helm_index_of_word "${prev}" "${flags_with_completion[@]}"
    if [[ ${index} -ge 0 ]]; then
        ${flags_completion[${index}]}
        return
    fi

    # we are parsing a flag and don't have a special handler, no completion
    if [[ ${cur} != "${words[cword]}" ]]; then
        return
    fi

    local completions
    completions=("${commands[@]}")
    if [[ ${#must_have_one_noun[@]} -ne 0 ]]; then
        completions+=("${must_have_one_noun[@]}")
    elif [[ -n "${has_completion_function}" ]]; then
        # if a go completion function is provided, defer to that function
        __helm_handle_go_custom_completion
    fi
    if [[ ${#must_have_one_flag[@]} -ne 0 ]]; then
        completions+=("${must_have_one_flag[@]}")
    fi
    while IFS='' read -r comp; do
        COMPREPLY+=("$comp")
    done < <(compgen -W "${completions[*]}" -- "$cur")

    if [[ ${#COMPREPLY[@]} -eq 0 && ${#noun_aliases[@]} -gt 0 && ${#must_have_one_noun[@]} -ne 0 ]]; then
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${noun_aliases[*]}" -- "$cur")
    fi

    if [[ ${#COMPREPLY[@]} -eq 0 ]]; then
		if declare -F __helm_custom_func >/dev/null; then
			# try command name qualified custom func
			__helm_custom_func
		else
			# otherwise fall back to unqualified for compatibility
			declare -F __custom_func >/dev/null && __custom_func
		fi
    fi

    # available in bash-completion >= 2, not always present on macOS
    if declare -F __ltrim_colon_completions >/dev/null; then
        __ltrim_colon_completions "$cur"
    fi

    # If there is only 1 completion and it is a flag with an = it will be completed
    # but we don't want a space after the =
    if [[ "${#COMPREPLY[@]}" -eq "1" ]] && [[ $(type -t compopt) = "builtin" ]] && [[ "${COMPREPLY[0]}" == --*= ]]; then
       compopt -o nospace
    fi
}

# The arguments should be in the form "ext1|ext2|extn"
__helm_handle_filename_extension_flag()
{
    local ext="$1"
    _filedir "@(${ext})"
}

__helm_handle_subdirs_in_dir_flag()
{
    local dir="$1"
    pushd "${dir}" >/dev/null 2>&1 && _filedir -d && popd >/dev/null 2>&1 || return
}

__helm_handle_flag()
{
    __helm_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    # if a command required a flag, and we found it, unset must_have_one_flag()
    local flagname=${words[c]}
    local flagvalue
    # if the word contained an =
    if [[ ${words[c]} == *"="* ]]; then
        flagvalue=${flagname#*=} # take in as flagvalue after the =
        flagname=${flagname%=*} # strip everything after the =
        flagname="${flagname}=" # but put the = back
    fi
    __helm_debug "${FUNCNAME[0]}: looking for ${flagname}"
    if __helm_contains_word "${flagname}" "${must_have_one_flag[@]}"; then
        must_have_one_flag=()
    fi

    # if you set a flag which only applies to this command, don't show subcommands
    if __helm_contains_word "${flagname}" "${local_nonpersistent_flags[@]}"; then
      commands=()
    fi

    # keep flag value with flagname as flaghash
    # flaghash variable is an associative array which is only supported in bash > 3.
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        if [ -n "${flagvalue}" ] ; then
            flaghash[${flagname}]=${flagvalue}
        elif [ -n "${words[ $((c+1)) ]}" ] ; then
            flaghash[${flagname}]=${words[ $((c+1)) ]}
        else
            flaghash[${flagname}]="true" # pad "true" for bool flag
        fi
    fi

    # skip the argument to a two word flag
    if [[ ${words[c]} != *"="* ]] && __helm_contains_word "${words[c]}" "${two_word_flags[@]}"; then
			  __helm_debug "${FUNCNAME[0]}: found a flag ${words[c]}, skip the next argument"
        c=$((c+1))
        # if we are looking for a flags value, don't show commands
        if [[ $c -eq $cword ]]; then
            commands=()
        fi
    fi

    c=$((c+1))

}

__helm_handle_noun()
{
    __helm_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    if __helm_contains_word "${words[c]}" "${must_have_one_noun[@]}"; then
        must_have_one_noun=()
    elif __helm_contains_word "${words[c]}" "${noun_aliases[@]}"; then
        must_have_one_noun=()
    fi

    nouns+=("${words[c]}")
    c=$((c+1))
}

__helm_handle_command()
{
    __helm_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    local next_command
    if [[ -n ${last_command} ]]; then
        next_command="_${last_command}_${words[c]//:/__}"
    else
        if [[ $c -eq 0 ]]; then
            next_command="_helm_root_command"
        else
            next_command="_${words[c]//:/__}"
        fi
    fi
    c=$((c+1))
    __helm_debug "${FUNCNAME[0]}: looking for ${next_command}"
    declare -F "$next_command" >/dev/null && $next_command
}

__helm_handle_word()
{
    if [[ $c -ge $cword ]]; then
        __helm_handle_reply
        return
    fi
    __helm_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
    if [[ "${words[c]}" == -* ]]; then
        __helm_handle_flag
    elif __helm_contains_word "${words[c]}" "${commands[@]}"; then
        __helm_handle_command
    elif [[ $c -eq 0 ]]; then
        __helm_handle_command
    elif __helm_contains_word "${words[c]}" "${command_aliases[@]}"; then
        # aliashash variable is an associative array which is only supported in bash > 3.
        if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
            words[c]=${aliashash[${words[c]}]}
            __helm_handle_command
        else
            __helm_handle_noun
        fi
    else
        __helm_handle_noun
    fi
    __helm_handle_word
}

_helm_completion_bash()
{
    last_command="helm_completion_bash"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--help")
    flags+=("-h")
    local_nonpersistent_flags+=("--help")
    local_nonpersistent_flags+=("-h")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_completion_fish()
{
    last_command="helm_completion_fish"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--no-descriptions")
    local_nonpersistent_flags+=("--no-descriptions")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_completion_zsh()
{
    last_command="helm_completion_zsh"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--no-descriptions")
    local_nonpersistent_flags+=("--no-descriptions")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_completion()
{
    last_command="helm_completion"

    command_aliases=()

    commands=()
    commands+=("bash")
    commands+=("fish")
    commands+=("zsh")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_create()
{
    last_command="helm_create"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--starter=")
    two_word_flags+=("--starter")
    two_word_flags+=("-p")
    local_nonpersistent_flags+=("--starter")
    local_nonpersistent_flags+=("--starter=")
    local_nonpersistent_flags+=("-p")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_dependency_build()
{
    last_command="helm_dependency_build"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--keyring=")
    two_word_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring=")
    flags+=("--skip-refresh")
    local_nonpersistent_flags+=("--skip-refresh")
    flags+=("--verify")
    local_nonpersistent_flags+=("--verify")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_dependency_list()
{
    last_command="helm_dependency_list"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_dependency_update()
{
    last_command="helm_dependency_update"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--keyring=")
    two_word_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring=")
    flags+=("--skip-refresh")
    local_nonpersistent_flags+=("--skip-refresh")
    flags+=("--verify")
    local_nonpersistent_flags+=("--verify")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_dependency()
{
    last_command="helm_dependency"

    command_aliases=()

    commands=()
    commands+=("build")
    commands+=("list")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("ls")
        aliashash["ls"]="list"
    fi
    commands+=("update")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("up")
        aliashash["up"]="update"
    fi

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_env()
{
    last_command="helm_env"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_get_all()
{
    last_command="helm_get_all"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--revision=")
    two_word_flags+=("--revision")
    flags_with_completion+=("--revision")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--revision")
    local_nonpersistent_flags+=("--revision=")
    flags+=("--template=")
    two_word_flags+=("--template")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_get_hooks()
{
    last_command="helm_get_hooks"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--revision=")
    two_word_flags+=("--revision")
    flags_with_completion+=("--revision")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--revision")
    local_nonpersistent_flags+=("--revision=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_get_manifest()
{
    last_command="helm_get_manifest"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--revision=")
    two_word_flags+=("--revision")
    flags_with_completion+=("--revision")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--revision")
    local_nonpersistent_flags+=("--revision=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_get_notes()
{
    last_command="helm_get_notes"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--revision=")
    two_word_flags+=("--revision")
    flags_with_completion+=("--revision")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--revision")
    local_nonpersistent_flags+=("--revision=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_get_values()
{
    last_command="helm_get_values"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    flags+=("-a")
    local_nonpersistent_flags+=("--all")
    local_nonpersistent_flags+=("-a")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--revision=")
    two_word_flags+=("--revision")
    flags_with_completion+=("--revision")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--revision")
    local_nonpersistent_flags+=("--revision=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_get()
{
    last_command="helm_get"

    command_aliases=()

    commands=()
    commands+=("all")
    commands+=("hooks")
    commands+=("manifest")
    commands+=("notes")
    commands+=("values")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_help()
{
    last_command="helm_help"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_history()
{
    last_command="helm_history"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--max=")
    two_word_flags+=("--max")
    local_nonpersistent_flags+=("--max")
    local_nonpersistent_flags+=("--max=")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_install()
{
    last_command="helm_install"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--atomic")
    local_nonpersistent_flags+=("--atomic")
    flags+=("--ca-file=")
    two_word_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file=")
    flags+=("--cert-file=")
    two_word_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file=")
    flags+=("--create-namespace")
    local_nonpersistent_flags+=("--create-namespace")
    flags+=("--dependency-update")
    local_nonpersistent_flags+=("--dependency-update")
    flags+=("--description=")
    two_word_flags+=("--description")
    local_nonpersistent_flags+=("--description")
    local_nonpersistent_flags+=("--description=")
    flags+=("--devel")
    local_nonpersistent_flags+=("--devel")
    flags+=("--disable-openapi-validation")
    local_nonpersistent_flags+=("--disable-openapi-validation")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--generate-name")
    flags+=("-g")
    local_nonpersistent_flags+=("--generate-name")
    local_nonpersistent_flags+=("-g")
    flags+=("--insecure-skip-tls-verify")
    local_nonpersistent_flags+=("--insecure-skip-tls-verify")
    flags+=("--key-file=")
    two_word_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file=")
    flags+=("--keyring=")
    two_word_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring=")
    flags+=("--name-template=")
    two_word_flags+=("--name-template")
    local_nonpersistent_flags+=("--name-template")
    local_nonpersistent_flags+=("--name-template=")
    flags+=("--no-hooks")
    local_nonpersistent_flags+=("--no-hooks")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--pass-credentials")
    local_nonpersistent_flags+=("--pass-credentials")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--post-renderer=")
    two_word_flags+=("--post-renderer")
    local_nonpersistent_flags+=("--post-renderer")
    local_nonpersistent_flags+=("--post-renderer=")
    flags+=("--render-subchart-notes")
    local_nonpersistent_flags+=("--render-subchart-notes")
    flags+=("--replace")
    local_nonpersistent_flags+=("--replace")
    flags+=("--repo=")
    two_word_flags+=("--repo")
    local_nonpersistent_flags+=("--repo")
    local_nonpersistent_flags+=("--repo=")
    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--skip-crds")
    local_nonpersistent_flags+=("--skip-crds")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--username=")
    two_word_flags+=("--username")
    local_nonpersistent_flags+=("--username")
    local_nonpersistent_flags+=("--username=")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--verify")
    local_nonpersistent_flags+=("--verify")
    flags+=("--version=")
    two_word_flags+=("--version")
    flags_with_completion+=("--version")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--wait-for-jobs")
    local_nonpersistent_flags+=("--wait-for-jobs")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_lint()
{
    last_command="helm_lint"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--strict")
    local_nonpersistent_flags+=("--strict")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--with-subcharts")
    local_nonpersistent_flags+=("--with-subcharts")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_list()
{
    last_command="helm_list"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    flags+=("-a")
    local_nonpersistent_flags+=("--all")
    local_nonpersistent_flags+=("-a")
    flags+=("--all-namespaces")
    flags+=("-A")
    local_nonpersistent_flags+=("--all-namespaces")
    local_nonpersistent_flags+=("-A")
    flags+=("--date")
    flags+=("-d")
    local_nonpersistent_flags+=("--date")
    local_nonpersistent_flags+=("-d")
    flags+=("--deployed")
    local_nonpersistent_flags+=("--deployed")
    flags+=("--failed")
    local_nonpersistent_flags+=("--failed")
    flags+=("--filter=")
    two_word_flags+=("--filter")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--filter")
    local_nonpersistent_flags+=("--filter=")
    local_nonpersistent_flags+=("-f")
    flags+=("--max=")
    two_word_flags+=("--max")
    two_word_flags+=("-m")
    local_nonpersistent_flags+=("--max")
    local_nonpersistent_flags+=("--max=")
    local_nonpersistent_flags+=("-m")
    flags+=("--offset=")
    two_word_flags+=("--offset")
    local_nonpersistent_flags+=("--offset")
    local_nonpersistent_flags+=("--offset=")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--pending")
    local_nonpersistent_flags+=("--pending")
    flags+=("--reverse")
    flags+=("-r")
    local_nonpersistent_flags+=("--reverse")
    local_nonpersistent_flags+=("-r")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--short")
    flags+=("-q")
    local_nonpersistent_flags+=("--short")
    local_nonpersistent_flags+=("-q")
    flags+=("--superseded")
    local_nonpersistent_flags+=("--superseded")
    flags+=("--time-format=")
    two_word_flags+=("--time-format")
    local_nonpersistent_flags+=("--time-format")
    local_nonpersistent_flags+=("--time-format=")
    flags+=("--uninstalled")
    local_nonpersistent_flags+=("--uninstalled")
    flags+=("--uninstalling")
    local_nonpersistent_flags+=("--uninstalling")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_package()
{
    last_command="helm_package"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app-version=")
    two_word_flags+=("--app-version")
    local_nonpersistent_flags+=("--app-version")
    local_nonpersistent_flags+=("--app-version=")
    flags+=("--dependency-update")
    flags+=("-u")
    local_nonpersistent_flags+=("--dependency-update")
    local_nonpersistent_flags+=("-u")
    flags+=("--destination=")
    two_word_flags+=("--destination")
    two_word_flags+=("-d")
    local_nonpersistent_flags+=("--destination")
    local_nonpersistent_flags+=("--destination=")
    local_nonpersistent_flags+=("-d")
    flags+=("--key=")
    two_word_flags+=("--key")
    local_nonpersistent_flags+=("--key")
    local_nonpersistent_flags+=("--key=")
    flags+=("--keyring=")
    two_word_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring=")
    flags+=("--passphrase-file=")
    two_word_flags+=("--passphrase-file")
    local_nonpersistent_flags+=("--passphrase-file")
    local_nonpersistent_flags+=("--passphrase-file=")
    flags+=("--sign")
    local_nonpersistent_flags+=("--sign")
    flags+=("--version=")
    two_word_flags+=("--version")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_plugin_install()
{
    last_command="helm_plugin_install"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--version=")
    two_word_flags+=("--version")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_plugin_list()
{
    last_command="helm_plugin_list"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_plugin_uninstall()
{
    last_command="helm_plugin_uninstall"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_plugin_update()
{
    last_command="helm_plugin_update"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_plugin()
{
    last_command="helm_plugin"

    command_aliases=()

    commands=()
    commands+=("install")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("add")
        aliashash["add"]="install"
    fi
    commands+=("list")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("ls")
        aliashash["ls"]="list"
    fi
    commands+=("uninstall")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("remove")
        aliashash["remove"]="uninstall"
        command_aliases+=("rm")
        aliashash["rm"]="uninstall"
    fi
    commands+=("update")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("up")
        aliashash["up"]="update"
    fi

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_pull()
{
    last_command="helm_pull"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--ca-file=")
    two_word_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file=")
    flags+=("--cert-file=")
    two_word_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file=")
    flags+=("--destination=")
    two_word_flags+=("--destination")
    two_word_flags+=("-d")
    local_nonpersistent_flags+=("--destination")
    local_nonpersistent_flags+=("--destination=")
    local_nonpersistent_flags+=("-d")
    flags+=("--devel")
    local_nonpersistent_flags+=("--devel")
    flags+=("--insecure-skip-tls-verify")
    local_nonpersistent_flags+=("--insecure-skip-tls-verify")
    flags+=("--key-file=")
    two_word_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file=")
    flags+=("--keyring=")
    two_word_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring=")
    flags+=("--pass-credentials")
    local_nonpersistent_flags+=("--pass-credentials")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--prov")
    local_nonpersistent_flags+=("--prov")
    flags+=("--repo=")
    two_word_flags+=("--repo")
    local_nonpersistent_flags+=("--repo")
    local_nonpersistent_flags+=("--repo=")
    flags+=("--untar")
    local_nonpersistent_flags+=("--untar")
    flags+=("--untardir=")
    two_word_flags+=("--untardir")
    local_nonpersistent_flags+=("--untardir")
    local_nonpersistent_flags+=("--untardir=")
    flags+=("--username=")
    two_word_flags+=("--username")
    local_nonpersistent_flags+=("--username")
    local_nonpersistent_flags+=("--username=")
    flags+=("--verify")
    local_nonpersistent_flags+=("--verify")
    flags+=("--version=")
    two_word_flags+=("--version")
    flags_with_completion+=("--version")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_repo_add()
{
    last_command="helm_repo_add"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--allow-deprecated-repos")
    local_nonpersistent_flags+=("--allow-deprecated-repos")
    flags+=("--ca-file=")
    two_word_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file=")
    flags+=("--cert-file=")
    two_word_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file=")
    flags+=("--force-update")
    local_nonpersistent_flags+=("--force-update")
    flags+=("--insecure-skip-tls-verify")
    local_nonpersistent_flags+=("--insecure-skip-tls-verify")
    flags+=("--key-file=")
    two_word_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file=")
    flags+=("--no-update")
    local_nonpersistent_flags+=("--no-update")
    flags+=("--pass-credentials")
    local_nonpersistent_flags+=("--pass-credentials")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--username=")
    two_word_flags+=("--username")
    local_nonpersistent_flags+=("--username")
    local_nonpersistent_flags+=("--username=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_repo_index()
{
    last_command="helm_repo_index"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--merge=")
    two_word_flags+=("--merge")
    local_nonpersistent_flags+=("--merge")
    local_nonpersistent_flags+=("--merge=")
    flags+=("--url=")
    two_word_flags+=("--url")
    local_nonpersistent_flags+=("--url")
    local_nonpersistent_flags+=("--url=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_repo_list()
{
    last_command="helm_repo_list"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_repo_remove()
{
    last_command="helm_repo_remove"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_repo_update()
{
    last_command="helm_repo_update"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_repo()
{
    last_command="helm_repo"

    command_aliases=()

    commands=()
    commands+=("add")
    commands+=("index")
    commands+=("list")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("ls")
        aliashash["ls"]="list"
    fi
    commands+=("remove")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("rm")
        aliashash["rm"]="remove"
    fi
    commands+=("update")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("up")
        aliashash["up"]="update"
    fi

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_rollback()
{
    last_command="helm_rollback"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--cleanup-on-fail")
    local_nonpersistent_flags+=("--cleanup-on-fail")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--force")
    local_nonpersistent_flags+=("--force")
    flags+=("--history-max=")
    two_word_flags+=("--history-max")
    local_nonpersistent_flags+=("--history-max")
    local_nonpersistent_flags+=("--history-max=")
    flags+=("--no-hooks")
    local_nonpersistent_flags+=("--no-hooks")
    flags+=("--recreate-pods")
    local_nonpersistent_flags+=("--recreate-pods")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--wait-for-jobs")
    local_nonpersistent_flags+=("--wait-for-jobs")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_search_hub()
{
    last_command="helm_search_hub"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--endpoint=")
    two_word_flags+=("--endpoint")
    local_nonpersistent_flags+=("--endpoint")
    local_nonpersistent_flags+=("--endpoint=")
    flags+=("--max-col-width=")
    two_word_flags+=("--max-col-width")
    local_nonpersistent_flags+=("--max-col-width")
    local_nonpersistent_flags+=("--max-col-width=")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_search_repo()
{
    last_command="helm_search_repo"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--devel")
    local_nonpersistent_flags+=("--devel")
    flags+=("--max-col-width=")
    two_word_flags+=("--max-col-width")
    local_nonpersistent_flags+=("--max-col-width")
    local_nonpersistent_flags+=("--max-col-width=")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--regexp")
    flags+=("-r")
    local_nonpersistent_flags+=("--regexp")
    local_nonpersistent_flags+=("-r")
    flags+=("--version=")
    two_word_flags+=("--version")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--versions")
    flags+=("-l")
    local_nonpersistent_flags+=("--versions")
    local_nonpersistent_flags+=("-l")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_search()
{
    last_command="helm_search"

    command_aliases=()

    commands=()
    commands+=("hub")
    commands+=("repo")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_helm_show_all()
{
    last_command="helm_show_all"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--ca-file=")
    two_word_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file=")
    flags+=("--cert-file=")
    two_word_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file=")
    flags+=("--devel")
    local_nonpersistent_flags+=("--devel")
    flags+=("--insecure-skip-tls-verify")
    local_nonpersistent_flags+=("--insecure-skip-tls-verify")
    flags+=("--key-file=")
    two_word_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file=")
    flags+=("--keyring=")
    two_word_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring=")
    flags+=("--pass-credentials")
    local_nonpersistent_flags+=("--pass-credentials")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--repo=")
    two_word_flags+=("--repo")
    local_nonpersistent_flags+=("--repo")
    local_nonpersistent_flags+=("--repo=")
    flags+=("--username=")
    two_word_flags+=("--username")
    local_nonpersistent_flags+=("--username")
    local_nonpersistent_flags+=("--username=")
    flags+=("--verify")
    local_nonpersistent_flags+=("--verify")
    flags+=("--version=")
    two_word_flags+=("--version")
    flags_with_completion+=("--version")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_show_chart()
{
    last_command="helm_show_chart"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--ca-file=")
    two_word_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file=")
    flags+=("--cert-file=")
    two_word_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file=")
    flags+=("--devel")
    local_nonpersistent_flags+=("--devel")
    flags+=("--insecure-skip-tls-verify")
    local_nonpersistent_flags+=("--insecure-skip-tls-verify")
    flags+=("--key-file=")
    two_word_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file=")
    flags+=("--keyring=")
    two_word_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring=")
    flags+=("--pass-credentials")
    local_nonpersistent_flags+=("--pass-credentials")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--repo=")
    two_word_flags+=("--repo")
    local_nonpersistent_flags+=("--repo")
    local_nonpersistent_flags+=("--repo=")
    flags+=("--username=")
    two_word_flags+=("--username")
    local_nonpersistent_flags+=("--username")
    local_nonpersistent_flags+=("--username=")
    flags+=("--verify")
    local_nonpersistent_flags+=("--verify")
    flags+=("--version=")
    two_word_flags+=("--version")
    flags_with_completion+=("--version")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_show_readme()
{
    last_command="helm_show_readme"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--ca-file=")
    two_word_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file=")
    flags+=("--cert-file=")
    two_word_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file=")
    flags+=("--devel")
    local_nonpersistent_flags+=("--devel")
    flags+=("--insecure-skip-tls-verify")
    local_nonpersistent_flags+=("--insecure-skip-tls-verify")
    flags+=("--key-file=")
    two_word_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file=")
    flags+=("--keyring=")
    two_word_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring=")
    flags+=("--pass-credentials")
    local_nonpersistent_flags+=("--pass-credentials")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--repo=")
    two_word_flags+=("--repo")
    local_nonpersistent_flags+=("--repo")
    local_nonpersistent_flags+=("--repo=")
    flags+=("--username=")
    two_word_flags+=("--username")
    local_nonpersistent_flags+=("--username")
    local_nonpersistent_flags+=("--username=")
    flags+=("--verify")
    local_nonpersistent_flags+=("--verify")
    flags+=("--version=")
    two_word_flags+=("--version")
    flags_with_completion+=("--version")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_show_values()
{
    last_command="helm_show_values"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--ca-file=")
    two_word_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file=")
    flags+=("--cert-file=")
    two_word_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file=")
    flags+=("--devel")
    local_nonpersistent_flags+=("--devel")
    flags+=("--insecure-skip-tls-verify")
    local_nonpersistent_flags+=("--insecure-skip-tls-verify")
    flags+=("--jsonpath=")
    two_word_flags+=("--jsonpath")
    local_nonpersistent_flags+=("--jsonpath")
    local_nonpersistent_flags+=("--jsonpath=")
    flags+=("--key-file=")
    two_word_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file=")
    flags+=("--keyring=")
    two_word_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring=")
    flags+=("--pass-credentials")
    local_nonpersistent_flags+=("--pass-credentials")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--repo=")
    two_word_flags+=("--repo")
    local_nonpersistent_flags+=("--repo")
    local_nonpersistent_flags+=("--repo=")
    flags+=("--username=")
    two_word_flags+=("--username")
    local_nonpersistent_flags+=("--username")
    local_nonpersistent_flags+=("--username=")
    flags+=("--verify")
    local_nonpersistent_flags+=("--verify")
    flags+=("--version=")
    two_word_flags+=("--version")
    flags_with_completion+=("--version")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_show()
{
    last_command="helm_show"

    command_aliases=()

    commands=()
    commands+=("all")
    commands+=("chart")
    commands+=("readme")
    commands+=("values")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_status()
{
    last_command="helm_status"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--revision=")
    two_word_flags+=("--revision")
    flags_with_completion+=("--revision")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--revision")
    local_nonpersistent_flags+=("--revision=")
    flags+=("--show-desc")
    local_nonpersistent_flags+=("--show-desc")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_template()
{
    last_command="helm_template"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-versions=")
    two_word_flags+=("--api-versions")
    two_word_flags+=("-a")
    local_nonpersistent_flags+=("--api-versions")
    local_nonpersistent_flags+=("--api-versions=")
    local_nonpersistent_flags+=("-a")
    flags+=("--atomic")
    local_nonpersistent_flags+=("--atomic")
    flags+=("--ca-file=")
    two_word_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file=")
    flags+=("--cert-file=")
    two_word_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file=")
    flags+=("--create-namespace")
    local_nonpersistent_flags+=("--create-namespace")
    flags+=("--dependency-update")
    local_nonpersistent_flags+=("--dependency-update")
    flags+=("--description=")
    two_word_flags+=("--description")
    local_nonpersistent_flags+=("--description")
    local_nonpersistent_flags+=("--description=")
    flags+=("--devel")
    local_nonpersistent_flags+=("--devel")
    flags+=("--disable-openapi-validation")
    local_nonpersistent_flags+=("--disable-openapi-validation")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--generate-name")
    flags+=("-g")
    local_nonpersistent_flags+=("--generate-name")
    local_nonpersistent_flags+=("-g")
    flags+=("--include-crds")
    local_nonpersistent_flags+=("--include-crds")
    flags+=("--insecure-skip-tls-verify")
    local_nonpersistent_flags+=("--insecure-skip-tls-verify")
    flags+=("--is-upgrade")
    local_nonpersistent_flags+=("--is-upgrade")
    flags+=("--key-file=")
    two_word_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file=")
    flags+=("--keyring=")
    two_word_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring=")
    flags+=("--kube-version=")
    two_word_flags+=("--kube-version")
    local_nonpersistent_flags+=("--kube-version")
    local_nonpersistent_flags+=("--kube-version=")
    flags+=("--name-template=")
    two_word_flags+=("--name-template")
    local_nonpersistent_flags+=("--name-template")
    local_nonpersistent_flags+=("--name-template=")
    flags+=("--no-hooks")
    local_nonpersistent_flags+=("--no-hooks")
    flags+=("--output-dir=")
    two_word_flags+=("--output-dir")
    local_nonpersistent_flags+=("--output-dir")
    local_nonpersistent_flags+=("--output-dir=")
    flags+=("--pass-credentials")
    local_nonpersistent_flags+=("--pass-credentials")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--post-renderer=")
    two_word_flags+=("--post-renderer")
    local_nonpersistent_flags+=("--post-renderer")
    local_nonpersistent_flags+=("--post-renderer=")
    flags+=("--release-name")
    local_nonpersistent_flags+=("--release-name")
    flags+=("--render-subchart-notes")
    local_nonpersistent_flags+=("--render-subchart-notes")
    flags+=("--replace")
    local_nonpersistent_flags+=("--replace")
    flags+=("--repo=")
    two_word_flags+=("--repo")
    local_nonpersistent_flags+=("--repo")
    local_nonpersistent_flags+=("--repo=")
    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--show-only=")
    two_word_flags+=("--show-only")
    two_word_flags+=("-s")
    local_nonpersistent_flags+=("--show-only")
    local_nonpersistent_flags+=("--show-only=")
    local_nonpersistent_flags+=("-s")
    flags+=("--skip-crds")
    local_nonpersistent_flags+=("--skip-crds")
    flags+=("--skip-tests")
    local_nonpersistent_flags+=("--skip-tests")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--username=")
    two_word_flags+=("--username")
    local_nonpersistent_flags+=("--username")
    local_nonpersistent_flags+=("--username=")
    flags+=("--validate")
    local_nonpersistent_flags+=("--validate")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--verify")
    local_nonpersistent_flags+=("--verify")
    flags+=("--version=")
    two_word_flags+=("--version")
    flags_with_completion+=("--version")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--wait-for-jobs")
    local_nonpersistent_flags+=("--wait-for-jobs")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_test()
{
    last_command="helm_test"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--filter=")
    two_word_flags+=("--filter")
    local_nonpersistent_flags+=("--filter")
    local_nonpersistent_flags+=("--filter=")
    flags+=("--logs")
    local_nonpersistent_flags+=("--logs")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_uninstall()
{
    last_command="helm_uninstall"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--description=")
    two_word_flags+=("--description")
    local_nonpersistent_flags+=("--description")
    local_nonpersistent_flags+=("--description=")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--keep-history")
    local_nonpersistent_flags+=("--keep-history")
    flags+=("--no-hooks")
    local_nonpersistent_flags+=("--no-hooks")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_upgrade()
{
    last_command="helm_upgrade"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--atomic")
    local_nonpersistent_flags+=("--atomic")
    flags+=("--ca-file=")
    two_word_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file")
    local_nonpersistent_flags+=("--ca-file=")
    flags+=("--cert-file=")
    two_word_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file")
    local_nonpersistent_flags+=("--cert-file=")
    flags+=("--cleanup-on-fail")
    local_nonpersistent_flags+=("--cleanup-on-fail")
    flags+=("--create-namespace")
    local_nonpersistent_flags+=("--create-namespace")
    flags+=("--description=")
    two_word_flags+=("--description")
    local_nonpersistent_flags+=("--description")
    local_nonpersistent_flags+=("--description=")
    flags+=("--devel")
    local_nonpersistent_flags+=("--devel")
    flags+=("--disable-openapi-validation")
    local_nonpersistent_flags+=("--disable-openapi-validation")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--force")
    local_nonpersistent_flags+=("--force")
    flags+=("--history-max=")
    two_word_flags+=("--history-max")
    local_nonpersistent_flags+=("--history-max")
    local_nonpersistent_flags+=("--history-max=")
    flags+=("--insecure-skip-tls-verify")
    local_nonpersistent_flags+=("--insecure-skip-tls-verify")
    flags+=("--install")
    flags+=("-i")
    local_nonpersistent_flags+=("--install")
    local_nonpersistent_flags+=("-i")
    flags+=("--key-file=")
    two_word_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file")
    local_nonpersistent_flags+=("--key-file=")
    flags+=("--keyring=")
    two_word_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring=")
    flags+=("--no-hooks")
    local_nonpersistent_flags+=("--no-hooks")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--pass-credentials")
    local_nonpersistent_flags+=("--pass-credentials")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--post-renderer=")
    two_word_flags+=("--post-renderer")
    local_nonpersistent_flags+=("--post-renderer")
    local_nonpersistent_flags+=("--post-renderer=")
    flags+=("--render-subchart-notes")
    local_nonpersistent_flags+=("--render-subchart-notes")
    flags+=("--repo=")
    two_word_flags+=("--repo")
    local_nonpersistent_flags+=("--repo")
    local_nonpersistent_flags+=("--repo=")
    flags+=("--reset-values")
    local_nonpersistent_flags+=("--reset-values")
    flags+=("--reuse-values")
    local_nonpersistent_flags+=("--reuse-values")
    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--skip-crds")
    local_nonpersistent_flags+=("--skip-crds")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--username=")
    two_word_flags+=("--username")
    local_nonpersistent_flags+=("--username")
    local_nonpersistent_flags+=("--username=")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--verify")
    local_nonpersistent_flags+=("--verify")
    flags+=("--version=")
    two_word_flags+=("--version")
    flags_with_completion+=("--version")
    flags_completion+=("__helm_handle_go_custom_completion")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--wait-for-jobs")
    local_nonpersistent_flags+=("--wait-for-jobs")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_verify()
{
    last_command="helm_verify"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--keyring=")
    two_word_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring")
    local_nonpersistent_flags+=("--keyring=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_version()
{
    last_command="helm_version"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--short")
    local_nonpersistent_flags+=("--short")
    flags+=("--template=")
    two_word_flags+=("--template")
    local_nonpersistent_flags+=("--template")
    local_nonpersistent_flags+=("--template=")
    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_helm_root_command()
{
    last_command="helm"

    command_aliases=()

    commands=()
    commands+=("completion")
    commands+=("create")
    commands+=("dependency")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("dep")
        aliashash["dep"]="dependency"
        command_aliases+=("dependencies")
        aliashash["dependencies"]="dependency"
    fi
    commands+=("env")
    commands+=("get")
    commands+=("help")
    commands+=("history")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("hist")
        aliashash["hist"]="history"
    fi
    commands+=("install")
    commands+=("lint")
    commands+=("list")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("ls")
        aliashash["ls"]="list"
    fi
    commands+=("package")
    commands+=("plugin")
    commands+=("pull")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("fetch")
        aliashash["fetch"]="pull"
    fi
    commands+=("repo")
    commands+=("rollback")
    commands+=("search")
    commands+=("show")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("inspect")
        aliashash["inspect"]="show"
    fi
    commands+=("status")
    commands+=("template")
    commands+=("test")
    commands+=("uninstall")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("del")
        aliashash["del"]="uninstall"
        command_aliases+=("delete")
        aliashash["delete"]="uninstall"
        command_aliases+=("un")
        aliashash["un"]="uninstall"
    fi
    commands+=("upgrade")
    commands+=("verify")
    commands+=("version")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("--kube-apiserver=")
    two_word_flags+=("--kube-apiserver")
    flags+=("--kube-as-group=")
    two_word_flags+=("--kube-as-group")
    flags+=("--kube-as-user=")
    two_word_flags+=("--kube-as-user")
    flags+=("--kube-ca-file=")
    two_word_flags+=("--kube-ca-file")
    flags+=("--kube-context=")
    two_word_flags+=("--kube-context")
    flags_with_completion+=("--kube-context")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--kube-token=")
    two_word_flags+=("--kube-token")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__helm_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__helm_handle_go_custom_completion")
    flags+=("--registry-config=")
    two_word_flags+=("--registry-config")
    flags+=("--repository-cache=")
    two_word_flags+=("--repository-cache")
    flags+=("--repository-config=")
    two_word_flags+=("--repository-config")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

__start_helm()
{
    local cur prev words cword
    declare -A flaghash 2>/dev/null || :
    declare -A aliashash 2>/dev/null || :
    if declare -F _init_completion >/dev/null 2>&1; then
        _init_completion -s || return
    else
        __helm_init_completion -n "=" || return
    fi

    local c=0
    local flags=()
    local two_word_flags=()
    local local_nonpersistent_flags=()
    local flags_with_completion=()
    local flags_completion=()
    local commands=("helm")
    local must_have_one_flag=()
    local must_have_one_noun=()
    local has_completion_function
    local last_command
    local nouns=()

    __helm_handle_word
}

if [[ $(type -t compopt) = "builtin" ]]; then
    complete -o default -F __start_helm helm
else
    complete -o default -o nospace -F __start_helm helm
fi

# ex: ts=4 sw=4 et filetype=sh
